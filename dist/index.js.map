{"version":3,"sources":["../src/providers/wallet.ts","../src/constants/apis.ts","../../../node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/index.mjs","../src/utils/environment.ts","../src/actions/getTokenPrice.ts","../src/actions/transferToken.ts","../src/constants/canisters.ts","../src/actions/prompts/token.ts","../src/canisters/icrc/index.did.ts","../src/utils/ic/principals.ts","../src/utils/common/data/json.ts","../src/utils/common/types/results.ts","../src/utils/ic/index.ts","../src/actions/createToken.ts","../src/canisters/pick-pump/index.did.ts","../src/utils/common/types/options.ts","../src/apis/uploadFile.ts","../src/actions/swapAction.ts","../src/canisters/kongswap/index.did.ts","../src/canisters/icpswap/swapFactory.did.ts","../src/canisters/icpswap/swapCanister.did.ts","../src/actions/checkBalancesAction.ts","../src/actions/buyTokenAction.ts","../src/canisters/storage/storage.did.ts","../src/actions/checkPaymentAction.ts","../src/actions/checkNeuronsAction.ts","../src/actions/createNeuronAction.ts","../src/actions/startDissolvingNeuronAction.ts","../src/actions/stopDissolvingNeuronAction.ts","../src/actions/increaseDissolveDelayAction.ts","../src/actions/disburseNeuronAction.ts","../src/index.ts"],"sourcesContent":["// src/providers/wallet.ts\nimport { Actor, type ActorSubclass, HttpAgent } from \"@dfinity/agent\";\nimport { Ed25519KeyIdentity } from \"@dfinity/identity\";\nimport type { IDL } from \"@dfinity/candid\";\nimport type { Principal } from \"@dfinity/principal\";\nimport type { IAgentRuntime, Memory, Provider, State } from \"@elizaos/core\";\n\nexport class WalletProvider {\n    private privateKey: string;\n    private identity: Ed25519KeyIdentity;\n    private host: string;\n\n    constructor(privateKey: string, host = \"https://ic0.app\") {\n        this.privateKey = privateKey;\n        this.host = host;\n        this.identity = this.createIdentity();\n    }\n\n    private createIdentity = (): Ed25519KeyIdentity => {\n        if (!this.privateKey) {\n            throw new Error(\"Private key is required\");\n        }\n        try {\n            const privateKeyBytes = Buffer.from(this.privateKey, \"hex\");\n            if (privateKeyBytes.length !== 32) {\n                throw new Error(\"Invalid private key length\");\n            }\n            const arrayBuffer = privateKeyBytes.buffer.slice(\n                privateKeyBytes.byteOffset,\n                privateKeyBytes.byteOffset + privateKeyBytes.length\n            );\n\n            \n            return Ed25519KeyIdentity.fromSecretKey(arrayBuffer);\n        } catch {\n            throw new Error(\"Failed to create ICP identity\");\n        }\n    };\n\n    public createAgent = async (): Promise<HttpAgent> => {\n        return HttpAgent.create({\n            identity: this.identity,\n            host: this.host,\n        });\n    };\n\n    public getIdentity = (): Ed25519KeyIdentity => {\n        return this.identity;\n    };\n\n    public getPrincipal = (): Principal => {\n        return this.identity.getPrincipal();\n    };\n\n    public createActor = async <T>(\n        idlFactory: IDL.InterfaceFactory,\n        canisterId: string,\n        fetchRootKey = false\n    ): Promise<ActorSubclass<T>> => {\n        const agent = await this.createAgent();\n        if (fetchRootKey) {\n            await agent.fetchRootKey();\n        }\n        return Actor.createActor<T>(idlFactory, {\n            agent,\n            canisterId,\n        });\n    };\n}\n\n// Add interface for the wallet provider return type\ninterface ICPWalletResponse {\n    wallet: WalletProvider | null;\n    identity: Ed25519KeyIdentity | null;\n    principal: string | null;\n    isAuthenticated: boolean;\n    createActor?: typeof WalletProvider.prototype.createActor;\n    error?: string;\n}\n\n// Add the new provider instance\nexport const icpWalletProvider: Provider = {\n    async get(\n        runtime: IAgentRuntime,\n        _message: Memory,\n        _state?: State\n    ): Promise<ICPWalletResponse> {\n        try {\n            const privateKey = runtime.getSetting(\n                \"INTERNET_COMPUTER_PRIVATE_KEY\"\n            );\n            if (!privateKey) {\n                throw new Error(\"INTERNET_COMPUTER_PRIVATE_KEY not found in settings\");\n            }\n\n            console.log(\"icp loaded successfully\");\n\n            // // Validate private key format\n            if (!/^[0-9a-fA-F]{64}$/.test(privateKey)) {\n                throw new Error(\"Invalid private key format - must be 32 bytes hex\");\n            }\n\n            const wallet = new WalletProvider(privateKey);\n\n            return {\n                wallet,\n                identity: wallet.getIdentity(),\n                principal: wallet.getPrincipal().toString(),\n                isAuthenticated: true,\n                createActor: wallet.createActor,\n            };\n        } catch (error: unknown) {\n            console.error(\"ICP Wallet Provider Error:\", error);\n            return {\n                wallet: null,\n                identity: null,\n                principal: null,\n                isAuthenticated: false,\n                error: error instanceof Error ? error.message : \"Unknown error initializing ICP wallet\",\n            };\n        }\n    },\n};\n\n// Export utility function\nexport const createAnonymousActor = async <T>(\n    idlFactory: IDL.InterfaceFactory,\n    canisterId: string,\n    host = \"https://ic0.app\",\n    fetchRootKey = false\n): Promise<ActorSubclass<T>> => {\n    const anonymousAgent = new HttpAgent({\n        host,\n        retryTimes: 1,\n        verifyQuerySignatures: false,\n    });\n\n    if (fetchRootKey) {\n        await anonymousAgent.fetchRootKey();\n    }\n\n    return Actor.createActor<T>(idlFactory, {\n        agent: anonymousAgent,\n        canisterId,\n    });\n};\n","// use your own web3 storage api host\nexport const WEB3_STORAGE_API_HOST = \"\";\nexport const KONG_SWAP_TOKEN_API_HOST = \"https://api.kongswap.io/api/tokens\";\nexport const STRIPE_API_KEY = process.env.STRIPE_API_KEY || \"\";\n","var util;\n(function (util) {\n    util.assertEqual = (val) => val;\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array\n            .map((val) => (typeof val === \"string\" ? `'${val}'` : val))\n            .join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then &&\n                typeof data.then === \"function\" &&\n                data.catch &&\n                typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n\nconst ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    get errors() {\n        return this.issues;\n    }\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(`Not a ZodError: ${value}`);\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `smaller than or equal to`\n                        : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return { message };\n};\n\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    if (issueData.message !== undefined) {\n        return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message,\n        };\n    }\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const overrideMap = getErrorMap();\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap, // contextual error map is first priority\n            ctx.schemaErrorMap, // then schema-bound map if available\n            overrideMap, // then global override map\n            overrideMap === errorMap ? undefined : errorMap, // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            const key = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n                key,\n                value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (key.value !== \"__proto__\" &&\n                (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\n\nvar _ZodEnum_cache, _ZodNativeEnum_cache;\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (this._key instanceof Array) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if (isValid(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        var _a, _b;\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return { message: message !== null && message !== void 0 ? message : ctx.defaultError };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };\n        }\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        var _a;\n        const ctx = {\n            common: {\n                issues: [],\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    \"~validate\"(data) {\n        var _a, _b;\n        const ctx = {\n            common: {\n                issues: [],\n                async: !!this[\"~standard\"].async,\n            },\n            path: [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        if (!this[\"~standard\"].async) {\n            try {\n                const result = this._parseSync({ data, path: [], parent: ctx });\n                return isValid(result)\n                    ? {\n                        value: result.value,\n                    }\n                    : {\n                        issues: ctx.common.issues,\n                    };\n            }\n            catch (err) {\n                if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes(\"encountered\")) {\n                    this[\"~standard\"].async = true;\n                }\n                ctx.common = {\n                    issues: [],\n                    async: true,\n                };\n            }\n        }\n        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result)\n            ? {\n                value: result.value,\n            }\n            : {\n                issues: ctx.common.issues,\n            });\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n                async: true,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await (isAsync(maybeAsyncResult)\n            ? maybeAsyncResult\n            : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\"\n                    ? refinementData(val, ctx)\n                    : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n        this[\"~standard\"] = {\n            version: 1,\n            vendor: \"zod\",\n            validate: (data) => this[\"~validate\"](data),\n        };\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\n// faster, simpler, safer\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\n// const ipv6Regex =\n// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nconst ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nconst ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n// https://base64.guru/standards/base64url\nconst base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\n// simple\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\n// no leap year validation\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\n// with leap year validation\nconst dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nconst dateRegex = new RegExp(`^${dateRegexSource}$`);\nfunction timeRegexSource(args) {\n    // let regex = `\\\\d{2}:\\\\d{2}:\\\\d{2}`;\n    let regex = `([01]\\\\d|2[0-3]):[0-5]\\\\d:[0-5]\\\\d`;\n    if (args.precision) {\n        regex = `${regex}\\\\.\\\\d{${args.precision}}`;\n    }\n    else if (args.precision == null) {\n        regex = `${regex}(\\\\.\\\\d+)?`;\n    }\n    return regex;\n}\nfunction timeRegex(args) {\n    return new RegExp(`^${timeRegexSource(args)}$`);\n}\n// Adapted from https://stackoverflow.com/a/3143231\nfunction datetimeRegex(args) {\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n    const opts = [];\n    opts.push(args.local ? `Z?` : `Z`);\n    if (args.offset)\n        opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n    regex = `${regex}(${opts.join(\"|\")})`;\n    return new RegExp(`^${regex}$`);\n}\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nfunction isValidJWT(jwt, alg) {\n    if (!jwtRegex.test(jwt))\n        return false;\n    try {\n        const [header] = jwt.split(\".\");\n        // Convert base64url to base64\n        const base64 = header\n            .replace(/-/g, \"+\")\n            .replace(/_/g, \"/\")\n            .padEnd(header.length + ((4 - (header.length % 4)) % 4), \"=\");\n        const decoded = JSON.parse(atob(base64));\n        if (typeof decoded !== \"object\" || decoded === null)\n            return false;\n        if (!decoded.typ || !decoded.alg)\n            return false;\n        if (alg && decoded.alg !== alg)\n            return false;\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction isValidCidr(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"nanoid\") {\n                if (!nanoidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"nanoid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch (_a) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"date\") {\n                const regex = dateRegex;\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"date\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"time\") {\n                const regex = timeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"time\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"duration\") {\n                if (!durationRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"duration\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"jwt\") {\n                if (!isValidJWT(input.data, check.alg)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"jwt\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cidr\") {\n                if (!isValidCidr(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cidr\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64\") {\n                if (!base64Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64url\") {\n                if (!base64urlRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n    }\n    nanoid(message) {\n        return this._addCheck({ kind: \"nanoid\", ...errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n    }\n    base64(message) {\n        return this._addCheck({ kind: \"base64\", ...errorUtil.errToObj(message) });\n    }\n    base64url(message) {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return this._addCheck({\n            kind: \"base64url\",\n            ...errorUtil.errToObj(message),\n        });\n    }\n    jwt(options) {\n        return this._addCheck({ kind: \"jwt\", ...errorUtil.errToObj(options) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n    }\n    cidr(options) {\n        return this._addCheck({ kind: \"cidr\", ...errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        var _a, _b;\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                local: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n            local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    date(message) {\n        return this._addCheck({ kind: \"date\", message });\n    }\n    time(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"time\",\n                precision: null,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"time\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    duration(message) {\n        return this._addCheck({ kind: \"duration\", ...errorUtil.errToObj(message) });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options === null || options === void 0 ? void 0 : options.position,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    /**\n     * Equivalent to `.min(1)`\n     */\n    nonempty(message) {\n        return this.min(1, errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isDate() {\n        return !!this._def.checks.find((ch) => ch.kind === \"date\");\n    }\n    get isTime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"time\");\n    }\n    get isDuration() {\n        return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isNANOID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get isCIDR() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\n    }\n    get isBase64() {\n        return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n    }\n    get isBase64url() {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    var _a;\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" ||\n            (ch.kind === \"multipleOf\" && util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null, min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" ||\n                ch.kind === \"int\" ||\n                ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            try {\n                input.data = BigInt(input.data);\n            }\n            catch (_a) {\n                return this._getInvalidInput(input);\n            }\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            return this._getInvalidInput(input);\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _getInvalidInput(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.bigint,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    var _a;\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        return (this._cached = { shape, keys });\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever &&\n            this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") ;\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    syncPairs.push({\n                        key,\n                        value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        var _a, _b, _c, _d;\n                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        util.objectKeys(mask).forEach((key) => {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return util.objectValues(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else if (type instanceof ZodOptional) {\n        return [undefined, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodNullable) {\n        return [null, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodBranded) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodReadonly) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodCatch) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else {\n        return [];\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util\n            .objectKeys(a)\n            .filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === ZodParsedType.date &&\n        bType === ZodParsedType.date &&\n        +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types,\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(async function (...args) {\n                const error = new ZodError([]);\n                const parsedArgs = await me._def.args\n                    .parseAsync(args, params)\n                    .catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(function (...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args\n                ? args\n                : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\").has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values, newDef = this._def) {\n        return ZodEnum.create(values, {\n            ...this._def,\n            ...newDef,\n        });\n    }\n    exclude(values, newDef = this._def) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n            ...this._def,\n            ...newDef,\n        });\n    }\n}\n_ZodEnum_cache = new WeakMap();\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodNativeEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string &&\n            ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\").has(input.data)) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\n_ZodNativeEnum_cache = new WeakMap();\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise &&\n            ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise\n            ? ctx.data\n            : Promise.resolve(ctx.data);\n        return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg) => {\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then(async (processed) => {\n                    if (status.value === \"aborted\")\n                        return INVALID;\n                    const result = await this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                    if (result.status === \"aborted\")\n                        return INVALID;\n                    if (result.status === \"dirty\")\n                        return DIRTY(result.value);\n                    if (status.value === \"dirty\")\n                        return DIRTY(result.value);\n                    return result;\n                });\n            }\n            else {\n                if (status.value === \"aborted\")\n                    return INVALID;\n                const result = this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (result.status === \"aborted\")\n                    return INVALID;\n                if (result.status === \"dirty\")\n                    return DIRTY(result.value);\n                if (status.value === \"dirty\")\n                    return DIRTY(result.value);\n                return result;\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!isValid(base))\n                    return base;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((base) => {\n                    if (!isValid(base))\n                        return base;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\"\n            ? params.default\n            : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if (isAsync(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nclass ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        const freeze = (data) => {\n            if (isValid(data)) {\n                data.value = Object.freeze(data.value);\n            }\n            return data;\n        };\n        return isAsync(result)\n            ? result.then((data) => freeze(data))\n            : freeze(result);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodReadonly.create = (type, params) => {\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params),\n    });\n};\n////////////////////////////////////////\n////////////////////////////////////////\n//////////                    //////////\n//////////      z.custom      //////////\n//////////                    //////////\n////////////////////////////////////////\n////////////////////////////////////////\nfunction cleanParams(params, data) {\n    const p = typeof params === \"function\"\n        ? params(data)\n        : typeof params === \"string\"\n            ? { message: params }\n            : params;\n    const p2 = typeof p === \"string\" ? { message: p } : p;\n    return p2;\n}\nfunction custom(check, _params = {}, \n/**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            var _a, _b;\n            const r = check(data);\n            if (r instanceof Promise) {\n                return r.then((r) => {\n                    var _a, _b;\n                    if (!r) {\n                        const params = cleanParams(_params, data);\n                        const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                        ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n                    }\n                });\n            }\n            if (!r) {\n                const params = cleanParams(_params, data);\n                const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n            }\n            return;\n        });\n    return ZodAny.create();\n}\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\nconst NEVER = INVALID;\n\nvar z = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    defaultErrorMap: errorMap,\n    setErrorMap: setErrorMap,\n    getErrorMap: getErrorMap,\n    makeIssue: makeIssue,\n    EMPTY_PATH: EMPTY_PATH,\n    addIssueToContext: addIssueToContext,\n    ParseStatus: ParseStatus,\n    INVALID: INVALID,\n    DIRTY: DIRTY,\n    OK: OK,\n    isAborted: isAborted,\n    isDirty: isDirty,\n    isValid: isValid,\n    isAsync: isAsync,\n    get util () { return util; },\n    get objectUtil () { return objectUtil; },\n    ZodParsedType: ZodParsedType,\n    getParsedType: getParsedType,\n    ZodType: ZodType,\n    datetimeRegex: datetimeRegex,\n    ZodString: ZodString,\n    ZodNumber: ZodNumber,\n    ZodBigInt: ZodBigInt,\n    ZodBoolean: ZodBoolean,\n    ZodDate: ZodDate,\n    ZodSymbol: ZodSymbol,\n    ZodUndefined: ZodUndefined,\n    ZodNull: ZodNull,\n    ZodAny: ZodAny,\n    ZodUnknown: ZodUnknown,\n    ZodNever: ZodNever,\n    ZodVoid: ZodVoid,\n    ZodArray: ZodArray,\n    ZodObject: ZodObject,\n    ZodUnion: ZodUnion,\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\n    ZodIntersection: ZodIntersection,\n    ZodTuple: ZodTuple,\n    ZodRecord: ZodRecord,\n    ZodMap: ZodMap,\n    ZodSet: ZodSet,\n    ZodFunction: ZodFunction,\n    ZodLazy: ZodLazy,\n    ZodLiteral: ZodLiteral,\n    ZodEnum: ZodEnum,\n    ZodNativeEnum: ZodNativeEnum,\n    ZodPromise: ZodPromise,\n    ZodEffects: ZodEffects,\n    ZodTransformer: ZodEffects,\n    ZodOptional: ZodOptional,\n    ZodNullable: ZodNullable,\n    ZodDefault: ZodDefault,\n    ZodCatch: ZodCatch,\n    ZodNaN: ZodNaN,\n    BRAND: BRAND,\n    ZodBranded: ZodBranded,\n    ZodPipeline: ZodPipeline,\n    ZodReadonly: ZodReadonly,\n    custom: custom,\n    Schema: ZodType,\n    ZodSchema: ZodType,\n    late: late,\n    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },\n    coerce: coerce,\n    any: anyType,\n    array: arrayType,\n    bigint: bigIntType,\n    boolean: booleanType,\n    date: dateType,\n    discriminatedUnion: discriminatedUnionType,\n    effect: effectsType,\n    'enum': enumType,\n    'function': functionType,\n    'instanceof': instanceOfType,\n    intersection: intersectionType,\n    lazy: lazyType,\n    literal: literalType,\n    map: mapType,\n    nan: nanType,\n    nativeEnum: nativeEnumType,\n    never: neverType,\n    'null': nullType,\n    nullable: nullableType,\n    number: numberType,\n    object: objectType,\n    oboolean: oboolean,\n    onumber: onumber,\n    optional: optionalType,\n    ostring: ostring,\n    pipeline: pipelineType,\n    preprocess: preprocessType,\n    promise: promiseType,\n    record: recordType,\n    set: setType,\n    strictObject: strictObjectType,\n    string: stringType,\n    symbol: symbolType,\n    transformer: effectsType,\n    tuple: tupleType,\n    'undefined': undefinedType,\n    union: unionType,\n    unknown: unknownType,\n    'void': voidType,\n    NEVER: NEVER,\n    ZodIssueCode: ZodIssueCode,\n    quotelessJson: quotelessJson,\n    ZodError: ZodError\n});\n\nexport { BRAND, DIRTY, EMPTY_PATH, INVALID, NEVER, OK, ParseStatus, ZodType as Schema, ZodAny, ZodArray, ZodBigInt, ZodBoolean, ZodBranded, ZodCatch, ZodDate, ZodDefault, ZodDiscriminatedUnion, ZodEffects, ZodEnum, ZodError, ZodFirstPartyTypeKind, ZodFunction, ZodIntersection, ZodIssueCode, ZodLazy, ZodLiteral, ZodMap, ZodNaN, ZodNativeEnum, ZodNever, ZodNull, ZodNullable, ZodNumber, ZodObject, ZodOptional, ZodParsedType, ZodPipeline, ZodPromise, ZodReadonly, ZodRecord, ZodType as ZodSchema, ZodSet, ZodString, ZodSymbol, ZodEffects as ZodTransformer, ZodTuple, ZodType, ZodUndefined, ZodUnion, ZodUnknown, ZodVoid, addIssueToContext, anyType as any, arrayType as array, bigIntType as bigint, booleanType as boolean, coerce, custom, dateType as date, datetimeRegex, z as default, errorMap as defaultErrorMap, discriminatedUnionType as discriminatedUnion, effectsType as effect, enumType as enum, functionType as function, getErrorMap, getParsedType, instanceOfType as instanceof, intersectionType as intersection, isAborted, isAsync, isDirty, isValid, late, lazyType as lazy, literalType as literal, makeIssue, mapType as map, nanType as nan, nativeEnumType as nativeEnum, neverType as never, nullType as null, nullableType as nullable, numberType as number, objectType as object, objectUtil, oboolean, onumber, optionalType as optional, ostring, pipelineType as pipeline, preprocessType as preprocess, promiseType as promise, quotelessJson, recordType as record, setType as set, setErrorMap, strictObjectType as strictObject, stringType as string, symbolType as symbol, effectsType as transformer, tupleType as tuple, undefinedType as undefined, unionType as union, unknownType as unknown, util, voidType as void, z };\n","import { IAgentRuntime } from '@elizaos/core';\nimport { z } from 'zod';\n\nexport const internetComputerEnvSchema = z.object({\n  INTERNET_COMPUTER_PRIVATE_KEY: z.string().min(1, 'ICP private key is required'),\n});\n\nexport type internetComputerConfig = z.infer<typeof internetComputerEnvSchema>;\n\nexport async function validateInternetComputerConfig(runtime: IAgentRuntime): Promise<internetComputerConfig> {\n  try {\n    const config = {\n      INTERNET_COMPUTER_PRIVATE_KEY: runtime.getSetting('INTERNET_COMPUTER_PRIVATE_KEY'),\n    };\n    return internetComputerEnvSchema.parse(config);\n  } catch (error) {\n    console.log('error::::', error);\n    if (error instanceof z.ZodError) {\n      const errorMessages = error.errors\n        .map((err) => `${err.path.join('.')}: ${err.message}`)\n        .join('\\n');\n      throw new Error(`Internet Computer configuration validation failed:\\n${errorMessages}`);\n    }\n    throw error;\n  }\n}\n","import {\n    type Action,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    type HandlerCallback,\n    ActionExample,\n} from \"@elizaos/core\";\nimport { tokenPriceTemplate } from \"./prompts/token\";\nimport { KONG_SWAP_TOKEN_API_HOST } from \"../constants/apis\";\nimport { validateInternetComputerConfig } from \"../utils/environment\";\n\ninterface TokenMetrics {\n    price: string;\n    price_change_24h: string | null;\n    market_cap: string;\n    volume_24h: string;\n    updated_at: string;\n}\n\nconst getTokenPrice = async (symbol: string): Promise<any> => {\n    try {\n        const response = await fetch(`${KONG_SWAP_TOKEN_API_HOST}?page=1&limit=50`);\n        const data = await response.json();\n        // Find the token in the items array\n        const token = data.items.find((item: any) => \n            item.symbol.toLowerCase() === symbol.toLowerCase()\n        );\n        console.log(\"token:\",token);\n        if (!token) {\n            throw new Error(`Token ${symbol} not found`);\n        }\n\n        return {\n            symbol: token.symbol,\n            price: token.metrics.price,\n            priceChange: token.metrics.price_change_24h || \"0\",\n            marketCap: token.metrics.market_cap,\n            volume: token.metrics.volume_24h,\n            lastUpdated: token.metrics.updated_at\n        };\n    } catch (error) {\n        console.error(\"Error fetching token price:\", error);\n        throw error;\n    }\n};\n\nexport const getTokenPriceAction: Action = {\n    name: \"GET_TOKEN_PRICE\",\n    description: \"Get token price from KongSwap\",\n    similes: [\"TOKEN_PRICE\", \"CHECK_PRICE\"],\n\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State | undefined,\n        _options: { [key: string]: unknown } | undefined,\n        callback?: HandlerCallback\n    ): Promise<void> => {\n        try {\n            if (!state) {\n                state = await runtime.composeState(message);\n            }\n\n            // Extract token symbol from message\n            const messageText = typeof message.content === \"string\" \n                ? message.content \n                : message.content.text || \"\";\n\n            // Look for token symbol in the message\n            const match = messageText.match(/price of (\\w+)/i) || \n                         messageText.match(/(\\w+) price/i);\n            \n            const symbol = match ? match[1].toUpperCase() : \"ICP\";\n            const priceData = await getTokenPrice(symbol);\n\n            callback?.({\n                text: `${symbol} is currently trading at $${Number(priceData.price).toFixed(4)}. ` +\n                      `In the last 24 hours, the price has changed by ${Number(priceData.priceChange).toFixed(2)}%. ` +\n                      `The token has a market cap of $${Number(priceData.marketCap).toLocaleString()} ` +\n                      `with a 24-hour trading volume of $${Number(priceData.volume).toLocaleString()}.`,\n                action: \"GET_TOKEN_PRICE\",\n                type: \"success\",\n            });\n\n        } catch (error) {\n            callback?.({\n                text: `❌ Failed to get token price: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n                action: \"GET_TOKEN_PRICE\",\n                type: \"error\",\n            });\n        }\n    },\n\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        const keywords = [\n            \"price\",\n            \"price of\",\n            \"token price\",\n            \"how much is\",\n            \"what is the price of\"\n        ];\n\n        await validateInternetComputerConfig(runtime);\n        \n        const messageText = (\n            typeof message.content === \"string\"\n                ? message.content\n                : message.content.text || \"\"\n        ).toLowerCase();\n\n        return keywords.some(keyword => messageText.includes(keyword));\n    },\n\n    examples: [[\n        {\n            user: \"{{user1}}\",\n            content: \"What's the price of ICP?\",\n        },\n        {\n            user: \"{{user2}}\",\n            content: {\n                text: \"💰 Current price of ICP is $5.66\\n📈 24h Change: -6.52%\",\n                action: \"GET_TOKEN_PRICE\",\n            },\n        }\n    ]] as ActionExample[][],\n};\n","import {\n  type ActionExample,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  ModelClass,\n  type State,\n  type Action,\n  composeContext,\n  generateObjectDeprecated,\n  generateObject\n} from \"@elizaos/core\";\n\nimport { transferTemplate } from \"./prompts/token\";\nimport { icpWalletProvider } from \"../providers/wallet\";\nimport { idlFactory as icrcIdlFactory } from \"../canisters/icrc/index.did\";\nimport { ActorCreator, TransferICRCParams } from \"../types\";\nimport { Principal } from \"@dfinity/principal\";\nimport { unwrapRustResultMap } from \"../utils/common/types/results\";\nimport { validateInternetComputerConfig } from \"../utils/environment\";\nimport { formatTransferError } from \"../utils/ic\";\n\n\n\nconst validateTransferParams = (response: any) => {\n  if (response.error) {\n    throw new Error(response.error);\n  }\n  \n  // Check for canister ID first\n  if (!response.canisterId) {\n    throw new Error(\"Please provide the canister ID for the token you want to transfer\");\n  }\n\n  // Validate canister ID format\n  if (response.canisterId.length !== 27) {\n    throw new Error(\"Invalid canister ID format. Please provide a valid 27-character canister ID\");\n  }\n\n  if (!response.to) {\n    throw new Error(\"Please provide a recipient address\");\n  }\n\n  if (!response.amount || isNaN(Number(response.amount))) {\n    throw new Error(\"Please specify a valid amount to transfer\");\n  }\n};\n//function to transfer icrc tokens\nconst transferTokenTransaction = async (\n  creator: ActorCreator,\n  params: TransferICRCParams\n) => {\n  //create the actor for the icrc canister\n  const actor: any = await creator(icrcIdlFactory, params.canisterId);\n\n  try {\n    // Convert string to Principal if it's a string\n    const toPrincipal = typeof params.to === 'string' \n      ? Principal.fromText(params.to)\n      : params.to;\n\n    // Convert decimal amount to proper token units (8 decimals for ICP)\n    console.log(\"Amount to transfer:\", params.amount, \"->\", params.amount.toString());\n\n    //transfer the tokens\n    console.log(\"transfers params\", params);\n    const result = await actor.icrc1_transfer({\n      to: {\n        owner: toPrincipal,\n        subaccount: [],\n      },\n      fee: [],\n      memo: [],\n      from_subaccount: [],\n      created_at_time: [],\n      amount:  Number(params.amount),\n    });\n    console.log(\"transfer result\", result);\n    \n\n    return unwrapRustResultMap(result,\n      (ok) => ({\n        Ok: `Transfer successful! Transaction block height: ${ok}. You can view more details about your transaction on the ICP dashboard.`\n      }),\n      (err) => {\n        throw new Error(formatTransferError(err));\n      }\n    );\n  } catch (error) {\n    console.error(\"Transfer error:\", error);\n     throw error;\n  }\n};\n\n\n\n\n  \nexport const transferTokenAction: Action = {\n  name: \"TRANSFER_TOKEN\",\n  description: \"Transfer an icrc1 token to a specific principal address\",\n  similes: [\"SEND_TOKENS\", \"SEND_TOKEN\", \"TRANSFER\"],\n\n  validate: async (runtime: IAgentRuntime, message: Memory) => {\n    const messageText = (\n      typeof message.content === \"string\"\n        ? message.content\n        : message.content.text || \"\"\n    ).toLowerCase();\n\n    // Must have both a transfer keyword AND an address pattern\n    const transferKeywords = [\"send\", \"transfer\", \"send to\", \"transfer to\"];\n    const addressPatterns = [\n      /to\\s+[a-zA-Z0-9-]{10,}/i,\n      /address[:\\s]+[a-zA-Z0-9-]{10,}/i,\n      /recipient[:\\s]+[a-zA-Z0-9-]{10,}/i,\n      /principal[:\\s]+[a-zA-Z0-9-]{10,}/i\n    ];\n\n    // Must have both a transfer keyword and an address pattern\n    return transferKeywords.some(keyword => messageText.includes(keyword)) &&\n           addressPatterns.some(pattern => pattern.test(messageText));\n  },\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State | undefined,\n    _options: { [key: string]: unknown } | undefined,\n    callback?: HandlerCallback\n  ): Promise<void> => {\n    try {\n      if (!state) {\n        state = await runtime.composeState(message);\n      } else {\n        state = await runtime.updateRecentMessageState(state);\n      }\n\n      const transferTokenContext = composeContext({\n        state,\n        template: transferTemplate,\n      });\n\n      const response = await generateObjectDeprecated({\n        runtime,\n        context: transferTokenContext,\n        modelClass: ModelClass.LARGE,\n      });\n\n      await validateTransferParams(response);\n\n      // Ask for confirmation before proceeding\n      callback?.({\n        text: `🔍 Please confirm this transfer:\\n\\nAmount: ${response.amount} tokens\\nTo: ${response.to}\\nCanister ID: ${response.canisterId}\\n\\nType 'yes' to confirm or 'no' to cancel.`,\n        action: \"TRANSFER_TOKEN\",\n        type: \"confirmation\"\n      });\n\n      // Wait for user confirmation\n      const confirmation = message.content.text;\n      \n      if (confirmation.toLowerCase().includes(\"no\")) {\n        callback?.({\n          text: \"❌ Transfer cancelled by user\",\n          action: \"TRANSFER_TOKEN\",\n          type: \"cancelled\"\n        });\n        return;\n      }\n\n      callback?.({\n        text: `🔄 Initiating transfer of ${response.amount} tokens to ${response.to}...`,\n        action: \"TRANSFER_TOKEN\",\n        type: \"processing\"\n      });\n\n      const walletResponse = await icpWalletProvider.get(runtime, message, state);\n      if (!walletResponse.wallet || !walletResponse.createActor) {\n        throw new Error(\"Failed to initialize wallet\");\n      }\n\n      const result = await transferTokenTransaction(walletResponse.createActor, {\n        to: response.to,\n        amount: Math.floor(Number(response.amount) * 1e8),\n        canisterId: response.canisterId,\n      });\n\n      callback?.({\n        text: `✅ Transfer complete: ${result.Ok}`,\n        action: \"TRANSFER_TOKEN\",\n        type: \"success\"\n      }); \n    } catch (error) {\n      console.error(\"Transfer error:\", error);\n      callback?.({\n        text: `❌ Transfer failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n        action: \"TRANSFER_TOKEN\",\n        type: \"error\"\n      });\n    }\n  },\n  //examples of the conversation\n  examples: [\n    [\n      {\n        user: \"{{user1}}\",\n        content: \"I want to sent 100 CHAT to my friend. and the recipient address: 4dcwd-5oxhq-z32kh-2prdj-uoh2h-rjfc7-6faoh-rsvbn-jypgt-t6ayq-cae\",\n      },\n      {\n        user: \"{{user2}}\",\n        content: {\n          text: \"Transferring tokens to my friend.\",\n          action: \"TRANSFER_TOKEN\",\n        },\n      },\n      {\n        user: \"{{user2}}\",\n        content: {\n          text: \"✨ Tokens transferred successfully!\",\n        },\n      },\n    ],\n    [\n      {\n        user: \"{{user1}}\",\n        content: \"I want to sent some EXE to my friend\",\n      },\n\n      {\n        user: \"{{user2}}\",\n        content: {\n          text: \"can you please specify the recipient address and the amount you want to send\",\n        },\n      },\n      {\n        user: \"{{user1}}\",\n        content: \"I want to sent 100 EXE to my friend. and the recipient address: 4dcwd-5oxhq-z32kh-2prdj-uoh2h-rjfc7-6faoh-rsvbn-jypgt-t6ayq-cae\",\n      },\n      {\n        user: \"{{user2}}\",\n        content: {\n          text: \"Transferring tokens to my friend.\",\n          action: \"TRANSFER_TOKEN\",\n        },\n      },\n      {\n        user: \"{{user2}}\",\n        content: {\n          text: \"✨ Tokens transferred successfully!\",\n        },\n      },\n    ],\n  ] as ActionExample[][],\n\n  \n};\n\n\n\n\n\n\n\n\n// add another action file and call it swapAction. it allows the user to swap between two tokens. the user needs to provide the token name they want to swap from, the amount and the token they want to swap to. when the user provides the token names or symbols, we fetch their canister ids from the konswap api, and log them. we return a dummy data for now.","export const CANISTER_IDS = {\n    PICK_PUMP: \"tl65e-yyaaa-aaaah-aq2pa-cai\",\n    CKBTC: \"mxzaz-hqaaa-aaaar-qaada-cai\",\n    ICPSWAP_FACTORY:\"4mmnk-kiaaa-aaaag-qbllq-cai\",\n    STORAGE_CANISTER: \"vv4p7-5yaaa-aaaal-asc7a-cai\",\n    CKUSDT: \"cngnf-vqaaa-aaaar-qag4q-cai\",\n    CHAT: \"2ouva-viaaa-aaaaq-aaamq-cai\",\n    ICP: \"ryjl3-tyaaa-aaaaa-aaaba-cai\",\n    GOVERNANCE: \"rrkah-fqaaa-aaaaa-aaaaq-cai\",\n    \n    ESCROW_ADDRESS: \"rtqyh-h2r2t-uvy5j-5sodt-jhkre-nem3l-bk5k6-smmbh-2dzex-gfttk-kqe\"\n\n} as const;","import { CANISTER_IDS } from \"../../constants/canisters\";\n\nexport const createTokenTemplate = `Based on the user's description, generate creative and memorable values for a new meme token on PickPump:\n\nUser's idea: \"{{recentMessages}}\"\n\nPlease generate:\n1. A catchy and fun token name that reflects the theme\n2. A 3-4 letter symbol based on the name (all caps)\n3. An engaging and humorous description (include emojis)\n4. Set other fields to null\n\nExample response:\n\\`\\`\\`json\n{\n    \"name\": \"CatLaser\",\n    \"symbol\": \"PAWS\",\n    \"description\": \"The first meme token powered by feline laser-chasing energy! Watch your investment zoom around like a red dot! 😺🔴✨\",\n    \"logo\": null,\n    \"website\": null,\n    \"twitter\": null,\n    \"telegram\": null\n}\n\\`\\`\\`\n\nGenerate appropriate meme token information based on the user's description.\nRespond with a JSON markdown block containing only the generated values.`;\n\n\n\nexport const transferTemplate = `Extract transfer details for sending tokens to another address.\n\nUser's message: \"{{recentMessages}}\"\n\nRequired information:\n1. amount: Number of tokens to send\n2. to: Recipient's principal address (63 characters)\n3. canisterId: Token's canister ID (27 characters)\n\nReturn in this format:\n{\n    \"amount\": \"[NUMBER]\",\n    \"to\": \"[PRINCIPAL_ADDRESS]\",\n    \"canisterId\": \"[CANISTER_ID]\"\n}\n\nRULES\n- if the user wants to send icp, the canisterId is ${CANISTER_IDS.ICP}\n- if the user wants to send ckusdt, the canisterId is ${CANISTER_IDS.CKUSDT}\n- if the user wants to send ckbtc, the canisterId is ${CANISTER_IDS.CKBTC}\n- if the user wants to send chat, the canisterId is ${CANISTER_IDS.CHAT}\n\nExample valid inputs:\n\"send 100 CHAT to 4dcwd-5oxhq-z32kh-2prdj-uoh2h-rjfc7-6faoh-rsvbn-jypgt-t6ayq-cae\"\n\"transfer 50 tokens to principal 4dcwd-5oxhq-z32kh-2prdj-uoh2h-rjfc7-6faoh-rsvbn-jypgt-t6ayq-cae\"\n\nNote: This is for sending tokens to another address ONLY. For token swaps, use the swap command instead.\nNO additional text or explanations in the output.`;\n\n\n\nexport const tokenPriceTemplate = `Here's the current market data for {{symbol}} from KongSwap:\n\nPlease generate a JSON object with:\n1. price (as string)\n2. priceChange (as string)\n3. marketCap (as string)\n4. volume (as string)\n5. lastUpdated (as string)\n\nExample responses:\n\nFor ICP:\n{\n      \"💰 price\": \"0.001\",\n      \"📈 24h change\": \"100\",\n      \"📊 market cap\": \"100\",\n      \"📉 24h volume\": \"100\",\n      \"⏰ last updated\": \"100\"\n  }\n\nFor any other token:\n{\n    \"price\": \"100\",\n    \"priceChange\": \"100\",\n    \"marketCap\": \"100\",\n    \"volume\": \"100\",\n    \"lastUpdated\": \"100\"\n}`;\n\n\n\nexport const logoPromptTemplate = `Based on this token idea: \"{{description}}\", create a detailed prompt for generating a logo image.\nThe prompt should describe visual elements, style, and mood for the logo.\nFocus on making it memorable and suitable for a cryptocurrency token.\nKeep the response short and specific.\nRespond with only the prompt text, no additional formatting.\n\nExample for a dog-themed token:\n\"A playful cartoon dog face with a cryptocurrency symbol on its collar, using vibrant colors and bold outlines, crypto-themed minimal style\"`;\n\n\nexport const swapTemplate = `Extract token swap details from the user's message. This is for exchanging one token for another.\n\nUser's message: \"{{recentMessages}}\"\n\nRequired information:\n1. fromToken: Source token name/symbol (e.g., \"CHAT\", \"ICP\")\n2. toToken: Target token name/symbol (e.g., \"EXE\", \"ckBTC\")\n3. amount: Number of source tokens to swap\n4. platform: Trading platform (\"kongswap\" or \"icpswap\")\n5. DEFAULT platform is kongswap\n6. When swapping, we dont need to specify the receiver address because the tokens are deposited to the wallet that did the swap automatically\n7. Please generate the response in JSON format:\n{\n    \"fromToken\": \"[SOURCE_TOKEN]\",\n    \"toToken\": \"[TARGET_TOKEN]\",\n    \"amount\": \"[NUMBER]\",\n    \"platform\": \"[PLATFORM]\"\n}\n\nExample valid inputs:\n\"swap 100 CHAT for EXE on kongswap\"\n\"exchange 50 ICP to ckBTC using icpswap\"\n\"convert 25 CHAT into EXE via kongswap\"\n\"trade 75 AWL for CHAT through icpswap\"\n\nNote: Platform (kongswap/icpswap) must be specified if no platform is specified in the user's message, use kongswap as default. No recipient address needed - swapped tokens go directly to your wallet.\nNO additional text or explanations in the output.`;\n\n\n\n\n\n\nexport const buyTokenTemplate = `Extract token purchase details from the user's message.\n\nUser's message: \"{{recentMessages}}\"\n\nRequired information:\n1. tokenSymbol: Token symbol/name to buy (e.g., \"ICP\", \"CHAT\")\n2. amount: Number of tokens to buy\n\nReturn in this format:\n{\n    \"tokenSymbol\": \"[TOKEN_SYMBOL]\",\n    \"amount\": \"[NUMBER]\"\n}\n\nExample valid inputs:\n\"I want to buy 100 ICP\"\n\"How can I purchase 50 CHAT tokens\"\n\"Buy 25 ckBTC\"\n\nNO additional text or explanations in the output.`;\n\n\n\nexport const stakeNeuronTemplate = `Extract ICP staking details from the user's message.\n\nUser's message: \"{{recentMessages}}\"\n\nRequired information:\n1. amount: Number of ICP to stake\n2. neuronId: Neuron ID to stake into (optional)\n\nReturn in this format:\n{\n    \"amount\": \"[NUMBER]\",\n    \"neuronId\": \"[NEURON_ID or null]\"\n}\n\nExample valid inputs:\n\"create a new neuron with 1 icp\"\n\"stake 1 ICP in a neuron\"\n\"stake 0.5 ICP in neuron 12345678\"\n\"add 1 ICP to neuron 987654321\"\n\"use 1 icp to stake in a neuron\"\n\nNote: If no neuron ID is specified, a new neuron will be created.\nNO additional text or explanations in the output.`;\n\n\n\nexport const startDissolveNeuronTemplate = `Extract neuron ID for dissolving from the user's message.\n\nUser's message: \"{{recentMessages}}\"\n\nRequired information:\n1. neuronId: Neuron ID to dissolve\n\nRULES:\n- Use the latest messages in the state to determine the neuron id\n\nReturn in this format as a bigInt:\n{\n    \"neuronId\": \"[NEURON_ID]\"\n}\n\nExample valid inputs:\n\"dissolve neuron 12345678\"\n\"start dissolving neuron 987654321\"\n\"start dissolving neuron 12345678\"\n\"start dissolving neuron 987654321\"\n\nNO additional text or explanations in the output.`;\n\n\nexport const stopDissolveNeuronTemplate = `Extract neuron ID for stopping dissolving from the user's message.\n\nUser's message: \"{{recentMessages}}\"\n\nRequired information:\n1. neuronId: Neuron ID to stop dissolving\n\nRULES:\n- Use the latest messages in the state to determine the neuron id\n\nReturn in this format as a bigInt:\n{\n    \"neuronId\": \"[NEURON_ID]\"\n}\n\nExample valid inputs:\n\"stop dissolving neuron 12345678\"\n\"stop dissolving neuron 987654321\"\n\"stop dissolving neuron 12345678\"\n\"stop dissolving neuron 987654321\"\n\nNO additional text or explanations in the output.`;\n\nexport const increaseDissolveDelayTemplate = `Extract neuron ID and delay time for increasing dissolve delay from the user's message.\n\nUser's message: \"{{recentMessages}}\"\n\n\nRULES:\n- If the user specifies the time in hours, convert it to days (1 day = 24 hours).\n- If the user specifies the time in days, use it directly.\n- Use the latest messages in the state to determine the neuron id and the delay time\n\n\n\nRequired information:\n1. neuronId: Neuron ID to increase dissolve delay\n2. delayDays: Delay time in days\n\nReturn in this format:\n{\n    \"neuronId\": \"[NEURON_ID]\",\n    \"delayDays\": \"[DELAY_DAYS]\"\n}\n\n\nExample valid inputs:\n\"increase dissolve delay for neuron 12345678 by 240 hours\"\n\"extend dissolve delay for neuron 987654321 by 10 days\"\n\"increase dissolve delay for neuron 12345678 by 48 hours\"\n\"extend dissolve delay for neuron 987654321 by 5 days\"\n\nNO additional text or explanations in the output.`;\n\nexport const disburseNeuronTemplate = `Extract disburse details from the user's message.\n\nUser's message: \"{{recentMessages}}\"\n\nRequired information:\n1. neuronId: Neuron ID to disburse\n2. amount: Number of tokens to disburse\n3. toAccountId: Recipient's account ID\n\nRULES:\n- Use the latest messages in the state to determine the neuron id, amount and toAccountId\n\nReturn in this format:\n{\n    \"neuronId\": \"[NEURON_ID]\",\n    \"amount\": \"[NUMBER]\",\n    \"toAccountId\": \"[ACCOUNT_ID]\"\n    }\n\nExample valid inputs:\n\"disburse 100 ICP from neuron 12345678 to 783b4a9fa2e08acf2e540ed442e57f497de231bbab974e6f57c4f493cb23d7fe\"\n\"withdraw 0.4 ICP from neuron 987654321 to 783b4a9fa2e08acf2e540ed442e57f497de231bbab974e6f57c4f493cb23d7fe\"\n\nNO additional text or explanations in the output.`;","import type { Principal } from '@dfinity/principal';\nimport type { ActorMethod } from '@dfinity/agent';\nimport type { IDL } from '@dfinity/candid';\n\nexport interface Account {\n  'owner' : Principal,\n  'subaccount' : [] | [Uint8Array | number[]],\n}\nexport interface Allowance {\n  'allowance' : bigint,\n  'expires_at' : [] | [bigint],\n}\nexport interface AllowanceArgs { 'account' : Account, 'spender' : Account }\nexport interface Approve {\n  'fee' : [] | [bigint],\n  'from' : Account,\n  'memo' : [] | [Uint8Array | number[]],\n  'created_at_time' : [] | [bigint],\n  'amount' : bigint,\n  'expected_allowance' : [] | [bigint],\n  'expires_at' : [] | [bigint],\n  'spender' : Account,\n}\nexport interface ApproveArgs {\n  'fee' : [] | [bigint],\n  'memo' : [] | [Uint8Array | number[]],\n  'from_subaccount' : [] | [Uint8Array | number[]],\n  'created_at_time' : [] | [bigint],\n  'amount' : bigint,\n  'expected_allowance' : [] | [bigint],\n  'expires_at' : [] | [bigint],\n  'spender' : Account,\n}\nexport type ApproveError = {\n    'GenericError' : { 'message' : string, 'error_code' : bigint }\n  } |\n  { 'TemporarilyUnavailable' : null } |\n  { 'Duplicate' : { 'duplicate_of' : bigint } } |\n  { 'BadFee' : { 'expected_fee' : bigint } } |\n  { 'AllowanceChanged' : { 'current_allowance' : bigint } } |\n  { 'CreatedInFuture' : { 'ledger_time' : bigint } } |\n  { 'TooOld' : null } |\n  { 'Expired' : { 'ledger_time' : bigint } } |\n  { 'InsufficientFunds' : { 'balance' : bigint } };\nexport interface ArchiveInfo {\n  'block_range_end' : bigint,\n  'canister_id' : Principal,\n  'block_range_start' : bigint,\n}\nexport interface ArchiveOptions {\n  'num_blocks_to_archive' : bigint,\n  'max_transactions_per_response' : [] | [bigint],\n  'trigger_threshold' : bigint,\n  'more_controller_ids' : [] | [Array<Principal>],\n  'max_message_size_bytes' : [] | [bigint],\n  'cycles_for_archive_creation' : [] | [bigint],\n  'node_max_memory_size_bytes' : [] | [bigint],\n  'controller_id' : Principal,\n}\nexport interface ArchivedBlocks {\n  'args' : Array<GetBlocksRequest>,\n  'callback' : [Principal, string],\n}\nexport interface ArchivedRange {\n  'callback' : [Principal, string],\n  'start' : bigint,\n  'length' : bigint,\n}\nexport interface ArchivedRange_1 {\n  'callback' : [Principal, string],\n  'start' : bigint,\n  'length' : bigint,\n}\nexport interface BlockRange { 'blocks' : Array<Value> }\nexport interface BlockWithId { 'id' : bigint, 'block' : ICRC3Value }\nexport interface Burn {\n  'from' : Account,\n  'memo' : [] | [Uint8Array | number[]],\n  'created_at_time' : [] | [bigint],\n  'amount' : bigint,\n  'spender' : [] | [Account],\n}\nexport interface ChangeArchiveOptions {\n  'num_blocks_to_archive' : [] | [bigint],\n  'max_transactions_per_response' : [] | [bigint],\n  'trigger_threshold' : [] | [bigint],\n  'more_controller_ids' : [] | [Array<Principal>],\n  'max_message_size_bytes' : [] | [bigint],\n  'cycles_for_archive_creation' : [] | [bigint],\n  'node_max_memory_size_bytes' : [] | [bigint],\n  'controller_id' : [] | [Principal],\n}\nexport type ChangeFeeCollector = { 'SetTo' : Account } |\n  { 'Unset' : null };\nexport interface ConsentInfo {\n  'metadata' : ConsentMessageMetadata,\n  'consent_message' : ConsentMessage,\n}\nexport type ConsentMessage = {\n    'LineDisplayMessage' : { 'pages' : Array<LineDisplayPage> }\n  } |\n  { 'GenericDisplayMessage' : string };\nexport interface ConsentMessageMetadata {\n  'utc_offset_minutes' : [] | [number],\n  'language' : string,\n}\nexport interface ConsentMessageRequest {\n  'arg' : Uint8Array | number[],\n  'method' : string,\n  'user_preferences' : ConsentMessageSpec,\n}\nexport interface ConsentMessageSpec {\n  'metadata' : ConsentMessageMetadata,\n  'device_spec' : [] | [DisplayMessageType],\n}\nexport interface DataCertificate {\n  'certificate' : [] | [Uint8Array | number[]],\n  'hash_tree' : Uint8Array | number[],\n}\nexport type DisplayMessageType = { 'GenericDisplay' : null } |\n  {\n    'LineDisplay' : {\n      'characters_per_line' : number,\n      'lines_per_page' : number,\n    }\n  };\nexport interface ErrorInfo { 'description' : string }\nexport interface FeatureFlags { 'icrc2' : boolean }\nexport interface GetArchivesArgs { 'from' : [] | [Principal] }\nexport interface GetBlocksRequest { 'start' : bigint, 'length' : bigint }\nexport interface GetBlocksResponse {\n  'certificate' : [] | [Uint8Array | number[]],\n  'first_index' : bigint,\n  'blocks' : Array<Value>,\n  'chain_length' : bigint,\n  'archived_blocks' : Array<ArchivedRange>,\n}\nexport interface GetBlocksResult {\n  'log_length' : bigint,\n  'blocks' : Array<BlockWithId>,\n  'archived_blocks' : Array<ArchivedBlocks>,\n}\nexport interface GetTransactionsResponse {\n  'first_index' : bigint,\n  'log_length' : bigint,\n  'transactions' : Array<Transaction>,\n  'archived_transactions' : Array<ArchivedRange_1>,\n}\nexport interface ICRC3ArchiveInfo {\n  'end' : bigint,\n  'canister_id' : Principal,\n  'start' : bigint,\n}\nexport interface ICRC3DataCertificate {\n  'certificate' : Uint8Array | number[],\n  'hash_tree' : Uint8Array | number[],\n}\nexport type ICRC3Value = { 'Int' : bigint } |\n  { 'Map' : Array<[string, ICRC3Value]> } |\n  { 'Nat' : bigint } |\n  { 'Blob' : Uint8Array | number[] } |\n  { 'Text' : string } |\n  { 'Array' : Array<ICRC3Value> };\nexport type Icrc21Error = {\n    'GenericError' : { 'description' : string, 'error_code' : bigint }\n  } |\n  { 'InsufficientPayment' : ErrorInfo } |\n  { 'UnsupportedCanisterCall' : ErrorInfo } |\n  { 'ConsentMessageUnavailable' : ErrorInfo };\nexport interface InitArgs {\n  'decimals' : [] | [number],\n  'token_symbol' : string,\n  'transfer_fee' : bigint,\n  'metadata' : Array<[string, MetadataValue]>,\n  'minting_account' : Account,\n  'initial_balances' : Array<[Account, bigint]>,\n  'fee_collector_account' : [] | [Account],\n  'archive_options' : ArchiveOptions,\n  'max_memo_length' : [] | [number],\n  'token_name' : string,\n  'feature_flags' : [] | [FeatureFlags],\n}\nexport type LedgerArgument = { 'Upgrade' : [] | [UpgradeArgs] } |\n  { 'Init' : InitArgs };\nexport interface LineDisplayPage { 'lines' : Array<string> }\nexport type MetadataValue = { 'Int' : bigint } |\n  { 'Nat' : bigint } |\n  { 'Blob' : Uint8Array | number[] } |\n  { 'Text' : string };\nexport interface Mint {\n  'to' : Account,\n  'memo' : [] | [Uint8Array | number[]],\n  'created_at_time' : [] | [bigint],\n  'amount' : bigint,\n}\nexport type Result = { 'Ok' : bigint } |\n  { 'Err' : TransferError };\nexport type Result_1 = { 'Ok' : ConsentInfo } |\n  { 'Err' : Icrc21Error };\nexport type Result_2 = { 'Ok' : bigint } |\n  { 'Err' : ApproveError };\nexport type Result_3 = { 'Ok' : bigint } |\n  { 'Err' : TransferFromError };\nexport interface StandardRecord { 'url' : string, 'name' : string }\nexport interface SupportedBlockType { 'url' : string, 'block_type' : string }\nexport interface Transaction {\n  'burn' : [] | [Burn],\n  'kind' : string,\n  'mint' : [] | [Mint],\n  'approve' : [] | [Approve],\n  'timestamp' : bigint,\n  'transfer' : [] | [Transfer],\n}\nexport interface TransactionRange { 'transactions' : Array<Transaction> }\nexport interface Transfer {\n  'to' : Account,\n  'fee' : [] | [bigint],\n  'from' : Account,\n  'memo' : [] | [Uint8Array | number[]],\n  'created_at_time' : [] | [bigint],\n  'amount' : bigint,\n  'spender' : [] | [Account],\n}\nexport interface TransferArg {\n  'to' : Account,\n  'fee' : [] | [bigint],\n  'memo' : [] | [Uint8Array | number[]],\n  'from_subaccount' : [] | [Uint8Array | number[]],\n  'created_at_time' : [] | [bigint],\n  'amount' : bigint,\n}\nexport type TransferError = {\n    'GenericError' : { 'message' : string, 'error_code' : bigint }\n  } |\n  { 'TemporarilyUnavailable' : null } |\n  { 'BadBurn' : { 'min_burn_amount' : bigint } } |\n  { 'Duplicate' : { 'duplicate_of' : bigint } } |\n  { 'BadFee' : { 'expected_fee' : bigint } } |\n  { 'CreatedInFuture' : { 'ledger_time' : bigint } } |\n  { 'TooOld' : null } |\n  { 'InsufficientFunds' : { 'balance' : bigint } };\nexport interface TransferFromArgs {\n  'to' : Account,\n  'fee' : [] | [bigint],\n  'spender_subaccount' : [] | [Uint8Array | number[]],\n  'from' : Account,\n  'memo' : [] | [Uint8Array | number[]],\n  'created_at_time' : [] | [bigint],\n  'amount' : bigint,\n}\nexport type TransferFromError = {\n    'GenericError' : { 'message' : string, 'error_code' : bigint }\n  } |\n  { 'TemporarilyUnavailable' : null } |\n  { 'InsufficientAllowance' : { 'allowance' : bigint } } |\n  { 'BadBurn' : { 'min_burn_amount' : bigint } } |\n  { 'Duplicate' : { 'duplicate_of' : bigint } } |\n  { 'BadFee' : { 'expected_fee' : bigint } } |\n  { 'CreatedInFuture' : { 'ledger_time' : bigint } } |\n  { 'TooOld' : null } |\n  { 'InsufficientFunds' : { 'balance' : bigint } };\nexport interface UpgradeArgs {\n  'change_archive_options' : [] | [ChangeArchiveOptions],\n  'token_symbol' : [] | [string],\n  'transfer_fee' : [] | [bigint],\n  'metadata' : [] | [Array<[string, MetadataValue]>],\n  'change_fee_collector' : [] | [ChangeFeeCollector],\n  'max_memo_length' : [] | [number],\n  'token_name' : [] | [string],\n  'feature_flags' : [] | [FeatureFlags],\n}\nexport type Value = { 'Int' : bigint } |\n  { 'Map' : Array<[string, Value]> } |\n  { 'Nat' : bigint } |\n  { 'Nat64' : bigint } |\n  { 'Blob' : Uint8Array | number[] } |\n  { 'Text' : string } |\n  { 'Array' : Vec };\nexport type Vec = Array<\n  { 'Int' : bigint } |\n    { 'Map' : Array<[string, Value]> } |\n    { 'Nat' : bigint } |\n    { 'Nat64' : bigint } |\n    { 'Blob' : Uint8Array | number[] } |\n    { 'Text' : string } |\n    { 'Array' : Vec }\n>;\nexport interface _SERVICE {\n  'archives' : ActorMethod<[], Array<ArchiveInfo>>,\n  'get_blocks' : ActorMethod<[GetBlocksRequest], GetBlocksResponse>,\n  'get_data_certificate' : ActorMethod<[], DataCertificate>,\n  'get_transactions' : ActorMethod<[GetBlocksRequest], GetTransactionsResponse>,\n  'icrc10_supported_standards' : ActorMethod<[], Array<StandardRecord>>,\n  'icrc1_balance_of' : ActorMethod<[Account], bigint>,\n  'icrc1_decimals' : ActorMethod<[], number>,\n  'icrc1_fee' : ActorMethod<[], bigint>,\n  'icrc1_metadata' : ActorMethod<[], Array<[string, MetadataValue]>>,\n  'icrc1_minting_account' : ActorMethod<[], [] | [Account]>,\n  'icrc1_name' : ActorMethod<[], string>,\n  'icrc1_supported_standards' : ActorMethod<[], Array<StandardRecord>>,\n  'icrc1_symbol' : ActorMethod<[], string>,\n  'icrc1_total_supply' : ActorMethod<[], bigint>,\n  'icrc1_transfer' : ActorMethod<[TransferArg], Result>,\n  'icrc21_canister_call_consent_message' : ActorMethod<\n    [ConsentMessageRequest],\n    Result_1\n  >,\n  'icrc2_allowance' : ActorMethod<[AllowanceArgs], Allowance>,\n  'icrc2_approve' : ActorMethod<[ApproveArgs], Result_2>,\n  'icrc2_transfer_from' : ActorMethod<[TransferFromArgs], Result_3>,\n  'icrc3_get_archives' : ActorMethod<\n    [GetArchivesArgs],\n    Array<ICRC3ArchiveInfo>\n  >,\n  'icrc3_get_blocks' : ActorMethod<[Array<GetBlocksRequest>], GetBlocksResult>,\n  'icrc3_get_tip_certificate' : ActorMethod<[], [] | [ICRC3DataCertificate]>,\n  'icrc3_supported_block_types' : ActorMethod<[], Array<SupportedBlockType>>,\n  'is_ledger_ready' : ActorMethod<[], boolean>,\n}\n\nexport const idlFactory = ({ IDL }: { IDL: any }) => {\n    const Account = IDL.Record({\n        owner: IDL.Principal,\n        subaccount: IDL.Opt(IDL.Vec(IDL.Nat8))\n    });\n\n    const TransferArgs = IDL.Record({\n        to: Account,\n        fee: IDL.Opt(IDL.Nat),\n        memo: IDL.Opt(IDL.Vec(IDL.Nat8)),\n        from_subaccount: IDL.Opt(IDL.Vec(IDL.Nat8)),\n        created_at_time: IDL.Opt(IDL.Nat64),\n        amount: IDL.Nat\n    });\n\n    const TransferError = IDL.Variant({\n        GenericError: IDL.Record({ message: IDL.Text, error_code: IDL.Nat }),\n        TemporarilyUnavailable: IDL.Null,\n        BadBurn: IDL.Record({ min_burn_amount: IDL.Nat }),\n        Duplicate: IDL.Record({ duplicate_of: IDL.Nat }),\n        BadFee: IDL.Record({ expected_fee: IDL.Nat }),\n        CreatedInFuture: IDL.Record({ ledger_time: IDL.Nat64 }),\n        TooOld: IDL.Null,\n        InsufficientFunds: IDL.Record({ balance: IDL.Nat }),\n    });\n\n    const TransferResult = IDL.Variant({\n        Ok: IDL.Nat,\n        Err: TransferError\n    });\n\n    const AllowanceArgs = IDL.Record({\n        account: Account,\n        spender: Account\n    });\n\n    const Allowance = IDL.Record({\n        allowance: IDL.Nat,\n        expires_at: IDL.Opt(IDL.Nat64)\n    });\n\n    const ApproveArgs = IDL.Record({\n        fee: IDL.Opt(IDL.Nat),\n        memo: IDL.Opt(IDL.Vec(IDL.Nat8)),\n        from_subaccount: IDL.Opt(IDL.Vec(IDL.Nat8)),\n        created_at_time: IDL.Opt(IDL.Nat64),\n        amount: IDL.Nat,\n        expected_allowance: IDL.Opt(IDL.Nat),\n        expires_at: IDL.Opt(IDL.Nat64),\n        spender: Account\n    });\n\n    const ApproveError = IDL.Variant({\n        GenericError: IDL.Record({ message: IDL.Text, error_code: IDL.Nat }),\n        TemporarilyUnavailable: IDL.Null,\n        Duplicate: IDL.Record({ duplicate_of: IDL.Nat }),\n        BadFee: IDL.Record({ expected_fee: IDL.Nat }),\n        AllowanceChanged: IDL.Record({ current_allowance: IDL.Nat }),\n        CreatedInFuture: IDL.Record({ ledger_time: IDL.Nat64 }),\n        TooOld: IDL.Null,\n        Expired: IDL.Record({ ledger_time: IDL.Nat64 }),\n        InsufficientFunds: IDL.Record({ balance: IDL.Nat })\n    });\n\n    const ApproveResult = IDL.Variant({\n        Ok: IDL.Nat,\n        Err: ApproveError\n    });\n\n    return IDL.Service({\n        icrc1_decimals: IDL.Func([], [IDL.Nat8], ['query']),\n        icrc1_fee: IDL.Func([], [IDL.Nat], ['query']),\n        icrc1_balance_of: IDL.Func([Account], [IDL.Nat], ['query']),\n        icrc1_transfer: IDL.Func([TransferArgs], [TransferResult], []),\n        icrc2_approve: IDL.Func([ApproveArgs], [ApproveResult], []),\n        icrc2_allowance: IDL.Func([AllowanceArgs], [Allowance], ['query'])\n    });\n};\nexport declare const init: (args: { IDL: typeof IDL }) => IDL.Type[];","import { Principal } from \"@dfinity/principal\";\n\n// Check if string is a Principal\nexport const isPrincipalText = (text: string | undefined): boolean => {\n    if (!text) return false;\n    try {\n        Principal.fromText(text);\n        return true;\n    } catch {\n        return false;\n    }\n};\n\n// Check if string is a Canister Id\nexport const isCanisterIdText = (text: string | undefined): boolean => {\n    if (!text) return false;\n    if (text.length !== 27) return false;\n    return isPrincipalText(text);\n};\n","import { isPrincipalText } from \"../../ic/principals\";\n// ? 1. bigint -> string\n// ? 2. principal -> string\n\nexport const customStringify = (v: any): string =>\n    JSON.stringify(v, (_key, value) => {\n        if (typeof value === \"bigint\") {\n            return `${value}`;\n        } else if (\n            value &&\n            typeof value === \"object\" &&\n            value._isPrincipal === true\n        ) {\n            return value.toText();\n        } else if (\n            value &&\n            typeof value === \"object\" &&\n            value.__principal__ &&\n            isPrincipalText(value.__principal__)\n        ) {\n            return value.__principal__;\n        }\n        return value;\n    });\n","import { customStringify } from \"../data/json\";\n\n// Motoko result object\nexport type MotokoResult<T, E> =\n    | { ok: T; err?: undefined }\n    | { ok?: undefined; err: E };\n\n// Rust result object\nexport type RustResult<T, E> =\n    | { Ok: T; Err?: undefined }\n    | { Ok?: undefined; Err: E };\n\n// ================ motoko ================\n\n// Map values\nexport const parseMotokoResult = <Ok, Err, T, E>(\n    result: MotokoResult<Ok, Err>,\n    transform_ok: (t: Ok) => T,\n    transform_err: (e: Err) => E\n): MotokoResult<T, E> => {\n    if (result.ok !== undefined) return { ok: transform_ok(result.ok) };\n    if (result.err !== undefined) return { err: transform_err(result.err) };\n    throw new Error(`wrong motoko result: ${customStringify(result)}`);\n};\n\n// Unwrap\nexport const unwrapMotokoResult = <T, E>(\n    result: MotokoResult<T, E>,\n    handle_error: (e: E) => T\n): T => {\n    if (result.ok !== undefined) return result.ok;\n    if (result.err !== undefined) return handle_error(result.err);\n    throw new Error(`wrong motoko result: ${customStringify(result)}`);\n};\n\n// Unwrap and map\nexport const unwrapMotokoResultMap = <O, E, T>(\n    result: MotokoResult<O, E>,\n    transform_ok: (o: O) => T,\n    transform_err: (e: E) => T\n): T => {\n    if (result.ok !== undefined) return transform_ok(result.ok);\n    if (result.err !== undefined) return transform_err(result.err);\n    throw new Error(`wrong motoko result: ${customStringify(result)}`);\n};\n\n// ================ rust ================\n\nexport const parseRustResult = <Ok, Err, T, E>(\n    result: RustResult<Ok, Err>,\n    transform_ok: (t: Ok) => T,\n    transform_err: (e: Err) => E\n): RustResult<T, E> => {\n    if (result.Ok !== undefined) return { Ok: transform_ok(result.Ok) };\n    if (result.Err !== undefined) return { Err: transform_err(result.Err) };\n    throw new Error(`wrong rust result: ${customStringify(result)}`);\n};\n\n// Unwrap\nexport const unwrapRustResult = <T, E>(\n    result: RustResult<T, E>,\n    handle_error: (e: E) => T\n): T => {\n    if (result.Ok !== undefined) return result.Ok;\n    if (result.Err !== undefined) return handle_error(result.Err);\n    throw new Error(`wrong rust result: ${customStringify(result)}`);\n};\n\n// Unwrap and map\nexport const unwrapRustResultMap = <O, E, T>(\n    result: RustResult<O, E>,\n    transform_ok: (o: O) => T,\n    transform_err: (e: E) => T\n): T => {\n    if (result.Ok !== undefined) return transform_ok(result.Ok);\n    if (result.Err !== undefined) return transform_err(result.Err);\n    throw new Error(`wrong rust result: ${customStringify(result)}`);\n};\n","import { getCrc32 } from \"@dfinity/principal/lib/esm/utils/getCrc\";\nimport { sha224 } from \"@dfinity/principal/lib/esm/utils/sha224\";\nimport { KONG_SWAP_TOKEN_API_HOST } from \"../../constants/apis\";\n\nimport { Principal } from \"@dfinity/principal\";\nimport { array2hex, hex2array, string2array } from \"../arrays\";\n\n// Principal -> string\nexport const principal2string = (p: Principal): string => p.toText();\n\n// string -> Principal\nexport const string2principal = (p: string): Principal => Principal.fromText(p);\n\n// Calculate account from Principal\n// export const principal2account = (\n//     principal: string,\n//     subaccount?: number | Uint8Array | number[]\n// ): string => {\n//     return array2hex(principal2account_array(principal, subaccount));\n// };\n\n// Calculate subAccount from Principal\nexport const principal2SubAccount = (principal: string): Uint8Array => {\n    const bytes = string2principal(principal).toUint8Array();\n    const subAccount = new Uint8Array(32);\n    subAccount[0] = bytes.length;\n    subAccount.set(bytes, 1);\n    return subAccount;\n};\n\n// Calculate account from Principal\n// export const principal2account_array = (\n//     principal: string,\n//     subaccount?: number | Uint8Array | number[]\n// ): number[] => {\n//     let subaccountArray: number[];\n//     if (typeof subaccount === \"number\") {\n//         subaccountArray = [\n//             (subaccount >> 24) & 0xff,\n//             (subaccount >> 16) & 0xff,\n//             (subaccount >> 8) & 0xff,\n//             subaccount & 0xff,\n//         ];\n//     }\n//     if (subaccount === undefined) {\n//         subaccountArray = [];\n//     } else if (Array.isArray(subaccount)) {\n//         subaccountArray = [...subaccount];\n//     } else if (subaccount instanceof Uint8Array) {\n//         subaccountArray = Array.from(subaccount);\n//     } else {\n//         throw new Error(`Invalid subaccount type: ${typeof subaccount}`);\n//     }\n\n//     while (subaccountArray.length < 32) {\n//         subaccountArray.unshift(0);\n//     }\n//     if (subaccountArray.length !== 32) {\n//         throw new Error(`Wrong subaccount length: ${subaccountArray.length}`);\n//     }\n\n//     const buffer: number[] = [\n//         ...string2array(\"\\x0Aaccount-id\"),\n//         ...Array.from(string2principal(principal).toUint8Array()),\n//         ...subaccountArray,\n//     ];\n\n//     const hash = sha224(new Uint8Array(buffer));\n//     const checksum = getCrc32(hash);\n\n//     const result = [\n//         (checksum >> 24) & 0xff,\n//         (checksum >> 16) & 0xff,\n//         (checksum >> 8) & 0xff,\n//         (checksum >> 0) & 0xff,\n//         ...Array.from(hash),\n//     ];\n\n//     return result;\n// };\n\n// Check if it's a valid account\nexport const isAccountHex = (text: string | undefined): boolean => {\n    if (!text) return false;\n    if (text.length !== 64) return false;\n    try {\n        return hex2array(text).length === 32;\n    } catch {\n        // Ignore error\n    }\n    return false;\n};\n\n\nexport const formatTransferError = (err: any): string => {\n    if (err.InsufficientFunds) {\n      return `Insufficient funds. Current balance: ${(Number(err.InsufficientFunds.balance))/1e8}`;\n    }\n    if (err.BadFee) {\n      return `Incorrect fee. Expected fee: ${err.BadFee.expected_fee} tokens`;\n    }\n    if (err.GenericError) {\n      return `${err.GenericError.message} (Error code: ${err.GenericError.error_code})`;\n    }\n    if (err.TemporarilyUnavailable) {\n      return \"Service temporarily unavailable. Please try again later\";\n    }\n    if (err.CreatedInFuture) {\n      return \"Transaction timestamp is in the future\";\n    }\n    if (err.TooOld) {\n      return \"Transaction is too old\";\n    }\n    if (err.Duplicate) {\n      return `Duplicate transaction. Already processed in block ${err.Duplicate.duplicate_of}`;\n    }\n    return `Unknown error: ${JSON.stringify(err)}`;\n  };\n\n\n  export const validateTransferParams = (response: any) => {\n    if (response.error) {\n      throw new Error(response.error);\n    }\n    \n    // Check for canister ID first\n    if (!response.canisterId) {\n      throw new Error(\"Please provide the canister ID for the token you want to transfer\");\n    }\n\n    // Validate canister ID format\n    if (response.canisterId.length !== 27) {\n      throw new Error(\"Invalid canister ID format. Please provide a valid 27-character canister ID\");\n    }\n\n    if (!response.to) {\n      throw new Error(\"Please provide a recipient address\");\n    }\n\n    if (!response.amount || isNaN(Number(response.amount))) {\n      throw new Error(\"Please specify a valid amount to transfer\");\n    }\n  };\n\n\n\ninterface TokenInfo {\n  symbol: string;\n  name: string;\n  canisterId: string;\n}\n\nexport const getTokenByNameOrSymbol = async (nameOrSymbol: string): Promise<TokenInfo | null> => {\n  try {\n    const response = await fetch(KONG_SWAP_TOKEN_API_HOST);\n    const data = await response.json();\n    \n    const searchTerm = nameOrSymbol.toLowerCase().trim();\n\n    // Find token by exact match first\n    let token = data.items.find((t: any) => \n      t.symbol.toLowerCase() === searchTerm || \n      t.name.toLowerCase() === searchTerm\n    );\n\n    // If no exact match, try partial/fuzzy matching\n    if (!token) {\n      token = data.items.find((t: any) => {\n        const symbol = t.symbol.toLowerCase();\n        const name = t.name.toLowerCase();\n        \n        // Check if search term is part of the name\n        if (name.includes(searchTerm)) return true;\n        \n        // Check if search term matches initials of symbol\n        if (searchTerm.split('').every(char => symbol.includes(char))) return true;\n        \n        // Check if search term is similar to symbol\n        if (symbol.includes(searchTerm) || searchTerm.includes(symbol)) return true;\n\n        return false;\n      });\n    }\n\n    // console.log(\"Token found:\", token);\n    if (!token) return null;\n\n    return {\n      symbol: token.symbol,\n      name: token.name,\n      canisterId: token.canister_id\n    };\n  } catch (error) {\n    console.error(\"Error getting token by name/symbol:\", error);\n    return null;\n  }\n}; ","import {\n    composeContext,\n    generateImage,\n    generateText,\n    generateObjectDeprecated,\n} from \"@elizaos/core\";\nimport {\n    type ActionExample,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n    type Action,\n} from \"@elizaos/core\";\nimport { idlFactory } from \"../canisters/pick-pump/index.did\";\nimport type { _SERVICE } from \"../canisters/pick-pump/index.did.d\";\nimport type { ActorCreator, CreateMemeTokenArg } from \"../types\";\nimport { unwrapOption, wrapOption } from \"../utils/common/types/options\";\nimport { unwrapRustResultMap } from \"../utils/common/types/results\";\nimport { icpWalletProvider } from \"../providers/wallet\";\nimport { uploadFileToWeb3Storage } from \"../apis/uploadFile\";\nimport { createTokenTemplate, logoPromptTemplate } from \"./prompts/token\";\nimport { CANISTER_IDS } from \"../constants/canisters\";\n\nasync function createTokenTransaction(\n    creator: ActorCreator,\n    tokenInfo: CreateMemeTokenArg\n) {\n    const actor: _SERVICE = await creator(idlFactory, CANISTER_IDS.PICK_PUMP);\n    const result = await actor.create_token({\n        ...tokenInfo,\n        name: tokenInfo.name,\n        symbol: tokenInfo.symbol,\n        description: tokenInfo.description,\n        logo: tokenInfo.logo,\n        twitter: wrapOption(tokenInfo.twitter),\n        website: wrapOption(tokenInfo.website),\n        telegram: wrapOption(tokenInfo.telegram),\n    });\n\n    return unwrapRustResultMap(\n        result,\n        (ok) => ({\n            ...ok,\n            id: ok.id.toString(),\n            created_at: ok.created_at.toString(),\n            available_token: ok.available_token.toString(),\n            volume_24h: ok.volume_24h.toString(),\n            last_tx_time: ok.last_tx_time.toString(),\n            market_cap_icp: ok.market_cap_icp.toString(),\n            twitter: unwrapOption(ok.twitter),\n            website: unwrapOption(ok.website),\n            telegram: unwrapOption(ok.telegram),\n        }),\n        (err) => {\n            throw new Error(`Token creation failed: ${err}`);\n        }\n    );\n}\n\nasync function generateTokenLogo(\n    description: string,\n    runtime: IAgentRuntime\n): Promise<string | null> {\n    const logoPrompt = `Create a fun and memorable logo for a cryptocurrency token with these characteristics: ${description}. The logo should be simple, iconic, and suitable for a meme token. Style: minimal, bold colors, crypto-themed.`;\n\n    const result = await generateImage(\n        {\n            prompt: logoPrompt,\n            width: 512,\n            height: 512,\n            count: 1,\n        },\n        runtime\n    );\n\n    if (result.success && result.data && result.data.length > 0) {\n        return result.data[0];\n    }\n\n    return null;\n}\n\nexport const executeCreateToken: Action = {\n    name: \"CREATE_TOKEN\",\n    similes: [\n        \"CREATE_PICKPUMP_TOKEN\",\n        \"MINT_PICKPUMP\",\n        \"PICKPUMP_TOKEN\",\n        \"PP_TOKEN\",\n        \"PICKPUMP发币\",\n        \"PP发币\",\n        \"在PICKPUMP上发币\",\n        \"PICKPUMP代币\",\n    ],\n    description:\n        \"Create a new meme token on PickPump platform (Internet Computer). This action helps users create and launch tokens specifically on the PickPump platform.\",\n    validate: async (_runtime: IAgentRuntime, message: Memory) => {\n        const keywords = [\n            \"pickpump\",\n            \"pp\",\n            \"皮克帮\",\n            \"token\",\n            \"coin\",\n            \"代币\",\n            \"币\",\n            \"create\",\n            \"mint\",\n            \"launch\",\n            \"deploy\",\n            \"创建\",\n            \"发行\",\n            \"铸造\",\n        ];\n\n        const messageText = (\n            typeof message.content === \"string\"\n                ? message.content\n                : message.content.text || \"\"\n        ).toLowerCase();\n\n        return keywords.some((keyword) =>\n            messageText.includes(keyword.toLowerCase())\n        );\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State | undefined,\n        _options: { [key: string]: unknown } | undefined,\n        callback?: HandlerCallback\n    ): Promise<void> => {\n        callback?.({\n            text: \"🔄 Creating meme token...\",\n            action: \"CREATE_TOKEN\",\n            type: \"processing\",\n        });\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n\n        //get the token name from the user's message\n        const createTokenContext = composeContext({\n            state: currentState,\n            template: createTokenTemplate,\n        });\n\n        const response = await generateObjectDeprecated({\n            runtime,\n            context: createTokenContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        const logoPromptContext = composeContext({\n            state,\n            template: logoPromptTemplate.replace(\n                \"{{description}}\",\n                response.description\n            ),\n        });\n\n        const logoPrompt = await generateText({\n            runtime,\n            context: logoPromptContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        const logo = await generateTokenLogo(logoPrompt, runtime);\n        if (!logo) {\n            throw new Error(\"Failed to generate token logo\");\n        }\n\n        const logoUploadResult = await uploadFileToWeb3Storage(logo);\n        if (!logoUploadResult.urls?.gateway) {\n            throw new Error(\"Failed to upload logo to Web3Storage\");\n        }\n\n        try {\n            const { wallet } = await icpWalletProvider.get(\n                runtime,\n                message,\n                state\n            );\n\n            const creator = wallet.createActor;\n            const createTokenResult = await createTokenTransaction(creator, {\n                name: response.name,\n                symbol: response.symbol,\n                description: response.description,\n                logo: logoUploadResult.urls.gateway,\n            });\n\n            const responseMsg = {\n                text: `✨ Created new meme token:\\n🪙 ${response.name} (${response.symbol})\\n📝 ${response.description}`,\n                data: createTokenResult,\n                action: \"CREATE_TOKEN\",\n                type: \"success\",\n            };\n            callback?.(responseMsg);\n        } catch (error: unknown) {\n            const responseMsg = {\n                text: `Failed to create token: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n                action: \"CREATE_TOKEN\",\n                type: \"error\",\n            };\n            callback?.(responseMsg);\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: \"I want to create a space cat token on PickPump\",\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Creating space cat token on PickPump...\",\n                    action: \"CREATE_TOKEN\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"✨ Token created successfully!\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: \"Help me create a pizza-themed funny token on PP\",\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Creating pizza token on PickPump...\",\n                    action: \"CREATE_TOKEN\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","export const idlFactory = ({ IDL }: { IDL: any }) => {\n    const Result = IDL.Variant({ Ok: IDL.Nat, Err: IDL.Text });\n    const CreateMemeTokenArg = IDL.Record({\n        twitter: IDL.Opt(IDL.Text),\n        logo: IDL.Text,\n        name: IDL.Text,\n        description: IDL.Text,\n        website: IDL.Opt(IDL.Text),\n        telegram: IDL.Opt(IDL.Text),\n        symbol: IDL.Text,\n    });\n    const MemeToken = IDL.Record({\n        id: IDL.Nat64,\n        creator: IDL.Text,\n        available_token: IDL.Nat,\n        twitter: IDL.Opt(IDL.Text),\n        volume_24h: IDL.Nat,\n        logo: IDL.Text,\n        name: IDL.Text,\n        liquidity: IDL.Float64,\n        description: IDL.Text,\n        created_at: IDL.Nat64,\n        website: IDL.Opt(IDL.Text),\n        last_tx_time: IDL.Nat64,\n        canister: IDL.Opt(IDL.Text),\n        market_cap_icp: IDL.Nat,\n        market_cap_usd: IDL.Float64,\n        price: IDL.Float64,\n        telegram: IDL.Opt(IDL.Text),\n        symbol: IDL.Text,\n    });\n    const Result_1 = IDL.Variant({ Ok: MemeToken, Err: IDL.Text });\n    const Transaction = IDL.Record({\n        token_amount: IDL.Nat,\n        token_id: IDL.Nat64,\n        token_symbol: IDL.Text,\n        from: IDL.Text,\n        timestamp: IDL.Nat64,\n        icp_amount: IDL.Nat,\n        tx_type: IDL.Text,\n    });\n    const CreateCommentArg = IDL.Record({\n        token: IDL.Text,\n        content: IDL.Text,\n        image: IDL.Opt(IDL.Text),\n    });\n    const Sort = IDL.Variant({\n        CreateTimeDsc: IDL.Null,\n        LastTradeDsc: IDL.Null,\n        MarketCapDsc: IDL.Null,\n    });\n    const Candle = IDL.Record({\n        low: IDL.Float64,\n        high: IDL.Float64,\n        close: IDL.Float64,\n        open: IDL.Float64,\n        timestamp: IDL.Nat64,\n    });\n    const Comment = IDL.Record({\n        creator: IDL.Text,\n        token: IDL.Text,\n        content: IDL.Text,\n        created_at: IDL.Nat64,\n        image: IDL.Opt(IDL.Text),\n    });\n    const Holder = IDL.Record({ balance: IDL.Nat, owner: IDL.Text });\n    const User = IDL.Record({\n        principal: IDL.Text,\n        name: IDL.Text,\n        last_login_seconds: IDL.Nat64,\n        register_at_second: IDL.Nat64,\n        avatar: IDL.Text,\n    });\n    const MemeTokenView = IDL.Record({\n        token: MemeToken,\n        balance: IDL.Nat,\n    });\n    const WalletReceiveResult = IDL.Record({ accepted: IDL.Nat64 });\n    return IDL.Service({\n        buy: IDL.Func([IDL.Nat64, IDL.Float64], [Result], []),\n        calculate_buy: IDL.Func([IDL.Nat64, IDL.Float64], [Result], [\"query\"]),\n        calculate_sell: IDL.Func([IDL.Nat64, IDL.Float64], [Result], [\"query\"]),\n        create_token: IDL.Func([CreateMemeTokenArg], [Result_1], []),\n        king_of_hill: IDL.Func([], [IDL.Opt(MemeToken)], [\"query\"]),\n        last_txs: IDL.Func([IDL.Nat64], [IDL.Vec(Transaction)], [\"query\"]),\n        post_comment: IDL.Func([CreateCommentArg], [], []),\n        query_all_tokens: IDL.Func(\n            [IDL.Nat64, IDL.Nat64, IDL.Opt(Sort)],\n            [IDL.Vec(MemeToken), IDL.Nat64],\n            [\"query\"]\n        ),\n        query_token: IDL.Func([IDL.Nat64], [IDL.Opt(MemeToken)], [\"query\"]),\n        query_token_candle: IDL.Func(\n            [IDL.Nat64, IDL.Opt(IDL.Nat64)],\n            [IDL.Vec(Candle)],\n            [\"query\"]\n        ),\n        query_token_comments: IDL.Func(\n            [IDL.Principal, IDL.Nat64, IDL.Nat64],\n            [IDL.Vec(Comment), IDL.Nat64],\n            [\"query\"]\n        ),\n        query_token_holders: IDL.Func(\n            [IDL.Nat64, IDL.Nat64, IDL.Nat64],\n            [IDL.Vec(Holder), IDL.Nat64],\n            [\"query\"]\n        ),\n        query_token_transactions: IDL.Func(\n            [IDL.Nat64, IDL.Nat64, IDL.Nat64],\n            [IDL.Vec(Transaction), IDL.Nat64],\n            [\"query\"]\n        ),\n        query_user: IDL.Func([IDL.Opt(IDL.Principal)], [User], [\"query\"]),\n        query_user_launched: IDL.Func(\n            [IDL.Opt(IDL.Principal)],\n            [IDL.Vec(MemeToken)],\n            [\"query\"]\n        ),\n        query_user_tokens: IDL.Func(\n            [IDL.Opt(IDL.Principal)],\n            [IDL.Vec(MemeTokenView)],\n            [\"query\"]\n        ),\n        sell: IDL.Func([IDL.Nat64, IDL.Float64], [Result], []),\n        wallet_balance: IDL.Func([], [IDL.Nat], [\"query\"]),\n        wallet_receive: IDL.Func([], [WalletReceiveResult], []),\n    });\n};\n","export type Option<T> = [] | [T];\n\n// Unwrap\nexport const unwrapOption = <T>(v: [] | [T]): T | undefined =>\n    v.length ? v[0] : undefined;\n// Unwrap and map\nexport const unwrapOptionMap = <T, R>(\n    v: [] | [T],\n    map: (t: T) => R\n): R | undefined => (v.length ? map(v[0]) : undefined);\n\n// Wrap\nexport const wrapOption = <T>(v?: T): [] | [T] => (v !== undefined ? [v] : []);\n// Wrap and map\nexport const wrapOptionMap = <T, R>(\n    v: T | undefined,\n    map: (t: T) => R\n): [] | [R] => (v !== undefined ? [map(v)] : []);\n","import { WEB3_STORAGE_API_HOST } from \"../constants/apis\";\n\ninterface UploadResponse {\n    success: boolean;\n    cid?: string;\n    urls?: {\n        direct: string;\n        raw: string;\n        gateway: string;\n    };\n    type?: string;\n    name?: string;\n    size?: number;\n    error?: string;\n}\n\nexport async function uploadFileToWeb3Storage(\n    base64Data: string,\n    fileName = \"image.png\"\n): Promise<UploadResponse> {\n    try {\n        // Remove base64 URL prefix (if exists)\n        const cleanBase64 = base64Data.replace(/^data:image\\/\\w+;base64,/, \"\");\n\n        // Convert base64 to Blob\n        const byteCharacters = atob(cleanBase64);\n        const byteNumbers = new Array(byteCharacters.length);\n\n        for (let i = 0; i < byteCharacters.length; i++) {\n            byteNumbers[i] = byteCharacters.charCodeAt(i);\n        }\n\n        const byteArray = new Uint8Array(byteNumbers);\n        const blob = new Blob([byteArray], { type: \"image/png\" });\n\n        // Create file object\n        const file = new File([blob], fileName, { type: \"image/png\" });\n\n        const formData = new FormData();\n        formData.append(\"file\", file);\n\n        const response = await fetch(WEB3_STORAGE_API_HOST, {\n            method: \"POST\",\n            body: formData,\n        });\n\n        if (!response.ok) {\n            throw new Error(`Upload failed with status: ${response.status}`);\n        }\n\n        const result: UploadResponse = await response.json();\n        return result;\n    } catch (error) {\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"upload failed\",\n        };\n    }\n}\n","import {\n  type ActionExample,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  ModelClass,\n  type State,\n  type Action,\n  composeContext,\n  generateObjectDeprecated,\n} from \"@elizaos/core\";\n\nimport { swapTemplate } from \"./prompts/token\";\nimport { getTokenByNameOrSymbol } from \"../utils/ic\";\nimport { idlFactory as kongswapIdlFactory } from \"../canisters/kongswap/index.did\";\nimport { Principal } from \"@dfinity/principal\";\nimport { icpWalletProvider } from \"../providers/wallet\";\nimport { unwrapRustResultMap } from \"../utils/common/types/results\";\nimport {\n  ApproveArgs,\n  idlFactory as icrcIdlFactory,\n  Result_2 as ApproveResult,\n} from \"../canisters/icrc/index.did\";\nimport { CANISTER_IDS } from \"../constants/canisters\";\nimport { idlFactory as icpswapIdlFactory } from \"../canisters/icpswap/swapFactory.did\";\nimport { idlFactory as swapFactoryIdlFactory } from \"../canisters/icpswap/swapFactory.did\";\nimport {\n  Result,\n  idlFactory as swapCanisterIdlFactory,\n} from \"../canisters/icpswap/swapCanister.did\";\n\nconst validateSwapParams = async (response: any) => {\n  if (response.error) {\n    throw new Error(response.error);\n  }\n\n  if (!response.fromToken) {\n    throw new Error(\"Please specify which token you want to swap from\");\n  }\n\n  if (!response.toToken) {\n    throw new Error(\"Please specify which token you want to swap to\");\n  }\n\n  if (!response.amount || isNaN(Number(response.amount))) {\n    throw new Error(\"Please specify a valid amount to swap\");\n  }\n\n  // Get canister IDs for both tokens\n  const fromTokenInfo = await getTokenByNameOrSymbol(response.fromToken);\n  const toTokenInfo = await getTokenByNameOrSymbol(response.toToken);\n\n  if (!fromTokenInfo) {\n    throw new Error(`Could not find token \"${response.fromToken}\"`);\n  }\n\n  if (!toTokenInfo) {\n    throw new Error(`Could not find token \"${response.toToken}\"`);\n  }\n\n  return {\n    ...response,\n    fromCanisterId: fromTokenInfo.canisterId,\n    toCanisterId: toTokenInfo.canisterId,\n    fromSymbol: fromTokenInfo.symbol,\n    toSymbol: toTokenInfo.symbol,\n  };\n};\n\nconst executeKongSwap = async (\n  walletResponse: any,\n  params: {\n    fromToken: string;\n    toToken: string;\n    amount: bigint;\n    fromCanisterId: string;\n    toCanisterId: string;\n  }\n) => {\n  try {\n    // Create ICRC token actor for approval\n    const tokenActor: any = await walletResponse.createActor(\n      icrcIdlFactory,\n      params.fromCanisterId\n    );\n    //get the token decimals and fee\n    const tokenDecimals = await tokenActor.icrc1_decimals();\n    const tokenFee = await tokenActor.icrc1_fee();\n\n    console.log(\"Token decimals:\", tokenDecimals);\n    console.log(\"Token fee:\", tokenFee);\n\n    let swapAmount =\n      BigInt(Math.floor(Number(params.amount) * 10 ** tokenDecimals)) +\n      BigInt(tokenFee);\n    // Approve KongSwap to spend tokens\n    const approveArgs = {\n      spender: {\n        owner: Principal.fromText(\"2ipq2-uqaaa-aaaar-qailq-cai\"), // KongSwap canister ID\n        subaccount: [], // No subaccount\n      },\n      amount: swapAmount,\n      expires_at: [], // No expiration\n      memo: [], // No memo\n      fee: [], // Default fee\n      created_at_time: [], // Current time\n      expected_allowance: [], // No expected allowance\n      from_subaccount: [], // No subaccount\n    };\n\n    console.log(\"Approving KongSwap to spend tokens...\");\n    const approveResult = await tokenActor.icrc2_approve(approveArgs);\n\n    if (\"Err\" in approveResult) {\n      throw new Error(`Approval failed: ${JSON.stringify(approveResult.Err)}`);\n    }\n\n    // Create KongSwap actor\n    const kongswapActor: any = await walletResponse.createActor(\n      kongswapIdlFactory,\n      \"2ipq2-uqaaa-aaaar-qailq-cai\"\n    );\n\n    // Prepare swap arguments\n    const swapArgs = {\n      pay_token: \"IC.\" + params.fromCanisterId,\n      receive_token: \"IC.\" + params.toCanisterId,\n      pay_amount: params.amount,\n      receive_amount: [], // Let KongSwap calculate optimal amount\n      max_slippage: [], // 0.5% slippage tolerance\n      receive_address: [], // Empty means send to caller's address\n      referred_by: [], // No referral\n      pay_tx_id: [], // Let KongSwap generate tx id\n    };\n\n    console.log(\"Executing swap...\");\n    const result = await kongswapActor.swap(swapArgs);\n    console.log(\"Swap result:\", result);\n\n    return unwrapRustResultMap(\n      result,\n      (ok: any) => ({\n        Ok: {\n          txId: ok.tx_id.toString(),\n          fromAmount: ok.pay_amount.toString(),\n          toAmount: ok.receive_amount.toString(),\n          price: ok.price,\n          slippage: ok.slippage,\n        },\n      }),\n      (err) => {\n        throw new Error(`Swap failed: ${err}`);\n      }\n    );\n  } catch (error) {\n    console.error(\"Swap execution error:\", error);\n    throw error;\n  }\n};\n\nconst executeICPSwap = async (\n  walletResponse: any,\n  params: {\n    fromToken: string;\n    toToken: string;\n    amount: bigint;\n    fromCanisterId: string;\n    toCanisterId: string;\n  }\n) => {\n  try {\n    // Create ICPSwap Factory actor\n    const factoryActor: any = await walletResponse.createActor(\n      swapFactoryIdlFactory,\n      CANISTER_IDS.ICPSWAP_FACTORY\n    );\n\n    // Get all pools\n    const poolsResult = await factoryActor.getPools();\n    if (\"err\" in poolsResult) {\n      throw new Error(`Failed to get pools: ${poolsResult.err}`);\n    }\n\n    // Find matching pool\n    const pool = poolsResult.ok.find(\n      (p) =>\n        (p.token0.address === params.fromCanisterId &&\n          p.token1.address === params.toCanisterId) ||\n        (p.token0.address === params.toCanisterId &&\n          p.token1.address === params.fromCanisterId)\n    );\n    console.log(\"Pool:\", pool);\n    if (!pool) {\n      throw new Error(\"No liquidity pool found for these tokens\");\n    }\n\n    // Create swap canister actor for the pool\n    const swapActor: any = await walletResponse.createActor(\n      swapCanisterIdlFactory,\n      pool.canisterId?.toString()\n    );\n\n    // Create ICRC token actor for approval\n    const [tokenFromActor, tokenToActor] = await Promise.all([\n      walletResponse.createActor(icrcIdlFactory, params.fromCanisterId),\n      walletResponse.createActor(icrcIdlFactory, params.toCanisterId),\n    ]);\n\n    const zeroForOne = pool.token0.address === params.fromCanisterId;\n\n    const [tokenFromDecimals, tokenToDecimals, tokenFromFee, tokenToFee] =\n      await Promise.all([\n        tokenFromActor.icrc1_decimals(),\n        tokenToActor.icrc1_decimals(),\n        tokenFromActor.icrc1_fee(),\n        tokenToActor.icrc1_fee(),\n      ]);\n\n    console.log(\n      \"Pool canister id:\",\n      pool.canisterId.toString(),\n      \"from canister id:\",\n      params.fromCanisterId,\n      \"to canister id:\",\n      params.toCanisterId\n    );\n\n    // //give the permission to the swap canister to spend the tokens\n    const approveArgs: ApproveArgs = {\n      spender: {\n        owner: pool.canisterId,\n        subaccount: [], // No subaccount\n      },\n      amount:\n        params.amount +\n        BigInt(pool.fee) +\n        (params.amount * BigInt(3)) / BigInt(100) +\n        BigInt(tokenFromFee), //approve the amount of tokens to the swap canister + fee +  6 %\n      expires_at: [], // No expiration\n      memo: [], // No memo\n      fee: [], // Default fee\n      created_at_time: [], // Current time\n      expected_allowance: [], // No expected allowance\n      from_subaccount: [], // No subaccount\n    };\n\n    const approveResult: ApproveResult = await tokenFromActor.icrc2_approve(\n      approveArgs\n    );\n\n    console.log(\"Approval result for icpswap:\", approveResult);\n    if (\"Err\" in approveResult) {\n      throw new Error(`Approval failed: ${JSON.stringify(approveResult.Err)}`);\n    }\n    // //deposit the tokens to the swap canister\n    const depositResult: Result = await swapActor.depositFrom({\n      fee: tokenFromFee,\n      amount:\n        params.amount +\n        BigInt(pool.fee) +\n        (tokenFromFee * BigInt(3)) / BigInt(100),\n      token: params.fromCanisterId,\n    });\n    console.log(\"Deposit result:\", depositResult);\n\n    if (\"err\" in depositResult) {\n      throw new Error(`Error in depositing tokens: ${depositResult.err}`);\n    }\n\n    // Prepare swap arguments\n    const swapArgs = {\n      amountIn: params.amount.toString(),\n      zeroForOne: zeroForOne,\n      amountOutMinimum: \"0\", // Consider adding slippage protection\n    };\n\n    // // Execute swap\n    const result = await swapActor.swap(swapArgs);\n    console.log(\"Swap result:\", result);\n    if (\"err\" in result) {\n      throw new Error(`Swap failed: ${result.err}`);\n    }\n    const principalAddress = walletResponse.wallet.getPrincipal();\n\n    //if the swap succeeds, get the balance of the tokens in the pool\n    const balanceResult = await swapActor.getUserUnusedBalance(\n      principalAddress\n    );\n    console.log(\"Balance result:\", balanceResult);\n\n    const withdrawAmount = zeroForOne\n      ? balanceResult.ok.balance1\n      : balanceResult.ok.balance0;\n\n    const withdrawToken = zeroForOne\n      ? pool.token1.address\n      : pool.token0.address;\n      \n      //ger the token fee for the withdraw token\n      const tokenWithdrawActor = await walletResponse.createActor(icrcIdlFactory, withdrawToken);\n      const tokenWithdrawFee = await tokenWithdrawActor.icrc1_fee();\n    // //if ok, withdraw the swapped tokens from the swap canister\n    const withdrawAmountWithoutFee = Number(withdrawAmount - BigInt(tokenWithdrawFee));\n    const withdrawResult: Result = await swapActor.withdraw({\n      fee: Number(tokenWithdrawFee),\n      amount: withdrawAmountWithoutFee,\n      token: withdrawToken,\n    });\n\n\n    if (\"err\" in withdrawResult) {\n      throw new Error(\n        `Error withdrawing funds from ICPSwap: ${withdrawResult.err}`\n      );\n    }\n    return {\n      Ok: {\n        toAmount: withdrawAmount,\n      },\n    };\n  } catch (error) {\n    console.error(\"ICPSwap execution error:\", error);\n    throw error;\n  }\n};\n\nexport const swapAction: Action = {\n  name: \"SWAP_TOKENS\",\n  description: \"Swap between two tokens on KongSwap or ICPSwap\",\n  similes: [\"SWAP\", \"SWAP_TOKENS\", \"EXCHANGE\", \"CONVERT\", \"TRADE\"],\n\n  validate: async (runtime: IAgentRuntime, message: Memory) => {\n    const messageText = (\n      typeof message.content === \"string\"\n        ? message.content\n        : message.content.text || \"\"\n    ).toLowerCase();\n\n    // Must specify platform\n    const hasPlatform =\n      /(kongswap|icpswap|via\\s+kong|via\\s+icp|using\\s+kong|using\\s+icp|on\\s+kong|on\\s+icp|through\\s+kong|through\\s+icp)/i.test(\n        messageText\n      );\n\n    if (!hasPlatform) {\n      return false;\n    }\n\n    // Token-to-token patterns (no addresses)\n    const swapPatterns = [\n      /swap\\s+(\\d+)\\s+(\\w+)\\s+(to|for|into)\\s+(\\w+)/i,\n      /exchange\\s+(\\d+)\\s+(\\w+)\\s+(to|for|into)\\s+(\\w+)/i,\n      /convert\\s+(\\d+)\\s+(\\w+)\\s+(to|for|into)\\s+(\\w+)/i,\n      /trade\\s+(\\d+)\\s+(\\w+)\\s+(to|for|into)\\s+(\\w+)/i,\n    ];\n    return swapPatterns.some((pattern) => pattern.test(messageText));\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State | undefined,\n    _options: { [key: string]: unknown } | undefined,\n    callback?: HandlerCallback\n  ): Promise<void> => {\n    try {\n      if (!state) {\n        state = await runtime.composeState(message);\n      } else {\n        state = await runtime.updateRecentMessageState(state);\n      }\n\n      console.log(\"Processing swap with message:\", message);\n\n      const swapContext = composeContext({\n        state,\n        template: swapTemplate,\n      });\n\n      // console.log(\"Generated swap context:\", swapContext);\n\n      const response = await generateObjectDeprecated({\n        runtime,\n        context: swapContext,\n        modelClass: ModelClass.LARGE,\n      });\n\n      console.log(\"Generated swap response:\", response);\n\n      if (!response.platform) {\n        throw new Error(\n          \"Please specify which platform to use (kongswap or icpswap)\"\n        );\n      }\n\n      const platform = response.platform.toLowerCase();\n      if (platform !== \"kongswap\" && platform !== \"icpswap\") {\n        throw new Error(\n          \"Invalid platform. Please use either kongswap or icpswap\"\n        );\n      }\n\n      console.log(\"Initial response:\", response);\n\n      // Add initial feedback\n      callback?.({\n        text: \"🔍 Analyzing swap request...\",\n        action: \"SWAP_TOKENS\",\n        type: \"processing\",\n      });\n\n      const fromTokenInfo = await getTokenByNameOrSymbol(response.fromToken);\n      const toTokenInfo = await getTokenByNameOrSymbol(response.toToken);\n\n      if (!fromTokenInfo || !toTokenInfo) {\n        throw new Error(\"Could not find token information\");\n      }\n\n      // Initialize wallet\n      const walletResponse = await icpWalletProvider.get(\n        runtime,\n        message,\n        state\n      );\n      if (!walletResponse.wallet || !walletResponse.createActor) {\n        throw new Error(\"Failed to initialize wallet\");\n      }\n\n      callback?.({\n        text: `🔄 Initiating swap on ${response.platform.toUpperCase()}...`,\n        action: \"SWAP_TOKENS\",\n        type: \"processing\",\n      });\n\n      if (response.platform.toLowerCase() == \"kongswap\") {\n        // Add approval feedback\n        callback?.({\n          text: `🔐 Approving KongSwap to spend your ${fromTokenInfo.symbol}...`,\n          action: \"SWAP_TOKENS\",\n          type: \"processing\",\n        });\n\n        const swapResult = await executeKongSwap(walletResponse, {\n          fromToken: fromTokenInfo.symbol,\n          toToken: toTokenInfo.symbol,\n          amount: BigInt(Math.floor(Number(response.amount) * 1e8)), // Convert to token decimals\n          fromCanisterId: fromTokenInfo.canisterId,\n          toCanisterId: toTokenInfo.canisterId,\n        });\n\n        callback?.({\n          text:\n            `✅ Swap completed on KONGSWAP\\n` +\n            `Amount: ${Number(response.amount)} ${fromTokenInfo.symbol}\\n` +\n            `Received: ${Number(swapResult.Ok.toAmount) / 1e8} ${\n              toTokenInfo.symbol\n            }\\n` +\n            `Price: ${swapResult.Ok.price}\\n` +\n            `Slippage: ${swapResult.Ok.slippage}%\\n` +\n            `Transaction ID: ${swapResult.Ok.txId}`,\n          action: \"SWAP_TOKENS\",\n          type: \"success\",\n        });\n      } else {\n        const swapResult = await executeICPSwap(walletResponse, {\n          fromToken: fromTokenInfo.symbol,\n          toToken: toTokenInfo.symbol,\n          amount: BigInt(Math.floor(Number(response.amount) * 1e8)),\n          fromCanisterId: fromTokenInfo.canisterId,\n          toCanisterId: toTokenInfo.canisterId,\n        });\n\n        callback?.({\n          text:\n            `✅ Swap completed on ICPSWAP\\n` +\n            `Amount: ${response.amount} ${fromTokenInfo.symbol}\\n` +\n            `Received: ${Number(swapResult.Ok.toAmount) / 1e8} ${\n              toTokenInfo.symbol\n            }\\n`,\n          action: \"SWAP_TOKENS\",\n          type: \"success\",\n        });\n      }\n    } catch (error) {\n      console.error(\"Swap error:\", error);\n      callback?.({\n        text: `❌ Swap failed: ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`,\n        action: \"SWAP_TOKENS\",\n        type: \"error\",\n      });\n    }\n  },\n\n  examples: [\n    [\n      {\n        user: \"{{user1}}\",\n        content: \"I want to swap 100 CHAT for EXE\",\n      },\n      {\n        user: \"{{user2}}\",\n        content: {\n          text: \"🔄 Processing swap...\",\n          action: \"SWAP_TOKENS\",\n        },\n      },\n    ],\n    [\n      {\n        user: \"{{user1}}\",\n        content: \"Exchange 50 ICP to ckBTC\",\n      },\n      {\n        user: \"{{user2}}\",\n        content: {\n          text: \"🔄 Processing swap...\",\n          action: \"SWAP_TOKENS\",\n        },\n      },\n    ],\n  ] as ActionExample[][],\n};\n","import type { Principal } from '@dfinity/principal';\nimport type { ActorMethod } from '@dfinity/agent';\nimport type { IDL } from '@dfinity/candid';\n\nexport type AddLiquiditAmountsResult = { 'Ok' : AddLiquidityAmountsReply } |\n  { 'Err' : string };\nexport interface AddLiquidityAmountsReply {\n  'add_lp_token_amount' : bigint,\n  'amount_0' : bigint,\n  'amount_1' : bigint,\n  'address_0' : string,\n  'address_1' : string,\n  'symbol_0' : string,\n  'symbol_1' : string,\n  'chain_0' : string,\n  'chain_1' : string,\n  'symbol' : string,\n  'fee_0' : bigint,\n  'fee_1' : bigint,\n}\nexport interface AddLiquidityArgs {\n  'token_0' : string,\n  'token_1' : string,\n  'amount_0' : bigint,\n  'amount_1' : bigint,\n  'tx_id_0' : [] | [TxId],\n  'tx_id_1' : [] | [TxId],\n}\nexport type AddLiquidityAsyncResult = { 'Ok' : bigint } |\n  { 'Err' : string };\nexport interface AddLiquidityReply {\n  'ts' : bigint,\n  'request_id' : bigint,\n  'status' : string,\n  'tx_id' : bigint,\n  'add_lp_token_amount' : bigint,\n  'transfer_ids' : Array<TransferIdReply>,\n  'amount_0' : bigint,\n  'amount_1' : bigint,\n  'claim_ids' : BigUint64Array | bigint[],\n  'address_0' : string,\n  'address_1' : string,\n  'symbol_0' : string,\n  'symbol_1' : string,\n  'chain_0' : string,\n  'chain_1' : string,\n  'symbol' : string,\n}\nexport type AddLiquidityResult = { 'Ok' : AddLiquidityReply } |\n  { 'Err' : string };\nexport interface AddPoolArgs {\n  'token_0' : string,\n  'token_1' : string,\n  'amount_0' : bigint,\n  'amount_1' : bigint,\n  'tx_id_0' : [] | [TxId],\n  'tx_id_1' : [] | [TxId],\n  'lp_fee_bps' : [] | [number],\n}\nexport interface AddPoolReply {\n  'ts' : bigint,\n  'request_id' : bigint,\n  'status' : string,\n  'tx_id' : bigint,\n  'lp_token_symbol' : string,\n  'add_lp_token_amount' : bigint,\n  'transfer_ids' : Array<TransferIdReply>,\n  'name' : string,\n  'amount_0' : bigint,\n  'amount_1' : bigint,\n  'claim_ids' : BigUint64Array | bigint[],\n  'address_0' : string,\n  'address_1' : string,\n  'symbol_0' : string,\n  'symbol_1' : string,\n  'pool_id' : number,\n  'chain_0' : string,\n  'chain_1' : string,\n  'is_removed' : boolean,\n  'symbol' : string,\n  'lp_fee_bps' : number,\n}\nexport type AddPoolResult = { 'Ok' : AddPoolReply } |\n  { 'Err' : string };\nexport interface AddTokenArgs { 'token' : string }\nexport type AddTokenReply = { 'IC' : ICTokenReply };\nexport type AddTokenResult = { 'Ok' : AddTokenReply } |\n  { 'Err' : string };\nexport interface CheckPoolsReply {\n  'expected_balance' : ExpectedBalance,\n  'diff_balance' : bigint,\n  'actual_balance' : bigint,\n  'symbol' : string,\n}\nexport type CheckPoolsResult = { 'Ok' : Array<CheckPoolsReply> } |\n  { 'Err' : string };\nexport interface ClaimReply {\n  'ts' : bigint,\n  'fee' : bigint,\n  'status' : string,\n  'claim_id' : bigint,\n  'transfer_ids' : Array<TransferIdReply>,\n  'desc' : string,\n  'chain' : string,\n  'canister_id' : [] | [string],\n  'to_address' : string,\n  'amount' : bigint,\n  'symbol' : string,\n}\nexport type ClaimResult = { 'Ok' : ClaimReply } |\n  { 'Err' : string };\nexport interface ClaimsReply {\n  'ts' : bigint,\n  'fee' : bigint,\n  'status' : string,\n  'claim_id' : bigint,\n  'desc' : string,\n  'chain' : string,\n  'canister_id' : [] | [string],\n  'to_address' : string,\n  'amount' : bigint,\n  'symbol' : string,\n}\nexport type ClaimsResult = { 'Ok' : Array<ClaimsReply> } |\n  { 'Err' : string };\nexport interface ExpectedBalance {\n  'balance' : bigint,\n  'pool_balances' : Array<PoolExpectedBalance>,\n  'unclaimed_claims' : bigint,\n}\nexport interface ICTokenReply {\n  'fee' : bigint,\n  'decimals' : number,\n  'token_id' : number,\n  'chain' : string,\n  'name' : string,\n  'canister_id' : string,\n  'icrc1' : boolean,\n  'icrc2' : boolean,\n  'icrc3' : boolean,\n  'is_removed' : boolean,\n  'symbol' : string,\n}\nexport interface ICTransferReply {\n  'is_send' : boolean,\n  'block_index' : bigint,\n  'chain' : string,\n  'canister_id' : string,\n  'amount' : bigint,\n  'symbol' : string,\n}\nexport interface Icrc10SupportedStandards { 'url' : string, 'name' : string }\nexport interface Icrc28TrustedOriginsResponse {\n  'trusted_origins' : Array<string>,\n}\nexport interface LPBalancesReply {\n  'ts' : bigint,\n  'usd_balance' : number,\n  'balance' : number,\n  'name' : string,\n  'amount_0' : number,\n  'amount_1' : number,\n  'address_0' : string,\n  'address_1' : string,\n  'symbol_0' : string,\n  'symbol_1' : string,\n  'usd_amount_0' : number,\n  'usd_amount_1' : number,\n  'chain_0' : string,\n  'chain_1' : string,\n  'symbol' : string,\n  'lp_token_id' : bigint,\n}\nexport interface LPTokenReply {\n  'fee' : bigint,\n  'decimals' : number,\n  'token_id' : number,\n  'chain' : string,\n  'name' : string,\n  'address' : string,\n  'pool_id_of' : number,\n  'is_removed' : boolean,\n  'total_supply' : bigint,\n  'symbol' : string,\n}\nexport interface MessagesReply {\n  'ts' : bigint,\n  'title' : string,\n  'message' : string,\n  'message_id' : bigint,\n}\nexport type MessagesResult = { 'Ok' : Array<MessagesReply> } |\n  { 'Err' : string };\nexport interface PoolExpectedBalance {\n  'balance' : bigint,\n  'kong_fee' : bigint,\n  'pool_symbol' : string,\n  'lp_fee' : bigint,\n}\nexport interface PoolReply {\n  'lp_token_symbol' : string,\n  'name' : string,\n  'lp_fee_0' : bigint,\n  'lp_fee_1' : bigint,\n  'balance_0' : bigint,\n  'balance_1' : bigint,\n  'address_0' : string,\n  'address_1' : string,\n  'symbol_0' : string,\n  'symbol_1' : string,\n  'pool_id' : number,\n  'price' : number,\n  'chain_0' : string,\n  'chain_1' : string,\n  'is_removed' : boolean,\n  'symbol' : string,\n  'lp_fee_bps' : number,\n}\nexport type PoolsResult = { 'Ok' : Array<PoolReply> } |\n  { 'Err' : string };\nexport interface RemoveLiquidityAmountsReply {\n  'lp_fee_0' : bigint,\n  'lp_fee_1' : bigint,\n  'amount_0' : bigint,\n  'amount_1' : bigint,\n  'address_0' : string,\n  'address_1' : string,\n  'symbol_0' : string,\n  'symbol_1' : string,\n  'chain_0' : string,\n  'chain_1' : string,\n  'remove_lp_token_amount' : bigint,\n  'symbol' : string,\n}\nexport type RemoveLiquidityAmountsResult = {\n    'Ok' : RemoveLiquidityAmountsReply\n  } |\n  { 'Err' : string };\nexport interface RemoveLiquidityArgs {\n  'token_0' : string,\n  'token_1' : string,\n  'remove_lp_token_amount' : bigint,\n}\nexport type RemoveLiquidityAsyncResult = { 'Ok' : bigint } |\n  { 'Err' : string };\nexport interface RemoveLiquidityReply {\n  'ts' : bigint,\n  'request_id' : bigint,\n  'status' : string,\n  'tx_id' : bigint,\n  'transfer_ids' : Array<TransferIdReply>,\n  'lp_fee_0' : bigint,\n  'lp_fee_1' : bigint,\n  'amount_0' : bigint,\n  'amount_1' : bigint,\n  'claim_ids' : BigUint64Array | bigint[],\n  'address_0' : string,\n  'address_1' : string,\n  'symbol_0' : string,\n  'symbol_1' : string,\n  'chain_0' : string,\n  'chain_1' : string,\n  'remove_lp_token_amount' : bigint,\n  'symbol' : string,\n}\nexport type RemoveLiquidityResult = { 'Ok' : RemoveLiquidityReply } |\n  { 'Err' : string };\nexport type RequestReply = { 'AddLiquidity' : AddLiquidityReply } |\n  { 'Swap' : SwapReply } |\n  { 'AddPool' : AddPoolReply } |\n  { 'RemoveLiquidity' : RemoveLiquidityReply } |\n  { 'Pending' : null };\nexport type RequestRequest = { 'AddLiquidity' : AddLiquidityArgs } |\n  { 'Swap' : SwapArgs } |\n  { 'AddPool' : AddPoolArgs } |\n  { 'RemoveLiquidity' : RemoveLiquidityArgs };\nexport interface RequestsReply {\n  'ts' : bigint,\n  'request_id' : bigint,\n  'request' : RequestRequest,\n  'statuses' : Array<string>,\n  'reply' : RequestReply,\n}\nexport type RequestsResult = { 'Ok' : Array<RequestsReply> } |\n  { 'Err' : string };\nexport interface SendArgs {\n  'token' : string,\n  'to_address' : string,\n  'amount' : bigint,\n}\nexport interface SendReply {\n  'ts' : bigint,\n  'request_id' : bigint,\n  'status' : string,\n  'tx_id' : bigint,\n  'chain' : string,\n  'to_address' : string,\n  'amount' : bigint,\n  'symbol' : string,\n}\nexport type SendResult = { 'OK' : SendReply } |\n  { 'Err' : string };\nexport interface SwapAmountsReply {\n  'txs' : Array<SwapAmountsTxReply>,\n  'receive_chain' : string,\n  'mid_price' : number,\n  'pay_amount' : bigint,\n  'receive_amount' : bigint,\n  'pay_symbol' : string,\n  'receive_symbol' : string,\n  'receive_address' : string,\n  'pay_address' : string,\n  'price' : number,\n  'pay_chain' : string,\n  'slippage' : number,\n}\nexport type SwapAmountsResult = { 'Ok' : SwapAmountsReply } |\n  { 'Err' : string };\nexport interface SwapAmountsTxReply {\n  'receive_chain' : string,\n  'pay_amount' : bigint,\n  'receive_amount' : bigint,\n  'pay_symbol' : string,\n  'receive_symbol' : string,\n  'receive_address' : string,\n  'pool_symbol' : string,\n  'pay_address' : string,\n  'price' : number,\n  'pay_chain' : string,\n  'lp_fee' : bigint,\n  'gas_fee' : bigint,\n}\nexport interface SwapArgs {\n  'receive_token' : string,\n  'max_slippage' : [] | [number],\n  'pay_amount' : bigint,\n  'referred_by' : [] | [string],\n  'receive_amount' : [] | [bigint],\n  'receive_address' : [] | [string],\n  'pay_token' : string,\n  'pay_tx_id' : [] | [TxId],\n}\nexport type SwapAsyncResult = { 'Ok' : bigint } |\n  { 'Err' : string };\nexport interface SwapReply {\n  'ts' : bigint,\n  'txs' : Array<SwapTxReply>,\n  'request_id' : bigint,\n  'status' : string,\n  'tx_id' : bigint,\n  'transfer_ids' : Array<TransferIdReply>,\n  'receive_chain' : string,\n  'mid_price' : number,\n  'pay_amount' : bigint,\n  'receive_amount' : bigint,\n  'claim_ids' : BigUint64Array | bigint[],\n  'pay_symbol' : string,\n  'receive_symbol' : string,\n  'receive_address' : string,\n  'pay_address' : string,\n  'price' : number,\n  'pay_chain' : string,\n  'slippage' : number,\n}\nexport type SwapResult = { 'Ok' : SwapReply } |\n  { 'Err' : string };\nexport interface SwapTxReply {\n  'ts' : bigint,\n  'receive_chain' : string,\n  'pay_amount' : bigint,\n  'receive_amount' : bigint,\n  'pay_symbol' : string,\n  'receive_symbol' : string,\n  'receive_address' : string,\n  'pool_symbol' : string,\n  'pay_address' : string,\n  'price' : number,\n  'pay_chain' : string,\n  'lp_fee' : bigint,\n  'gas_fee' : bigint,\n}\nexport type TokenReply = { 'IC' : ICTokenReply } |\n  { 'LP' : LPTokenReply };\nexport type TokensResult = { 'Ok' : Array<TokenReply> } |\n  { 'Err' : string };\nexport interface TransferIdReply {\n  'transfer_id' : bigint,\n  'transfer' : TransferReply,\n}\nexport type TransferReply = { 'IC' : ICTransferReply };\nexport type TransfersResult = { 'Ok' : Array<TransferIdReply> } |\n  { 'Err' : string };\nexport type TxId = { 'TransactionId' : string } |\n  { 'BlockIndex' : bigint };\nexport type TxsReply = { 'AddLiquidity' : AddLiquidityReply } |\n  { 'Swap' : SwapReply } |\n  { 'AddPool' : AddPoolReply } |\n  { 'RemoveLiquidity' : RemoveLiquidityReply };\nexport type TxsResult = { 'Ok' : Array<TxsReply> } |\n  { 'Err' : string };\nexport interface UpdateTokenArgs { 'token' : string }\nexport type UpdateTokenReply = { 'IC' : ICTokenReply };\nexport type UpdateTokenResult = { 'Ok' : UpdateTokenReply } |\n  { 'Err' : string };\nexport type UserBalancesReply = { 'LP' : LPBalancesReply };\nexport type UserBalancesResult = { 'Ok' : Array<UserBalancesReply> } |\n  { 'Err' : string };\nexport interface UserReply {\n  'account_id' : string,\n  'fee_level_expires_at' : [] | [bigint],\n  'referred_by' : [] | [string],\n  'user_id' : number,\n  'fee_level' : number,\n  'principal_id' : string,\n  'referred_by_expires_at' : [] | [bigint],\n  'my_referral_code' : string,\n}\nexport type UserResult = { 'Ok' : UserReply } |\n  { 'Err' : string };\nexport type ValidateAddLiquidityResult = { 'Ok' : string } |\n  { 'Err' : string };\nexport type ValidateRemoveLiquidityResult = { 'Ok' : string } |\n  { 'Err' : string };\nexport interface icrc21_consent_info {\n  'metadata' : icrc21_consent_message_metadata,\n  'consent_message' : icrc21_consent_message,\n}\nexport type icrc21_consent_message = {\n    'LineDisplayMessage' : { 'pages' : Array<{ 'lines' : Array<string> }> }\n  } |\n  { 'GenericDisplayMessage' : string };\nexport interface icrc21_consent_message_metadata {\n  'utc_offset_minutes' : [] | [number],\n  'language' : string,\n}\nexport interface icrc21_consent_message_request {\n  'arg' : Uint8Array | number[],\n  'method' : string,\n  'user_preferences' : icrc21_consent_message_spec,\n}\nexport type icrc21_consent_message_response = { 'Ok' : icrc21_consent_info } |\n  { 'Err' : icrc21_error };\nexport interface icrc21_consent_message_spec {\n  'metadata' : icrc21_consent_message_metadata,\n  'device_spec' : [] | [\n    { 'GenericDisplay' : null } |\n      {\n        'LineDisplay' : {\n          'characters_per_line' : number,\n          'lines_per_page' : number,\n        }\n      }\n  ],\n}\nexport type icrc21_error = {\n    'GenericError' : { 'description' : string, 'error_code' : bigint }\n  } |\n  { 'InsufficientPayment' : icrc21_error_info } |\n  { 'UnsupportedCanisterCall' : icrc21_error_info } |\n  { 'ConsentMessageUnavailable' : icrc21_error_info };\nexport interface icrc21_error_info { 'description' : string }\nexport interface _SERVICE {\n  'add_liquidity' : ActorMethod<[AddLiquidityArgs], AddLiquidityResult>,\n  'add_liquidity_amounts' : ActorMethod<\n    [string, bigint, string],\n    AddLiquiditAmountsResult\n  >,\n  'add_liquidity_async' : ActorMethod<\n    [AddLiquidityArgs],\n    AddLiquidityAsyncResult\n  >,\n  'add_pool' : ActorMethod<[AddPoolArgs], AddPoolResult>,\n  'add_token' : ActorMethod<[AddTokenArgs], AddTokenResult>,\n  'check_pools' : ActorMethod<[], CheckPoolsResult>,\n  'claim' : ActorMethod<[bigint], ClaimResult>,\n  'claims' : ActorMethod<[string], ClaimsResult>,\n  'get_user' : ActorMethod<[], UserResult>,\n  'icrc10_supported_standards' : ActorMethod<\n    [],\n    Array<Icrc10SupportedStandards>\n  >,\n  'icrc1_name' : ActorMethod<[], string>,\n  'icrc21_canister_call_consent_message' : ActorMethod<\n    [icrc21_consent_message_request],\n    icrc21_consent_message_response\n  >,\n  'icrc28_trusted_origins' : ActorMethod<[], Icrc28TrustedOriginsResponse>,\n  'pools' : ActorMethod<[[] | [string]], PoolsResult>,\n  'remove_liquidity' : ActorMethod<\n    [RemoveLiquidityArgs],\n    RemoveLiquidityResult\n  >,\n  'remove_liquidity_amounts' : ActorMethod<\n    [string, string, bigint],\n    RemoveLiquidityAmountsResult\n  >,\n  'remove_liquidity_async' : ActorMethod<\n    [RemoveLiquidityArgs],\n    RemoveLiquidityAsyncResult\n  >,\n  'requests' : ActorMethod<[[] | [bigint]], RequestsResult>,\n  'send' : ActorMethod<[SendArgs], SendResult>,\n  'swap' : ActorMethod<[SwapArgs], SwapResult>,\n  'swap_amounts' : ActorMethod<[string, bigint, string], SwapAmountsResult>,\n  'swap_async' : ActorMethod<[SwapArgs], SwapAsyncResult>,\n  'tokens' : ActorMethod<[[] | [string]], TokensResult>,\n  'update_token' : ActorMethod<[UpdateTokenArgs], UpdateTokenResult>,\n  'user_balances' : ActorMethod<[string], UserBalancesResult>,\n  'validate_add_liquidity' : ActorMethod<[], ValidateAddLiquidityResult>,\n  'validate_remove_liquidity' : ActorMethod<[], ValidateRemoveLiquidityResult>,\n}\n\nexport const idlFactory = ({ IDL }) => {\n    const TxId = IDL.Variant({\n      'TransactionId' : IDL.Text,\n      'BlockIndex' : IDL.Nat,\n    });\n    const AddLiquidityArgs = IDL.Record({\n      'token_0' : IDL.Text,\n      'token_1' : IDL.Text,\n      'amount_0' : IDL.Nat,\n      'amount_1' : IDL.Nat,\n      'tx_id_0' : IDL.Opt(TxId),\n      'tx_id_1' : IDL.Opt(TxId),\n    });\n    const ICTransferReply = IDL.Record({\n      'is_send' : IDL.Bool,\n      'block_index' : IDL.Nat,\n      'chain' : IDL.Text,\n      'canister_id' : IDL.Text,\n      'amount' : IDL.Nat,\n      'symbol' : IDL.Text,\n    });\n    const TransferReply = IDL.Variant({ 'IC' : ICTransferReply });\n    const TransferIdReply = IDL.Record({\n      'transfer_id' : IDL.Nat64,\n      'transfer' : TransferReply,\n    });\n    const AddLiquidityReply = IDL.Record({\n      'ts' : IDL.Nat64,\n      'request_id' : IDL.Nat64,\n      'status' : IDL.Text,\n      'tx_id' : IDL.Nat64,\n      'add_lp_token_amount' : IDL.Nat,\n      'transfer_ids' : IDL.Vec(TransferIdReply),\n      'amount_0' : IDL.Nat,\n      'amount_1' : IDL.Nat,\n      'claim_ids' : IDL.Vec(IDL.Nat64),\n      'address_0' : IDL.Text,\n      'address_1' : IDL.Text,\n      'symbol_0' : IDL.Text,\n      'symbol_1' : IDL.Text,\n      'chain_0' : IDL.Text,\n      'chain_1' : IDL.Text,\n      'symbol' : IDL.Text,\n    });\n    const AddLiquidityResult = IDL.Variant({\n      'Ok' : AddLiquidityReply,\n      'Err' : IDL.Text,\n    });\n    const AddLiquidityAmountsReply = IDL.Record({\n      'add_lp_token_amount' : IDL.Nat,\n      'amount_0' : IDL.Nat,\n      'amount_1' : IDL.Nat,\n      'address_0' : IDL.Text,\n      'address_1' : IDL.Text,\n      'symbol_0' : IDL.Text,\n      'symbol_1' : IDL.Text,\n      'chain_0' : IDL.Text,\n      'chain_1' : IDL.Text,\n      'symbol' : IDL.Text,\n      'fee_0' : IDL.Nat,\n      'fee_1' : IDL.Nat,\n    });\n    const AddLiquiditAmountsResult = IDL.Variant({\n      'Ok' : AddLiquidityAmountsReply,\n      'Err' : IDL.Text,\n    });\n    const AddLiquidityAsyncResult = IDL.Variant({\n      'Ok' : IDL.Nat64,\n      'Err' : IDL.Text,\n    });\n    const AddPoolArgs = IDL.Record({\n      'token_0' : IDL.Text,\n      'token_1' : IDL.Text,\n      'amount_0' : IDL.Nat,\n      'amount_1' : IDL.Nat,\n      'tx_id_0' : IDL.Opt(TxId),\n      'tx_id_1' : IDL.Opt(TxId),\n      'lp_fee_bps' : IDL.Opt(IDL.Nat8),\n    });\n    const AddPoolReply = IDL.Record({\n      'ts' : IDL.Nat64,\n      'request_id' : IDL.Nat64,\n      'status' : IDL.Text,\n      'tx_id' : IDL.Nat64,\n      'lp_token_symbol' : IDL.Text,\n      'add_lp_token_amount' : IDL.Nat,\n      'transfer_ids' : IDL.Vec(TransferIdReply),\n      'name' : IDL.Text,\n      'amount_0' : IDL.Nat,\n      'amount_1' : IDL.Nat,\n      'claim_ids' : IDL.Vec(IDL.Nat64),\n      'address_0' : IDL.Text,\n      'address_1' : IDL.Text,\n      'symbol_0' : IDL.Text,\n      'symbol_1' : IDL.Text,\n      'pool_id' : IDL.Nat32,\n      'chain_0' : IDL.Text,\n      'chain_1' : IDL.Text,\n      'is_removed' : IDL.Bool,\n      'symbol' : IDL.Text,\n      'lp_fee_bps' : IDL.Nat8,\n    });\n    const AddPoolResult = IDL.Variant({ 'Ok' : AddPoolReply, 'Err' : IDL.Text });\n    const AddTokenArgs = IDL.Record({ 'token' : IDL.Text });\n    const ICTokenReply = IDL.Record({\n      'fee' : IDL.Nat,\n      'decimals' : IDL.Nat8,\n      'token_id' : IDL.Nat32,\n      'chain' : IDL.Text,\n      'name' : IDL.Text,\n      'canister_id' : IDL.Text,\n      'icrc1' : IDL.Bool,\n      'icrc2' : IDL.Bool,\n      'icrc3' : IDL.Bool,\n      'is_removed' : IDL.Bool,\n      'symbol' : IDL.Text,\n    });\n    const AddTokenReply = IDL.Variant({ 'IC' : ICTokenReply });\n    const AddTokenResult = IDL.Variant({\n      'Ok' : AddTokenReply,\n      'Err' : IDL.Text,\n    });\n    const PoolExpectedBalance = IDL.Record({\n      'balance' : IDL.Nat,\n      'kong_fee' : IDL.Nat,\n      'pool_symbol' : IDL.Text,\n      'lp_fee' : IDL.Nat,\n    });\n    const ExpectedBalance = IDL.Record({\n      'balance' : IDL.Nat,\n      'pool_balances' : IDL.Vec(PoolExpectedBalance),\n      'unclaimed_claims' : IDL.Nat,\n    });\n    const CheckPoolsReply = IDL.Record({\n      'expected_balance' : ExpectedBalance,\n      'diff_balance' : IDL.Int,\n      'actual_balance' : IDL.Nat,\n      'symbol' : IDL.Text,\n    });\n    const CheckPoolsResult = IDL.Variant({\n      'Ok' : IDL.Vec(CheckPoolsReply),\n      'Err' : IDL.Text,\n    });\n    const ClaimReply = IDL.Record({\n      'ts' : IDL.Nat64,\n      'fee' : IDL.Nat,\n      'status' : IDL.Text,\n      'claim_id' : IDL.Nat64,\n      'transfer_ids' : IDL.Vec(TransferIdReply),\n      'desc' : IDL.Text,\n      'chain' : IDL.Text,\n      'canister_id' : IDL.Opt(IDL.Text),\n      'to_address' : IDL.Text,\n      'amount' : IDL.Nat,\n      'symbol' : IDL.Text,\n    });\n    const ClaimResult = IDL.Variant({ 'Ok' : ClaimReply, 'Err' : IDL.Text });\n    const ClaimsReply = IDL.Record({\n      'ts' : IDL.Nat64,\n      'fee' : IDL.Nat,\n      'status' : IDL.Text,\n      'claim_id' : IDL.Nat64,\n      'desc' : IDL.Text,\n      'chain' : IDL.Text,\n      'canister_id' : IDL.Opt(IDL.Text),\n      'to_address' : IDL.Text,\n      'amount' : IDL.Nat,\n      'symbol' : IDL.Text,\n    });\n    const ClaimsResult = IDL.Variant({\n      'Ok' : IDL.Vec(ClaimsReply),\n      'Err' : IDL.Text,\n    });\n    const UserReply = IDL.Record({\n      'account_id' : IDL.Text,\n      'fee_level_expires_at' : IDL.Opt(IDL.Nat64),\n      'referred_by' : IDL.Opt(IDL.Text),\n      'user_id' : IDL.Nat32,\n      'fee_level' : IDL.Nat8,\n      'principal_id' : IDL.Text,\n      'referred_by_expires_at' : IDL.Opt(IDL.Nat64),\n      'my_referral_code' : IDL.Text,\n    });\n    const UserResult = IDL.Variant({ 'Ok' : UserReply, 'Err' : IDL.Text });\n    const Icrc10SupportedStandards = IDL.Record({\n      'url' : IDL.Text,\n      'name' : IDL.Text,\n    });\n    const icrc21_consent_message_metadata = IDL.Record({\n      'utc_offset_minutes' : IDL.Opt(IDL.Int16),\n      'language' : IDL.Text,\n    });\n    const icrc21_consent_message_spec = IDL.Record({\n      'metadata' : icrc21_consent_message_metadata,\n      'device_spec' : IDL.Opt(\n        IDL.Variant({\n          'GenericDisplay' : IDL.Null,\n          'LineDisplay' : IDL.Record({\n            'characters_per_line' : IDL.Nat16,\n            'lines_per_page' : IDL.Nat16,\n          }),\n        })\n      ),\n    });\n    const icrc21_consent_message_request = IDL.Record({\n      'arg' : IDL.Vec(IDL.Nat8),\n      'method' : IDL.Text,\n      'user_preferences' : icrc21_consent_message_spec,\n    });\n    const icrc21_consent_message = IDL.Variant({\n      'LineDisplayMessage' : IDL.Record({\n        'pages' : IDL.Vec(IDL.Record({ 'lines' : IDL.Vec(IDL.Text) })),\n      }),\n      'GenericDisplayMessage' : IDL.Text,\n    });\n    const icrc21_consent_info = IDL.Record({\n      'metadata' : icrc21_consent_message_metadata,\n      'consent_message' : icrc21_consent_message,\n    });\n    const icrc21_error_info = IDL.Record({ 'description' : IDL.Text });\n    const icrc21_error = IDL.Variant({\n      'GenericError' : IDL.Record({\n        'description' : IDL.Text,\n        'error_code' : IDL.Nat,\n      }),\n      'InsufficientPayment' : icrc21_error_info,\n      'UnsupportedCanisterCall' : icrc21_error_info,\n      'ConsentMessageUnavailable' : icrc21_error_info,\n    });\n    const icrc21_consent_message_response = IDL.Variant({\n      'Ok' : icrc21_consent_info,\n      'Err' : icrc21_error,\n    });\n    const Icrc28TrustedOriginsResponse = IDL.Record({\n      'trusted_origins' : IDL.Vec(IDL.Text),\n    });\n    const PoolReply = IDL.Record({\n      'lp_token_symbol' : IDL.Text,\n      'name' : IDL.Text,\n      'lp_fee_0' : IDL.Nat,\n      'lp_fee_1' : IDL.Nat,\n      'balance_0' : IDL.Nat,\n      'balance_1' : IDL.Nat,\n      'address_0' : IDL.Text,\n      'address_1' : IDL.Text,\n      'symbol_0' : IDL.Text,\n      'symbol_1' : IDL.Text,\n      'pool_id' : IDL.Nat32,\n      'price' : IDL.Float64,\n      'chain_0' : IDL.Text,\n      'chain_1' : IDL.Text,\n      'is_removed' : IDL.Bool,\n      'symbol' : IDL.Text,\n      'lp_fee_bps' : IDL.Nat8,\n    });\n    const PoolsResult = IDL.Variant({\n      'Ok' : IDL.Vec(PoolReply),\n      'Err' : IDL.Text,\n    });\n    const RemoveLiquidityArgs = IDL.Record({\n      'token_0' : IDL.Text,\n      'token_1' : IDL.Text,\n      'remove_lp_token_amount' : IDL.Nat,\n    });\n    const RemoveLiquidityReply = IDL.Record({\n      'ts' : IDL.Nat64,\n      'request_id' : IDL.Nat64,\n      'status' : IDL.Text,\n      'tx_id' : IDL.Nat64,\n      'transfer_ids' : IDL.Vec(TransferIdReply),\n      'lp_fee_0' : IDL.Nat,\n      'lp_fee_1' : IDL.Nat,\n      'amount_0' : IDL.Nat,\n      'amount_1' : IDL.Nat,\n      'claim_ids' : IDL.Vec(IDL.Nat64),\n      'address_0' : IDL.Text,\n      'address_1' : IDL.Text,\n      'symbol_0' : IDL.Text,\n      'symbol_1' : IDL.Text,\n      'chain_0' : IDL.Text,\n      'chain_1' : IDL.Text,\n      'remove_lp_token_amount' : IDL.Nat,\n      'symbol' : IDL.Text,\n    });\n    const RemoveLiquidityResult = IDL.Variant({\n      'Ok' : RemoveLiquidityReply,\n      'Err' : IDL.Text,\n    });\n    const RemoveLiquidityAmountsReply = IDL.Record({\n      'lp_fee_0' : IDL.Nat,\n      'lp_fee_1' : IDL.Nat,\n      'amount_0' : IDL.Nat,\n      'amount_1' : IDL.Nat,\n      'address_0' : IDL.Text,\n      'address_1' : IDL.Text,\n      'symbol_0' : IDL.Text,\n      'symbol_1' : IDL.Text,\n      'chain_0' : IDL.Text,\n      'chain_1' : IDL.Text,\n      'remove_lp_token_amount' : IDL.Nat,\n      'symbol' : IDL.Text,\n    });\n    const RemoveLiquidityAmountsResult = IDL.Variant({\n      'Ok' : RemoveLiquidityAmountsReply,\n      'Err' : IDL.Text,\n    });\n    const RemoveLiquidityAsyncResult = IDL.Variant({\n      'Ok' : IDL.Nat64,\n      'Err' : IDL.Text,\n    });\n    const SwapArgs = IDL.Record({\n      'receive_token' : IDL.Text,\n      'max_slippage' : IDL.Opt(IDL.Float64),\n      'pay_amount' : IDL.Nat,\n      'referred_by' : IDL.Opt(IDL.Text),\n      'receive_amount' : IDL.Opt(IDL.Nat),\n      'receive_address' : IDL.Opt(IDL.Text),\n      'pay_token' : IDL.Text,\n      'pay_tx_id' : IDL.Opt(TxId),\n    });\n    const RequestRequest = IDL.Variant({\n      'AddLiquidity' : AddLiquidityArgs,\n      'Swap' : SwapArgs,\n      'AddPool' : AddPoolArgs,\n      'RemoveLiquidity' : RemoveLiquidityArgs,\n    });\n    const SwapTxReply = IDL.Record({\n      'ts' : IDL.Nat64,\n      'receive_chain' : IDL.Text,\n      'pay_amount' : IDL.Nat,\n      'receive_amount' : IDL.Nat,\n      'pay_symbol' : IDL.Text,\n      'receive_symbol' : IDL.Text,\n      'receive_address' : IDL.Text,\n      'pool_symbol' : IDL.Text,\n      'pay_address' : IDL.Text,\n      'price' : IDL.Float64,\n      'pay_chain' : IDL.Text,\n      'lp_fee' : IDL.Nat,\n      'gas_fee' : IDL.Nat,\n    });\n    const SwapReply = IDL.Record({\n      'ts' : IDL.Nat64,\n      'txs' : IDL.Vec(SwapTxReply),\n      'request_id' : IDL.Nat64,\n      'status' : IDL.Text,\n      'tx_id' : IDL.Nat64,\n      'transfer_ids' : IDL.Vec(TransferIdReply),\n      'receive_chain' : IDL.Text,\n      'mid_price' : IDL.Float64,\n      'pay_amount' : IDL.Nat,\n      'receive_amount' : IDL.Nat,\n      'claim_ids' : IDL.Vec(IDL.Nat64),\n      'pay_symbol' : IDL.Text,\n      'receive_symbol' : IDL.Text,\n      'receive_address' : IDL.Text,\n      'pay_address' : IDL.Text,\n      'price' : IDL.Float64,\n      'pay_chain' : IDL.Text,\n      'slippage' : IDL.Float64,\n    });\n    const RequestReply = IDL.Variant({\n      'AddLiquidity' : AddLiquidityReply,\n      'Swap' : SwapReply,\n      'AddPool' : AddPoolReply,\n      'RemoveLiquidity' : RemoveLiquidityReply,\n      'Pending' : IDL.Null,\n    });\n    const RequestsReply = IDL.Record({\n      'ts' : IDL.Nat64,\n      'request_id' : IDL.Nat64,\n      'request' : RequestRequest,\n      'statuses' : IDL.Vec(IDL.Text),\n      'reply' : RequestReply,\n    });\n    const RequestsResult = IDL.Variant({\n      'Ok' : IDL.Vec(RequestsReply),\n      'Err' : IDL.Text,\n    });\n    const SendArgs = IDL.Record({\n      'token' : IDL.Text,\n      'to_address' : IDL.Text,\n      'amount' : IDL.Nat,\n    });\n    const SendReply = IDL.Record({\n      'ts' : IDL.Nat64,\n      'request_id' : IDL.Nat64,\n      'status' : IDL.Text,\n      'tx_id' : IDL.Nat64,\n      'chain' : IDL.Text,\n      'to_address' : IDL.Text,\n      'amount' : IDL.Nat,\n      'symbol' : IDL.Text,\n    });\n    const SendResult = IDL.Variant({ 'OK' : SendReply, 'Err' : IDL.Text });\n    const SwapResult = IDL.Variant({ 'Ok' : SwapReply, 'Err' : IDL.Text });\n    const SwapAmountsTxReply = IDL.Record({\n      'receive_chain' : IDL.Text,\n      'pay_amount' : IDL.Nat,\n      'receive_amount' : IDL.Nat,\n      'pay_symbol' : IDL.Text,\n      'receive_symbol' : IDL.Text,\n      'receive_address' : IDL.Text,\n      'pool_symbol' : IDL.Text,\n      'pay_address' : IDL.Text,\n      'price' : IDL.Float64,\n      'pay_chain' : IDL.Text,\n      'lp_fee' : IDL.Nat,\n      'gas_fee' : IDL.Nat,\n    });\n    const SwapAmountsReply = IDL.Record({\n      'txs' : IDL.Vec(SwapAmountsTxReply),\n      'receive_chain' : IDL.Text,\n      'mid_price' : IDL.Float64,\n      'pay_amount' : IDL.Nat,\n      'receive_amount' : IDL.Nat,\n      'pay_symbol' : IDL.Text,\n      'receive_symbol' : IDL.Text,\n      'receive_address' : IDL.Text,\n      'pay_address' : IDL.Text,\n      'price' : IDL.Float64,\n      'pay_chain' : IDL.Text,\n      'slippage' : IDL.Float64,\n    });\n    const SwapAmountsResult = IDL.Variant({\n      'Ok' : SwapAmountsReply,\n      'Err' : IDL.Text,\n    });\n    const SwapAsyncResult = IDL.Variant({ 'Ok' : IDL.Nat64, 'Err' : IDL.Text });\n    const LPTokenReply = IDL.Record({\n      'fee' : IDL.Nat,\n      'decimals' : IDL.Nat8,\n      'token_id' : IDL.Nat32,\n      'chain' : IDL.Text,\n      'name' : IDL.Text,\n      'address' : IDL.Text,\n      'pool_id_of' : IDL.Nat32,\n      'is_removed' : IDL.Bool,\n      'total_supply' : IDL.Nat,\n      'symbol' : IDL.Text,\n    });\n    const TokenReply = IDL.Variant({ 'IC' : ICTokenReply, 'LP' : LPTokenReply });\n    const TokensResult = IDL.Variant({\n      'Ok' : IDL.Vec(TokenReply),\n      'Err' : IDL.Text,\n    });\n    const UpdateTokenArgs = IDL.Record({ 'token' : IDL.Text });\n    const UpdateTokenReply = IDL.Variant({ 'IC' : ICTokenReply });\n    const UpdateTokenResult = IDL.Variant({\n      'Ok' : UpdateTokenReply,\n      'Err' : IDL.Text,\n    });\n    const LPBalancesReply = IDL.Record({\n      'ts' : IDL.Nat64,\n      'usd_balance' : IDL.Float64,\n      'balance' : IDL.Float64,\n      'name' : IDL.Text,\n      'amount_0' : IDL.Float64,\n      'amount_1' : IDL.Float64,\n      'address_0' : IDL.Text,\n      'address_1' : IDL.Text,\n      'symbol_0' : IDL.Text,\n      'symbol_1' : IDL.Text,\n      'usd_amount_0' : IDL.Float64,\n      'usd_amount_1' : IDL.Float64,\n      'chain_0' : IDL.Text,\n      'chain_1' : IDL.Text,\n      'symbol' : IDL.Text,\n      'lp_token_id' : IDL.Nat64,\n    });\n    const UserBalancesReply = IDL.Variant({ 'LP' : LPBalancesReply });\n    const UserBalancesResult = IDL.Variant({\n      'Ok' : IDL.Vec(UserBalancesReply),\n      'Err' : IDL.Text,\n    });\n    const ValidateAddLiquidityResult = IDL.Variant({\n      'Ok' : IDL.Text,\n      'Err' : IDL.Text,\n    });\n    const ValidateRemoveLiquidityResult = IDL.Variant({\n      'Ok' : IDL.Text,\n      'Err' : IDL.Text,\n    });\n    return IDL.Service({\n      'add_liquidity' : IDL.Func([AddLiquidityArgs], [AddLiquidityResult], []),\n      'add_liquidity_amounts' : IDL.Func(\n          [IDL.Text, IDL.Nat, IDL.Text],\n          [AddLiquiditAmountsResult],\n          ['query'],\n        ),\n      'add_liquidity_async' : IDL.Func(\n          [AddLiquidityArgs],\n          [AddLiquidityAsyncResult],\n          [],\n        ),\n      'add_pool' : IDL.Func([AddPoolArgs], [AddPoolResult], []),\n      'add_token' : IDL.Func([AddTokenArgs], [AddTokenResult], []),\n      'check_pools' : IDL.Func([], [CheckPoolsResult], []),\n      'claim' : IDL.Func([IDL.Nat64], [ClaimResult], []),\n      'claims' : IDL.Func([IDL.Text], [ClaimsResult], ['query']),\n      'get_user' : IDL.Func([], [UserResult], ['query']),\n      'icrc10_supported_standards' : IDL.Func(\n          [],\n          [IDL.Vec(Icrc10SupportedStandards)],\n          ['query'],\n        ),\n      'icrc1_name' : IDL.Func([], [IDL.Text], ['query']),\n      'icrc21_canister_call_consent_message' : IDL.Func(\n          [icrc21_consent_message_request],\n          [icrc21_consent_message_response],\n          [],\n        ),\n      'icrc28_trusted_origins' : IDL.Func([], [Icrc28TrustedOriginsResponse], []),\n      'pools' : IDL.Func([IDL.Opt(IDL.Text)], [PoolsResult], ['query']),\n      'remove_liquidity' : IDL.Func(\n          [RemoveLiquidityArgs],\n          [RemoveLiquidityResult],\n          [],\n        ),\n      'remove_liquidity_amounts' : IDL.Func(\n          [IDL.Text, IDL.Text, IDL.Nat],\n          [RemoveLiquidityAmountsResult],\n          ['query'],\n        ),\n      'remove_liquidity_async' : IDL.Func(\n          [RemoveLiquidityArgs],\n          [RemoveLiquidityAsyncResult],\n          [],\n        ),\n      'requests' : IDL.Func([IDL.Opt(IDL.Nat64)], [RequestsResult], ['query']),\n      'send' : IDL.Func([SendArgs], [SendResult], []),\n      'swap' : IDL.Func([SwapArgs], [SwapResult], []),\n      'swap_amounts' : IDL.Func(\n          [IDL.Text, IDL.Nat, IDL.Text],\n          [SwapAmountsResult],\n          ['query'],\n        ),\n      'swap_async' : IDL.Func([SwapArgs], [SwapAsyncResult], []),\n      'tokens' : IDL.Func([IDL.Opt(IDL.Text)], [TokensResult], ['query']),\n      'update_token' : IDL.Func([UpdateTokenArgs], [UpdateTokenResult], []),\n      'user_balances' : IDL.Func([IDL.Text], [UserBalancesResult], ['query']),\n      'validate_add_liquidity' : IDL.Func([], [ValidateAddLiquidityResult], []),\n      'validate_remove_liquidity' : IDL.Func(\n          [],\n          [ValidateRemoveLiquidityResult],\n          [],\n        ),\n    });\n  };\n  export const init = ({ IDL }) => { return []; };","import type { Principal } from '@dfinity/principal';\nimport type { ActorMethod } from '@dfinity/agent';\nimport type { IDL } from '@dfinity/candid';\n\nexport interface CreatePoolArgs {\n  'fee' : bigint,\n  'sqrtPriceX96' : string,\n  'token0' : Token,\n  'token1' : Token,\n  'subnet' : [] | [string],\n}\nexport interface CycleInfo { 'balance' : bigint, 'available' : bigint }\nexport type Error = { 'CommonError' : null } |\n  { 'InternalError' : string } |\n  { 'UnsupportedToken' : string } |\n  { 'InsufficientFunds' : null };\nexport interface FailedPoolInfo {\n  'task' : PoolUpgradeTask,\n  'timestamp' : bigint,\n  'errorMsg' : string,\n}\nexport interface GetPoolArgs {\n  'fee' : bigint,\n  'token0' : Token,\n  'token1' : Token,\n}\nexport interface Icrc21ConsentInfo {\n  'metadata' : Icrc21ConsentMessageMetadata,\n  'consent_message' : Icrc21ConsentMessage,\n}\nexport type Icrc21ConsentMessage = {\n    'LineDisplayMessage' : { 'pages' : Array<{ 'lines' : Array<string> }> }\n  } |\n  { 'GenericDisplayMessage' : string };\nexport interface Icrc21ConsentMessageMetadata {\n  'utc_offset_minutes' : [] | [number],\n  'language' : string,\n}\nexport interface Icrc21ConsentMessageRequest {\n  'arg' : Uint8Array | number[],\n  'method' : string,\n  'user_preferences' : Icrc21ConsentMessageSpec,\n}\nexport type Icrc21ConsentMessageResponse = { 'Ok' : Icrc21ConsentInfo } |\n  { 'Err' : Icrc21Error };\nexport interface Icrc21ConsentMessageSpec {\n  'metadata' : Icrc21ConsentMessageMetadata,\n  'device_spec' : [] | [\n    { 'GenericDisplay' : null } |\n      {\n        'LineDisplay' : {\n          'characters_per_line' : number,\n          'lines_per_page' : number,\n        }\n      }\n  ],\n}\nexport type Icrc21Error = {\n    'GenericError' : { 'description' : string, 'error_code' : bigint }\n  } |\n  { 'InsufficientPayment' : Icrc21ErrorInfo } |\n  { 'UnsupportedCanisterCall' : Icrc21ErrorInfo } |\n  { 'ConsentMessageUnavailable' : Icrc21ErrorInfo };\nexport interface Icrc21ErrorInfo { 'description' : string }\nexport interface Icrc28TrustedOriginsResponse {\n  'trusted_origins' : Array<string>,\n}\nexport interface Passcode {\n  'fee' : bigint,\n  'token0' : Principal,\n  'token1' : Principal,\n}\nexport interface PoolData {\n  'fee' : bigint,\n  'key' : string,\n  'tickSpacing' : bigint,\n  'token0' : Token,\n  'token1' : Token,\n  'canisterId' : Principal,\n}\nexport interface PoolInstaller {\n  'weight' : bigint,\n  'subnet' : string,\n  'subnetType' : string,\n  'canisterId' : Principal,\n}\nexport interface PoolUpgradeTask {\n  'turnOnAvailable' : PoolUpgradeTaskStep,\n  'backup' : {\n    'isDone' : boolean,\n    'isSent' : boolean,\n    'retryCount' : bigint,\n    'timestamp' : bigint,\n  },\n  'stop' : PoolUpgradeTaskStep,\n  'moduleHashBefore' : [] | [Uint8Array | number[]],\n  'moduleHashAfter' : [] | [Uint8Array | number[]],\n  'turnOffAvailable' : PoolUpgradeTaskStep,\n  'upgrade' : PoolUpgradeTaskStep,\n  'start' : PoolUpgradeTaskStep,\n  'poolData' : PoolData,\n}\nexport interface PoolUpgradeTaskStep {\n  'isDone' : boolean,\n  'timestamp' : bigint,\n}\nexport type Result = { 'ok' : string } |\n  { 'err' : Error };\nexport type Result_1 = { 'ok' : null } |\n  { 'err' : Error };\nexport type Result_10 = {\n    'ok' : {\n      'infoCid' : Principal,\n      'trustedCanisterManagerCid' : Principal,\n      'governanceCid' : [] | [Principal],\n      'passcodeManagerCid' : Principal,\n      'backupCid' : Principal,\n      'feeReceiverCid' : Principal,\n    }\n  } |\n  { 'err' : Error };\nexport type Result_11 = { 'ok' : [] | [Principal] } |\n  { 'err' : Error };\nexport type Result_12 = { 'ok' : CycleInfo } |\n  { 'err' : Error };\nexport type Result_13 = { 'ok' : [] | [PoolUpgradeTask] } |\n  { 'err' : Error };\nexport type Result_2 = { 'ok' : boolean } |\n  { 'err' : Error };\nexport type Result_3 = { 'ok' : Array<FailedPoolInfo> } |\n  { 'err' : Error };\nexport type Result_4 = { 'ok' : Array<PoolData> } |\n  { 'err' : Error };\nexport type Result_5 = { 'ok' : Array<[Principal, Array<Passcode>]> } |\n  { 'err' : Error };\nexport type Result_6 = { 'ok' : Array<[Principal, Array<PoolUpgradeTask>]> } |\n  { 'err' : Error };\nexport type Result_7 = { 'ok' : Array<PoolUpgradeTask> } |\n  { 'err' : Error };\nexport type Result_8 = { 'ok' : PoolData } |\n  { 'err' : Error };\nexport type Result_9 = { 'ok' : Array<Passcode> } |\n  { 'err' : Error };\nexport interface Token { 'address' : string, 'standard' : string }\nexport interface UpgradePoolArgs { 'poolIds' : Array<Principal> }\nexport interface _SERVICE {\n  'addPasscode' : ActorMethod<[Principal, Passcode], Result_1>,\n  'addPoolControllers' : ActorMethod<[Principal, Array<Principal>], undefined>,\n  'addPoolInstallers' : ActorMethod<[Array<PoolInstaller>], undefined>,\n  'addPoolInstallersValidate' : ActorMethod<\n    [Array<PoolInstaller>],\n    { 'Ok' : string } |\n      { 'Err' : string }\n  >,\n  'batchAddPoolControllers' : ActorMethod<\n    [Array<Principal>, Array<Principal>],\n    undefined\n  >,\n  'batchClearRemovedPool' : ActorMethod<[Array<Principal>], undefined>,\n  'batchRemovePoolControllers' : ActorMethod<\n    [Array<Principal>, Array<Principal>],\n    undefined\n  >,\n  'batchRemovePools' : ActorMethod<[Array<Principal>], Result_1>,\n  'batchSetPoolAdmins' : ActorMethod<\n    [Array<Principal>, Array<Principal>],\n    undefined\n  >,\n  'batchSetPoolAvailable' : ActorMethod<[Array<Principal>, boolean], undefined>,\n  'batchSetPoolIcrc28TrustedOrigins' : ActorMethod<\n    [Array<Principal>, Array<string>],\n    Result_1\n  >,\n  'batchSetPoolLimitOrderAvailable' : ActorMethod<\n    [Array<Principal>, boolean],\n    undefined\n  >,\n  'clearPoolUpgradeTaskHis' : ActorMethod<[], undefined>,\n  'clearRemovedPool' : ActorMethod<[Principal], string>,\n  'clearUpgradeFailedPoolList' : ActorMethod<[], undefined>,\n  'createPool' : ActorMethod<[CreatePoolArgs], Result_8>,\n  'deletePasscode' : ActorMethod<[Principal, Passcode], Result_1>,\n  'getAdmins' : ActorMethod<[], Array<Principal>>,\n  'getCurrentUpgradeTask' : ActorMethod<[], Result_13>,\n  'getCycleInfo' : ActorMethod<[], Result_12>,\n  'getGovernanceCid' : ActorMethod<[], Result_11>,\n  'getInitArgs' : ActorMethod<[], Result_10>,\n  'getInstallerModuleHash' : ActorMethod<[], [] | [Uint8Array | number[]]>,\n  'getNextPoolVersion' : ActorMethod<[], string>,\n  'getPasscodesByPrincipal' : ActorMethod<[Principal], Result_9>,\n  'getPendingUpgradePoolList' : ActorMethod<[], Result_7>,\n  'getPool' : ActorMethod<[GetPoolArgs], Result_8>,\n  'getPoolInstallers' : ActorMethod<[], Array<PoolInstaller>>,\n  'getPoolUpgradeTaskHis' : ActorMethod<[Principal], Result_7>,\n  'getPoolUpgradeTaskHisList' : ActorMethod<[], Result_6>,\n  'getPools' : ActorMethod<[], Result_4>,\n  'getPrincipalPasscodes' : ActorMethod<[], Result_5>,\n  'getRemovedPools' : ActorMethod<[], Result_4>,\n  'getUpgradeFailedPoolList' : ActorMethod<[], Result_3>,\n  'getVersion' : ActorMethod<[], string>,\n  'icrc10_supported_standards' : ActorMethod<\n    [],\n    Array<{ 'url' : string, 'name' : string }>\n  >,\n  'icrc21_canister_call_consent_message' : ActorMethod<\n    [Icrc21ConsentMessageRequest],\n    Icrc21ConsentMessageResponse\n  >,\n  'icrc28_trusted_origins' : ActorMethod<[], Icrc28TrustedOriginsResponse>,\n  'removePool' : ActorMethod<[GetPoolArgs], string>,\n  'removePoolControllers' : ActorMethod<\n    [Principal, Array<Principal>],\n    undefined\n  >,\n  'removePoolInstaller' : ActorMethod<[Principal], undefined>,\n  'removePoolInstallerValidate' : ActorMethod<\n    [Principal],\n    { 'Ok' : string } |\n      { 'Err' : string }\n  >,\n  'retryAllFailedUpgrades' : ActorMethod<[], Result_1>,\n  'setAdmins' : ActorMethod<[Array<Principal>], undefined>,\n  'setIcrc28TrustedOrigins' : ActorMethod<[Array<string>], Result_2>,\n  'setInstallerModuleHash' : ActorMethod<[Uint8Array | number[]], undefined>,\n  'setInstallerModuleHashValidate' : ActorMethod<\n    [Uint8Array | number[]],\n    { 'Ok' : string } |\n      { 'Err' : string }\n  >,\n  'setPoolAdmins' : ActorMethod<[Principal, Array<Principal>], undefined>,\n  'setPoolAvailable' : ActorMethod<[Principal, boolean], undefined>,\n  'setUpgradePoolList' : ActorMethod<[UpgradePoolArgs], Result_1>,\n  'upgradePoolTokenStandard' : ActorMethod<[Principal, Principal], Result>,\n}\n\n\nexport const idlFactory = ({ IDL }) => {\n    const Passcode = IDL.Record({\n      'fee' : IDL.Nat,\n      'token0' : IDL.Principal,\n      'token1' : IDL.Principal,\n    });\n    const Error = IDL.Variant({\n      'CommonError' : IDL.Null,\n      'InternalError' : IDL.Text,\n      'UnsupportedToken' : IDL.Text,\n      'InsufficientFunds' : IDL.Null,\n    });\n    const Result_1 = IDL.Variant({ 'ok' : IDL.Null, 'err' : Error });\n    const PoolInstaller = IDL.Record({\n      'weight' : IDL.Nat,\n      'subnet' : IDL.Text,\n      'subnetType' : IDL.Text,\n      'canisterId' : IDL.Principal,\n    });\n    const Token = IDL.Record({ 'address' : IDL.Text, 'standard' : IDL.Text });\n    const CreatePoolArgs = IDL.Record({\n      'fee' : IDL.Nat,\n      'sqrtPriceX96' : IDL.Text,\n      'token0' : Token,\n      'token1' : Token,\n      'subnet' : IDL.Opt(IDL.Text),\n    });\n    const PoolData = IDL.Record({\n      'fee' : IDL.Nat,\n      'key' : IDL.Text,\n      'tickSpacing' : IDL.Int,\n      'token0' : Token,\n      'token1' : Token,\n      'canisterId' : IDL.Principal,\n    });\n    const Result_8 = IDL.Variant({ 'ok' : PoolData, 'err' : Error });\n    const PoolUpgradeTaskStep = IDL.Record({\n      'isDone' : IDL.Bool,\n      'timestamp' : IDL.Nat,\n    });\n    const PoolUpgradeTask = IDL.Record({\n      'turnOnAvailable' : PoolUpgradeTaskStep,\n      'backup' : IDL.Record({\n        'isDone' : IDL.Bool,\n        'isSent' : IDL.Bool,\n        'retryCount' : IDL.Nat,\n        'timestamp' : IDL.Nat,\n      }),\n      'stop' : PoolUpgradeTaskStep,\n      'moduleHashBefore' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n      'moduleHashAfter' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n      'turnOffAvailable' : PoolUpgradeTaskStep,\n      'upgrade' : PoolUpgradeTaskStep,\n      'start' : PoolUpgradeTaskStep,\n      'poolData' : PoolData,\n    });\n    const Result_13 = IDL.Variant({\n      'ok' : IDL.Opt(PoolUpgradeTask),\n      'err' : Error,\n    });\n    const CycleInfo = IDL.Record({ 'balance' : IDL.Nat, 'available' : IDL.Nat });\n    const Result_12 = IDL.Variant({ 'ok' : CycleInfo, 'err' : Error });\n    const Result_11 = IDL.Variant({\n      'ok' : IDL.Opt(IDL.Principal),\n      'err' : Error,\n    });\n    const Result_10 = IDL.Variant({\n      'ok' : IDL.Record({\n        'infoCid' : IDL.Principal,\n        'trustedCanisterManagerCid' : IDL.Principal,\n        'governanceCid' : IDL.Opt(IDL.Principal),\n        'passcodeManagerCid' : IDL.Principal,\n        'backupCid' : IDL.Principal,\n        'feeReceiverCid' : IDL.Principal,\n      }),\n      'err' : Error,\n    });\n    const Result_9 = IDL.Variant({ 'ok' : IDL.Vec(Passcode), 'err' : Error });\n    const Result_7 = IDL.Variant({\n      'ok' : IDL.Vec(PoolUpgradeTask),\n      'err' : Error,\n    });\n    const GetPoolArgs = IDL.Record({\n      'fee' : IDL.Nat,\n      'token0' : Token,\n      'token1' : Token,\n    });\n    const Result_6 = IDL.Variant({\n      'ok' : IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Vec(PoolUpgradeTask))),\n      'err' : Error,\n    });\n    const Result_4 = IDL.Variant({ 'ok' : IDL.Vec(PoolData), 'err' : Error });\n    const Result_5 = IDL.Variant({\n      'ok' : IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Vec(Passcode))),\n      'err' : Error,\n    });\n    const FailedPoolInfo = IDL.Record({\n      'task' : PoolUpgradeTask,\n      'timestamp' : IDL.Nat,\n      'errorMsg' : IDL.Text,\n    });\n    const Result_3 = IDL.Variant({\n      'ok' : IDL.Vec(FailedPoolInfo),\n      'err' : Error,\n    });\n    const Icrc21ConsentMessageMetadata = IDL.Record({\n      'utc_offset_minutes' : IDL.Opt(IDL.Int16),\n      'language' : IDL.Text,\n    });\n    const Icrc21ConsentMessageSpec = IDL.Record({\n      'metadata' : Icrc21ConsentMessageMetadata,\n      'device_spec' : IDL.Opt(\n        IDL.Variant({\n          'GenericDisplay' : IDL.Null,\n          'LineDisplay' : IDL.Record({\n            'characters_per_line' : IDL.Nat16,\n            'lines_per_page' : IDL.Nat16,\n          }),\n        })\n      ),\n    });\n    const Icrc21ConsentMessageRequest = IDL.Record({\n      'arg' : IDL.Vec(IDL.Nat8),\n      'method' : IDL.Text,\n      'user_preferences' : Icrc21ConsentMessageSpec,\n    });\n    const Icrc21ConsentMessage = IDL.Variant({\n      'LineDisplayMessage' : IDL.Record({\n        'pages' : IDL.Vec(IDL.Record({ 'lines' : IDL.Vec(IDL.Text) })),\n      }),\n      'GenericDisplayMessage' : IDL.Text,\n    });\n    const Icrc21ConsentInfo = IDL.Record({\n      'metadata' : Icrc21ConsentMessageMetadata,\n      'consent_message' : Icrc21ConsentMessage,\n    });\n    const Icrc21ErrorInfo = IDL.Record({ 'description' : IDL.Text });\n    const Icrc21Error = IDL.Variant({\n      'GenericError' : IDL.Record({\n        'description' : IDL.Text,\n        'error_code' : IDL.Nat,\n      }),\n      'InsufficientPayment' : Icrc21ErrorInfo,\n      'UnsupportedCanisterCall' : Icrc21ErrorInfo,\n      'ConsentMessageUnavailable' : Icrc21ErrorInfo,\n    });\n    const Icrc21ConsentMessageResponse = IDL.Variant({\n      'Ok' : Icrc21ConsentInfo,\n      'Err' : Icrc21Error,\n    });\n    const Icrc28TrustedOriginsResponse = IDL.Record({\n      'trusted_origins' : IDL.Vec(IDL.Text),\n    });\n    const Result_2 = IDL.Variant({ 'ok' : IDL.Bool, 'err' : Error });\n    const UpgradePoolArgs = IDL.Record({ 'poolIds' : IDL.Vec(IDL.Principal) });\n    const Result = IDL.Variant({ 'ok' : IDL.Text, 'err' : Error });\n    return IDL.Service({\n      'addPasscode' : IDL.Func([IDL.Principal, Passcode], [Result_1], []),\n      'addPoolControllers' : IDL.Func(\n          [IDL.Principal, IDL.Vec(IDL.Principal)],\n          [],\n          [],\n        ),\n      'addPoolInstallers' : IDL.Func([IDL.Vec(PoolInstaller)], [], []),\n      'addPoolInstallersValidate' : IDL.Func(\n          [IDL.Vec(PoolInstaller)],\n          [IDL.Variant({ 'Ok' : IDL.Text, 'Err' : IDL.Text })],\n          [],\n        ),\n      'batchAddPoolControllers' : IDL.Func(\n          [IDL.Vec(IDL.Principal), IDL.Vec(IDL.Principal)],\n          [],\n          [],\n        ),\n      'batchClearRemovedPool' : IDL.Func([IDL.Vec(IDL.Principal)], [], []),\n      'batchRemovePoolControllers' : IDL.Func(\n          [IDL.Vec(IDL.Principal), IDL.Vec(IDL.Principal)],\n          [],\n          [],\n        ),\n      'batchRemovePools' : IDL.Func([IDL.Vec(IDL.Principal)], [Result_1], []),\n      'batchSetPoolAdmins' : IDL.Func(\n          [IDL.Vec(IDL.Principal), IDL.Vec(IDL.Principal)],\n          [],\n          [],\n        ),\n      'batchSetPoolAvailable' : IDL.Func(\n          [IDL.Vec(IDL.Principal), IDL.Bool],\n          [],\n          [],\n        ),\n      'batchSetPoolIcrc28TrustedOrigins' : IDL.Func(\n          [IDL.Vec(IDL.Principal), IDL.Vec(IDL.Text)],\n          [Result_1],\n          [],\n        ),\n      'batchSetPoolLimitOrderAvailable' : IDL.Func(\n          [IDL.Vec(IDL.Principal), IDL.Bool],\n          [],\n          [],\n        ),\n      'clearPoolUpgradeTaskHis' : IDL.Func([], [], []),\n      'clearRemovedPool' : IDL.Func([IDL.Principal], [IDL.Text], []),\n      'clearUpgradeFailedPoolList' : IDL.Func([], [], []),\n      'createPool' : IDL.Func([CreatePoolArgs], [Result_8], []),\n      'deletePasscode' : IDL.Func([IDL.Principal, Passcode], [Result_1], []),\n      'getAdmins' : IDL.Func([], [IDL.Vec(IDL.Principal)], ['query']),\n      'getCurrentUpgradeTask' : IDL.Func([], [Result_13], ['query']),\n      'getCycleInfo' : IDL.Func([], [Result_12], []),\n      'getGovernanceCid' : IDL.Func([], [Result_11], ['query']),\n      'getInitArgs' : IDL.Func([], [Result_10], ['query']),\n      'getInstallerModuleHash' : IDL.Func(\n          [],\n          [IDL.Opt(IDL.Vec(IDL.Nat8))],\n          ['query'],\n        ),\n      'getNextPoolVersion' : IDL.Func([], [IDL.Text], ['query']),\n      'getPasscodesByPrincipal' : IDL.Func(\n          [IDL.Principal],\n          [Result_9],\n          ['query'],\n        ),\n      'getPendingUpgradePoolList' : IDL.Func([], [Result_7], ['query']),\n      'getPool' : IDL.Func([GetPoolArgs], [Result_8], ['query']),\n      'getPoolInstallers' : IDL.Func([], [IDL.Vec(PoolInstaller)], ['query']),\n      'getPoolUpgradeTaskHis' : IDL.Func([IDL.Principal], [Result_7], ['query']),\n      'getPoolUpgradeTaskHisList' : IDL.Func([], [Result_6], ['query']),\n      'getPools' : IDL.Func([], [Result_4], ['query']),\n      'getPrincipalPasscodes' : IDL.Func([], [Result_5], ['query']),\n      'getRemovedPools' : IDL.Func([], [Result_4], ['query']),\n      'getUpgradeFailedPoolList' : IDL.Func([], [Result_3], ['query']),\n      'getVersion' : IDL.Func([], [IDL.Text], ['query']),\n      'icrc10_supported_standards' : IDL.Func(\n          [],\n          [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text }))],\n          ['query'],\n        ),\n      'icrc21_canister_call_consent_message' : IDL.Func(\n          [Icrc21ConsentMessageRequest],\n          [Icrc21ConsentMessageResponse],\n          [],\n        ),\n      'icrc28_trusted_origins' : IDL.Func([], [Icrc28TrustedOriginsResponse], []),\n      'removePool' : IDL.Func([GetPoolArgs], [IDL.Text], []),\n      'removePoolControllers' : IDL.Func(\n          [IDL.Principal, IDL.Vec(IDL.Principal)],\n          [],\n          [],\n        ),\n      'removePoolInstaller' : IDL.Func([IDL.Principal], [], []),\n      'removePoolInstallerValidate' : IDL.Func(\n          [IDL.Principal],\n          [IDL.Variant({ 'Ok' : IDL.Text, 'Err' : IDL.Text })],\n          [],\n        ),\n      'retryAllFailedUpgrades' : IDL.Func([], [Result_1], []),\n      'setAdmins' : IDL.Func([IDL.Vec(IDL.Principal)], [], []),\n      'setIcrc28TrustedOrigins' : IDL.Func([IDL.Vec(IDL.Text)], [Result_2], []),\n      'setInstallerModuleHash' : IDL.Func([IDL.Vec(IDL.Nat8)], [], []),\n      'setInstallerModuleHashValidate' : IDL.Func(\n          [IDL.Vec(IDL.Nat8)],\n          [IDL.Variant({ 'Ok' : IDL.Text, 'Err' : IDL.Text })],\n          [],\n        ),\n      'setPoolAdmins' : IDL.Func([IDL.Principal, IDL.Vec(IDL.Principal)], [], []),\n      'setPoolAvailable' : IDL.Func([IDL.Principal, IDL.Bool], [], []),\n      'setUpgradePoolList' : IDL.Func([UpgradePoolArgs], [Result_1], []),\n      'upgradePoolTokenStandard' : IDL.Func(\n          [IDL.Principal, IDL.Principal],\n          [Result],\n          [],\n        ),\n    });\n  };\n  export const init = ({ IDL }) => { return []; };","import type { Principal } from '@dfinity/principal';\nimport type { ActorMethod } from '@dfinity/agent';\nimport type { IDL } from '@dfinity/candid';\n\nexport interface AccountBalance { 'balance0' : bigint, 'balance1' : bigint }\nexport interface ClaimArgs { 'positionId' : bigint }\nexport interface CycleInfo { 'balance' : bigint, 'available' : bigint }\nexport interface DecreaseLiquidityArgs {\n  'liquidity' : string,\n  'positionId' : bigint,\n}\nexport interface DepositAndMintArgs {\n  'tickUpper' : bigint,\n  'fee0' : bigint,\n  'fee1' : bigint,\n  'amount0' : bigint,\n  'amount1' : bigint,\n  'positionOwner' : Principal,\n  'amount0Desired' : string,\n  'amount1Desired' : string,\n  'tickLower' : bigint,\n}\nexport interface DepositArgs {\n  'fee' : bigint,\n  'token' : string,\n  'amount' : bigint,\n}\nexport type Error = { 'CommonError' : null } |\n  { 'InternalError' : string } |\n  { 'UnsupportedToken' : string } |\n  { 'InsufficientFunds' : null };\nexport interface GetPositionArgs { 'tickUpper' : bigint, 'tickLower' : bigint }\nexport interface Icrc21ConsentInfo {\n  'metadata' : Icrc21ConsentMessageMetadata,\n  'consent_message' : Icrc21ConsentMessage,\n}\nexport type Icrc21ConsentMessage = {\n    'LineDisplayMessage' : { 'pages' : Array<{ 'lines' : Array<string> }> }\n  } |\n  { 'GenericDisplayMessage' : string };\nexport interface Icrc21ConsentMessageMetadata {\n  'utc_offset_minutes' : [] | [number],\n  'language' : string,\n}\nexport interface Icrc21ConsentMessageRequest {\n  'arg' : Uint8Array | number[],\n  'method' : string,\n  'user_preferences' : Icrc21ConsentMessageSpec,\n}\nexport type Icrc21ConsentMessageResponse = { 'Ok' : Icrc21ConsentInfo } |\n  { 'Err' : Icrc21Error };\nexport interface Icrc21ConsentMessageSpec {\n  'metadata' : Icrc21ConsentMessageMetadata,\n  'device_spec' : [] | [\n    { 'GenericDisplay' : null } |\n      {\n        'LineDisplay' : {\n          'characters_per_line' : number,\n          'lines_per_page' : number,\n        }\n      }\n  ],\n}\nexport type Icrc21Error = {\n    'GenericError' : { 'description' : string, 'error_code' : bigint }\n  } |\n  { 'InsufficientPayment' : Icrc21ErrorInfo } |\n  { 'UnsupportedCanisterCall' : Icrc21ErrorInfo } |\n  { 'ConsentMessageUnavailable' : Icrc21ErrorInfo };\nexport interface Icrc21ErrorInfo { 'description' : string }\nexport interface Icrc28TrustedOriginsResponse {\n  'trusted_origins' : Array<string>,\n}\nexport interface IncreaseLiquidityArgs {\n  'positionId' : bigint,\n  'amount0Desired' : string,\n  'amount1Desired' : string,\n}\nexport interface JobInfo {\n  'interval' : bigint,\n  'name' : string,\n  'lastRun' : Time,\n  'timerId' : [] | [bigint],\n}\nexport type Level = { 'Inactive' : null } |\n  { 'Active' : null };\nexport interface LimitOrderArgs { 'positionId' : bigint, 'tickLimit' : bigint }\nexport interface LimitOrderKey { 'timestamp' : bigint, 'tickLimit' : bigint }\nexport type LimitOrderType = { 'Lower' : null } |\n  { 'Upper' : null };\nexport interface LimitOrderValue {\n  'userPositionId' : bigint,\n  'token0InAmount' : bigint,\n  'owner' : Principal,\n  'token1InAmount' : bigint,\n}\nexport interface MintArgs {\n  'fee' : bigint,\n  'tickUpper' : bigint,\n  'token0' : string,\n  'token1' : string,\n  'amount0Desired' : string,\n  'amount1Desired' : string,\n  'tickLower' : bigint,\n}\nexport interface Page {\n  'content' : Array<UserPositionInfoWithId>,\n  'offset' : bigint,\n  'limit' : bigint,\n  'totalElements' : bigint,\n}\nexport interface Page_1 {\n  'content' : Array<UserPositionInfoWithTokenAmount>,\n  'offset' : bigint,\n  'limit' : bigint,\n  'totalElements' : bigint,\n}\nexport interface Page_2 {\n  'content' : Array<TickInfoWithId>,\n  'offset' : bigint,\n  'limit' : bigint,\n  'totalElements' : bigint,\n}\nexport interface Page_3 {\n  'content' : Array<TickLiquidityInfo>,\n  'offset' : bigint,\n  'limit' : bigint,\n  'totalElements' : bigint,\n}\nexport interface Page_4 {\n  'content' : Array<PositionInfoWithId>,\n  'offset' : bigint,\n  'limit' : bigint,\n  'totalElements' : bigint,\n}\nexport interface Page_5 {\n  'content' : Array<[Principal, AccountBalance]>,\n  'offset' : bigint,\n  'limit' : bigint,\n  'totalElements' : bigint,\n}\nexport interface PoolMetadata {\n  'fee' : bigint,\n  'key' : string,\n  'sqrtPriceX96' : bigint,\n  'tick' : bigint,\n  'liquidity' : bigint,\n  'token0' : Token,\n  'token1' : Token,\n  'maxLiquidityPerTick' : bigint,\n  'nextPositionId' : bigint,\n}\nexport interface PositionInfo {\n  'tokensOwed0' : bigint,\n  'tokensOwed1' : bigint,\n  'feeGrowthInside1LastX128' : bigint,\n  'liquidity' : bigint,\n  'feeGrowthInside0LastX128' : bigint,\n}\nexport interface PositionInfoWithId {\n  'id' : string,\n  'tokensOwed0' : bigint,\n  'tokensOwed1' : bigint,\n  'feeGrowthInside1LastX128' : bigint,\n  'liquidity' : bigint,\n  'feeGrowthInside0LastX128' : bigint,\n}\nexport interface PushError { 'time' : bigint, 'message' : string }\nexport type Result = { 'ok' : bigint } |\n  { 'err' : Error };\nexport type Result_1 = { 'ok' : string } |\n  { 'err' : Error };\nexport type Result_10 = { 'ok' : Page_1 } |\n  { 'err' : Error };\nexport type Result_11 = { 'ok' : Array<bigint> } |\n  { 'err' : Error };\nexport type Result_12 = { 'ok' : Array<[string, Array<bigint>]> } |\n  { 'err' : Error };\nexport type Result_13 = { 'ok' : UserPositionInfo } |\n  { 'err' : Error };\nexport type Result_14 = {\n    'ok' : {\n      'upperLimitOrdersIds' : Array<\n        { 'userPositionId' : bigint, 'timestamp' : bigint }\n      >,\n      'lowerLimitOrderIds' : Array<\n        { 'userPositionId' : bigint, 'timestamp' : bigint }\n      >,\n    }\n  } |\n  { 'err' : Error };\nexport type Result_15 = { 'ok' : Array<TransferLog> } |\n  { 'err' : Error };\nexport type Result_16 = {\n    'ok' : {\n      'swapFee0Repurchase' : bigint,\n      'token0Amount' : bigint,\n      'swapFeeReceiver' : string,\n      'token1Amount' : bigint,\n      'swapFee1Repurchase' : bigint,\n    }\n  } |\n  { 'err' : Error };\nexport type Result_17 = { 'ok' : Page_2 } |\n  { 'err' : Error };\nexport type Result_18 = { 'ok' : Page_3 } |\n  { 'err' : Error };\nexport type Result_19 = { 'ok' : Array<[bigint, bigint]> } |\n  { 'err' : Error };\nexport type Result_2 = { 'ok' : boolean } |\n  { 'err' : Error };\nexport type Result_20 = {\n    'ok' : {\n      'infoCid' : string,\n      'records' : Array<SwapRecordInfo>,\n      'errors' : Array<PushError>,\n      'retryCount' : bigint,\n    }\n  } |\n  { 'err' : Error };\nexport type Result_21 = {\n    'ok' : Array<\n      {\n        'userPositionId' : bigint,\n        'token0InAmount' : bigint,\n        'timestamp' : bigint,\n        'tickLimit' : bigint,\n        'token1InAmount' : bigint,\n      }\n    >\n  } |\n  { 'err' : Error };\nexport type Result_22 = { 'ok' : Page_4 } |\n  { 'err' : Error };\nexport type Result_23 = { 'ok' : PositionInfo } |\n  { 'err' : Error };\nexport type Result_24 = {\n    'ok' : {\n      'lowerLimitOrders' : Array<[LimitOrderKey, LimitOrderValue]>,\n      'upperLimitOrders' : Array<[LimitOrderKey, LimitOrderValue]>,\n    }\n  } |\n  { 'err' : Error };\nexport type Result_25 = {\n    'ok' : Array<[LimitOrderType, LimitOrderKey, LimitOrderValue]>\n  } |\n  { 'err' : Error };\nexport type Result_26 = {\n    'ok' : {\n      'infoCid' : Principal,\n      'trustedCanisterManagerCid' : Principal,\n      'token0' : Token,\n      'token1' : Token,\n      'feeReceiverCid' : Principal,\n    }\n  } |\n  { 'err' : Error };\nexport type Result_27 = {\n    'ok' : { 'feeGrowthGlobal1X128' : bigint, 'feeGrowthGlobal0X128' : bigint }\n  } |\n  { 'err' : Error };\nexport type Result_28 = { 'ok' : CycleInfo } |\n  { 'err' : Error };\nexport type Result_29 = { 'ok' : { 'amount0' : bigint, 'amount1' : bigint } } |\n  { 'err' : Error };\nexport type Result_3 = { 'ok' : bigint } |\n  { 'err' : Error };\nexport type Result_30 = {\n    'ok' : {\n      'tokenIncome' : Array<\n        [bigint, { 'tokensOwed0' : bigint, 'tokensOwed1' : bigint }]\n      >,\n      'totalTokensOwed0' : bigint,\n      'totalTokensOwed1' : bigint,\n    }\n  } |\n  { 'err' : Error };\nexport type Result_31 = { 'ok' : Page_5 } |\n  { 'err' : Error };\nexport type Result_4 = { 'ok' : boolean } |\n  { 'err' : null };\nexport type Result_5 = {\n    'ok' : { 'tokensOwed0' : bigint, 'tokensOwed1' : bigint }\n  } |\n  { 'err' : Error };\nexport type Result_6 = { 'ok' : PoolMetadata } |\n  { 'err' : Error };\nexport type Result_7 = { 'ok' : { 'balance0' : bigint, 'balance1' : bigint } } |\n  { 'err' : Error };\nexport type Result_8 = { 'ok' : Array<UserPositionInfoWithId> } |\n  { 'err' : Error };\nexport type Result_9 = { 'ok' : Page } |\n  { 'err' : Error };\nexport interface SwapArgs {\n  'amountIn' : string,\n  'zeroForOne' : boolean,\n  'amountOutMinimum' : string,\n}\nexport interface SwapRecordInfo {\n  'to' : string,\n  'feeAmount' : bigint,\n  'action' : TransactionType,\n  'feeAmountTotal' : bigint,\n  'token0Id' : string,\n  'token1Id' : string,\n  'token0AmountTotal' : bigint,\n  'liquidityTotal' : bigint,\n  'from' : string,\n  'tick' : bigint,\n  'feeTire' : bigint,\n  'recipient' : string,\n  'token0ChangeAmount' : bigint,\n  'token1AmountTotal' : bigint,\n  'liquidityChange' : bigint,\n  'token1Standard' : string,\n  'TVLToken0' : bigint,\n  'TVLToken1' : bigint,\n  'token0Fee' : bigint,\n  'token1Fee' : bigint,\n  'timestamp' : bigint,\n  'token1ChangeAmount' : bigint,\n  'token0Standard' : string,\n  'price' : bigint,\n  'poolId' : string,\n}\nexport interface TickInfoWithId {\n  'id' : string,\n  'initialized' : boolean,\n  'feeGrowthOutside1X128' : bigint,\n  'secondsPerLiquidityOutsideX128' : bigint,\n  'liquidityNet' : bigint,\n  'secondsOutside' : bigint,\n  'liquidityGross' : bigint,\n  'feeGrowthOutside0X128' : bigint,\n  'tickCumulativeOutside' : bigint,\n}\nexport interface TickLiquidityInfo {\n  'tickIndex' : bigint,\n  'price0Decimal' : bigint,\n  'liquidityNet' : bigint,\n  'price0' : bigint,\n  'price1' : bigint,\n  'liquidityGross' : bigint,\n  'price1Decimal' : bigint,\n}\nexport type Time = bigint;\nexport interface Token { 'address' : string, 'standard' : string }\nexport type TransactionType = { 'decreaseLiquidity' : null } |\n  {\n    'limitOrder' : {\n      'token0InAmount' : bigint,\n      'positionId' : bigint,\n      'tickLimit' : bigint,\n      'token1InAmount' : bigint,\n    }\n  } |\n  { 'claim' : null } |\n  { 'swap' : null } |\n  { 'addLiquidity' : null } |\n  { 'transferPosition' : bigint } |\n  { 'increaseLiquidity' : null };\nexport interface TransferLog {\n  'to' : Principal,\n  'fee' : bigint,\n  'result' : string,\n  'token' : Token,\n  'action' : string,\n  'daysFrom19700101' : bigint,\n  'owner' : Principal,\n  'from' : Principal,\n  'fromSubaccount' : [] | [Uint8Array | number[]],\n  'timestamp' : bigint,\n  'index' : bigint,\n  'amount' : bigint,\n  'errorMsg' : string,\n  'toSubaccount' : [] | [Uint8Array | number[]],\n}\nexport interface UserPositionInfo {\n  'tickUpper' : bigint,\n  'tokensOwed0' : bigint,\n  'tokensOwed1' : bigint,\n  'feeGrowthInside1LastX128' : bigint,\n  'liquidity' : bigint,\n  'feeGrowthInside0LastX128' : bigint,\n  'tickLower' : bigint,\n}\nexport interface UserPositionInfoWithId {\n  'id' : bigint,\n  'tickUpper' : bigint,\n  'tokensOwed0' : bigint,\n  'tokensOwed1' : bigint,\n  'feeGrowthInside1LastX128' : bigint,\n  'liquidity' : bigint,\n  'feeGrowthInside0LastX128' : bigint,\n  'tickLower' : bigint,\n}\nexport interface UserPositionInfoWithTokenAmount {\n  'id' : bigint,\n  'tickUpper' : bigint,\n  'tokensOwed0' : bigint,\n  'tokensOwed1' : bigint,\n  'feeGrowthInside1LastX128' : bigint,\n  'liquidity' : bigint,\n  'feeGrowthInside0LastX128' : bigint,\n  'token0Amount' : bigint,\n  'token1Amount' : bigint,\n  'tickLower' : bigint,\n}\nexport type Value = { 'Int' : bigint } |\n  { 'Nat' : bigint } |\n  { 'Blob' : Uint8Array | number[] } |\n  { 'Text' : string };\nexport interface WithdrawArgs {\n  'fee' : bigint,\n  'token' : string,\n  'amount' : bigint,\n}\nexport interface WithdrawToSubaccountArgs {\n  'fee' : bigint,\n  'token' : string,\n  'subaccount' : Uint8Array | number[],\n  'amount' : bigint,\n}\nexport interface _SERVICE {\n  'activeJobs' : ActorMethod<[], undefined>,\n  'addLimitOrder' : ActorMethod<[LimitOrderArgs], Result_2>,\n  'allTokenBalance' : ActorMethod<[bigint, bigint], Result_31>,\n  'approvePosition' : ActorMethod<[Principal, bigint], Result_2>,\n  'batchRefreshIncome' : ActorMethod<[Array<bigint>], Result_30>,\n  'checkOwnerOfUserPosition' : ActorMethod<[Principal, bigint], Result_2>,\n  'claim' : ActorMethod<[ClaimArgs], Result_29>,\n  'decreaseLiquidity' : ActorMethod<[DecreaseLiquidityArgs], Result_29>,\n  'deposit' : ActorMethod<[DepositArgs], Result>,\n  'depositAllAndMint' : ActorMethod<[DepositAndMintArgs], Result>,\n  'depositFrom' : ActorMethod<[DepositArgs], Result>,\n  'getAdmins' : ActorMethod<[], Array<Principal>>,\n  'getAvailabilityState' : ActorMethod<\n    [],\n    { 'whiteList' : Array<Principal>, 'available' : boolean }\n  >,\n  'getClaimLog' : ActorMethod<[], Array<string>>,\n  'getCycleInfo' : ActorMethod<[], Result_28>,\n  'getFeeGrowthGlobal' : ActorMethod<[], Result_27>,\n  'getInitArgs' : ActorMethod<[], Result_26>,\n  'getJobs' : ActorMethod<[], { 'jobs' : Array<JobInfo>, 'level' : Level }>,\n  'getLimitOrderAvailabilityState' : ActorMethod<[], Result_2>,\n  'getLimitOrderStack' : ActorMethod<[], Result_25>,\n  'getLimitOrders' : ActorMethod<[], Result_24>,\n  'getMistransferBalance' : ActorMethod<[Token], Result>,\n  'getPosition' : ActorMethod<[GetPositionArgs], Result_23>,\n  'getPositions' : ActorMethod<[bigint, bigint], Result_22>,\n  'getSortedUserLimitOrders' : ActorMethod<[Principal], Result_21>,\n  'getSwapRecordState' : ActorMethod<[], Result_20>,\n  'getTickBitmaps' : ActorMethod<[], Result_19>,\n  'getTickInfos' : ActorMethod<[bigint, bigint], Result_18>,\n  'getTicks' : ActorMethod<[bigint, bigint], Result_17>,\n  'getTokenAmountState' : ActorMethod<[], Result_16>,\n  'getTokenBalance' : ActorMethod<[], { 'token0' : bigint, 'token1' : bigint }>,\n  'getTokenMeta' : ActorMethod<\n    [],\n    {\n      'token0' : Array<[string, Value]>,\n      'token1' : Array<[string, Value]>,\n      'token0Fee' : [] | [bigint],\n      'token1Fee' : [] | [bigint],\n    }\n  >,\n  'getTransferLogs' : ActorMethod<[], Result_15>,\n  'getUserByPositionId' : ActorMethod<[bigint], Result_1>,\n  'getUserLimitOrders' : ActorMethod<[Principal], Result_14>,\n  'getUserPosition' : ActorMethod<[bigint], Result_13>,\n  'getUserPositionIds' : ActorMethod<[], Result_12>,\n  'getUserPositionIdsByPrincipal' : ActorMethod<[Principal], Result_11>,\n  'getUserPositionWithTokenAmount' : ActorMethod<[bigint, bigint], Result_10>,\n  'getUserPositions' : ActorMethod<[bigint, bigint], Result_9>,\n  'getUserPositionsByPrincipal' : ActorMethod<[Principal], Result_8>,\n  'getUserUnusedBalance' : ActorMethod<[Principal], Result_7>,\n  'getVersion' : ActorMethod<[], string>,\n  'icrc10_supported_standards' : ActorMethod<\n    [],\n    Array<{ 'url' : string, 'name' : string }>\n  >,\n  'icrc21_canister_call_consent_message' : ActorMethod<\n    [Icrc21ConsentMessageRequest],\n    Icrc21ConsentMessageResponse\n  >,\n  'icrc28_trusted_origins' : ActorMethod<[], Icrc28TrustedOriginsResponse>,\n  'increaseLiquidity' : ActorMethod<[IncreaseLiquidityArgs], Result>,\n  'init' : ActorMethod<[bigint, bigint, bigint], undefined>,\n  'metadata' : ActorMethod<[], Result_6>,\n  'mint' : ActorMethod<[MintArgs], Result>,\n  'quote' : ActorMethod<[SwapArgs], Result>,\n  'quoteForAll' : ActorMethod<[SwapArgs], Result>,\n  'refreshIncome' : ActorMethod<[bigint], Result_5>,\n  'removeErrorTransferLog' : ActorMethod<[bigint, boolean], undefined>,\n  'removeLimitOrder' : ActorMethod<[bigint], Result_2>,\n  'restartJobs' : ActorMethod<[Array<string>], undefined>,\n  'setAdmins' : ActorMethod<[Array<Principal>], undefined>,\n  'setAvailable' : ActorMethod<[boolean], undefined>,\n  'setIcrc28TrustedOrigins' : ActorMethod<[Array<string>], Result_4>,\n  'setLimitOrderAvailable' : ActorMethod<[boolean], undefined>,\n  'setWhiteList' : ActorMethod<[Array<Principal>], undefined>,\n  'stopJobs' : ActorMethod<[Array<string>], undefined>,\n  'sumTick' : ActorMethod<[], Result_3>,\n  'swap' : ActorMethod<[SwapArgs], Result>,\n  'transferPosition' : ActorMethod<[Principal, Principal, bigint], Result_2>,\n  'upgradeTokenStandard' : ActorMethod<[Principal], Result_1>,\n  'withdraw' : ActorMethod<[WithdrawArgs], Result>,\n  'withdrawMistransferBalance' : ActorMethod<[Token], Result>,\n  'withdrawToSubaccount' : ActorMethod<[WithdrawToSubaccountArgs], Result>,\n}\nexport const idlFactory = ({ IDL }) => {\n    const LimitOrderArgs = IDL.Record({\n      'positionId' : IDL.Nat,\n      'tickLimit' : IDL.Int,\n    });\n    const Error = IDL.Variant({\n      'CommonError' : IDL.Null,\n      'InternalError' : IDL.Text,\n      'UnsupportedToken' : IDL.Text,\n      'InsufficientFunds' : IDL.Null,\n    });\n    const Result_2 = IDL.Variant({ 'ok' : IDL.Bool, 'err' : Error });\n    const AccountBalance = IDL.Record({\n      'balance0' : IDL.Nat,\n      'balance1' : IDL.Nat,\n    });\n    const Page_5 = IDL.Record({\n      'content' : IDL.Vec(IDL.Tuple(IDL.Principal, AccountBalance)),\n      'offset' : IDL.Nat,\n      'limit' : IDL.Nat,\n      'totalElements' : IDL.Nat,\n    });\n    const Result_31 = IDL.Variant({ 'ok' : Page_5, 'err' : Error });\n    const Result_30 = IDL.Variant({\n      'ok' : IDL.Record({\n        'tokenIncome' : IDL.Vec(\n          IDL.Tuple(\n            IDL.Nat,\n            IDL.Record({ 'tokensOwed0' : IDL.Nat, 'tokensOwed1' : IDL.Nat }),\n          )\n        ),\n        'totalTokensOwed0' : IDL.Nat,\n        'totalTokensOwed1' : IDL.Nat,\n      }),\n      'err' : Error,\n    });\n    const ClaimArgs = IDL.Record({ 'positionId' : IDL.Nat });\n    const Result_29 = IDL.Variant({\n      'ok' : IDL.Record({ 'amount0' : IDL.Nat, 'amount1' : IDL.Nat }),\n      'err' : Error,\n    });\n    const DecreaseLiquidityArgs = IDL.Record({\n      'liquidity' : IDL.Text,\n      'positionId' : IDL.Nat,\n    });\n    const DepositArgs = IDL.Record({\n      'fee' : IDL.Nat,\n      'token' : IDL.Text,\n      'amount' : IDL.Nat,\n    });\n    const Result = IDL.Variant({ 'ok' : IDL.Nat, 'err' : Error });\n    const DepositAndMintArgs = IDL.Record({\n      'tickUpper' : IDL.Int,\n      'fee0' : IDL.Nat,\n      'fee1' : IDL.Nat,\n      'amount0' : IDL.Nat,\n      'amount1' : IDL.Nat,\n      'positionOwner' : IDL.Principal,\n      'amount0Desired' : IDL.Text,\n      'amount1Desired' : IDL.Text,\n      'tickLower' : IDL.Int,\n    });\n    const CycleInfo = IDL.Record({ 'balance' : IDL.Nat, 'available' : IDL.Nat });\n    const Result_28 = IDL.Variant({ 'ok' : CycleInfo, 'err' : Error });\n    const Result_27 = IDL.Variant({\n      'ok' : IDL.Record({\n        'feeGrowthGlobal1X128' : IDL.Nat,\n        'feeGrowthGlobal0X128' : IDL.Nat,\n      }),\n      'err' : Error,\n    });\n    const Token = IDL.Record({ 'address' : IDL.Text, 'standard' : IDL.Text });\n    const Result_26 = IDL.Variant({\n      'ok' : IDL.Record({\n        'infoCid' : IDL.Principal,\n        'trustedCanisterManagerCid' : IDL.Principal,\n        'token0' : Token,\n        'token1' : Token,\n        'feeReceiverCid' : IDL.Principal,\n      }),\n      'err' : Error,\n    });\n    const Time = IDL.Int;\n    const JobInfo = IDL.Record({\n      'interval' : IDL.Nat,\n      'name' : IDL.Text,\n      'lastRun' : Time,\n      'timerId' : IDL.Opt(IDL.Nat),\n    });\n    const Level = IDL.Variant({ 'Inactive' : IDL.Null, 'Active' : IDL.Null });\n    const LimitOrderType = IDL.Variant({\n      'Lower' : IDL.Null,\n      'Upper' : IDL.Null,\n    });\n    const LimitOrderKey = IDL.Record({\n      'timestamp' : IDL.Nat,\n      'tickLimit' : IDL.Int,\n    });\n    const LimitOrderValue = IDL.Record({\n      'userPositionId' : IDL.Nat,\n      'token0InAmount' : IDL.Nat,\n      'owner' : IDL.Principal,\n      'token1InAmount' : IDL.Nat,\n    });\n    const Result_25 = IDL.Variant({\n      'ok' : IDL.Vec(IDL.Tuple(LimitOrderType, LimitOrderKey, LimitOrderValue)),\n      'err' : Error,\n    });\n    const Result_24 = IDL.Variant({\n      'ok' : IDL.Record({\n        'lowerLimitOrders' : IDL.Vec(IDL.Tuple(LimitOrderKey, LimitOrderValue)),\n        'upperLimitOrders' : IDL.Vec(IDL.Tuple(LimitOrderKey, LimitOrderValue)),\n      }),\n      'err' : Error,\n    });\n    const GetPositionArgs = IDL.Record({\n      'tickUpper' : IDL.Int,\n      'tickLower' : IDL.Int,\n    });\n    const PositionInfo = IDL.Record({\n      'tokensOwed0' : IDL.Nat,\n      'tokensOwed1' : IDL.Nat,\n      'feeGrowthInside1LastX128' : IDL.Nat,\n      'liquidity' : IDL.Nat,\n      'feeGrowthInside0LastX128' : IDL.Nat,\n    });\n    const Result_23 = IDL.Variant({ 'ok' : PositionInfo, 'err' : Error });\n    const PositionInfoWithId = IDL.Record({\n      'id' : IDL.Text,\n      'tokensOwed0' : IDL.Nat,\n      'tokensOwed1' : IDL.Nat,\n      'feeGrowthInside1LastX128' : IDL.Nat,\n      'liquidity' : IDL.Nat,\n      'feeGrowthInside0LastX128' : IDL.Nat,\n    });\n    const Page_4 = IDL.Record({\n      'content' : IDL.Vec(PositionInfoWithId),\n      'offset' : IDL.Nat,\n      'limit' : IDL.Nat,\n      'totalElements' : IDL.Nat,\n    });\n    const Result_22 = IDL.Variant({ 'ok' : Page_4, 'err' : Error });\n    const Result_21 = IDL.Variant({\n      'ok' : IDL.Vec(\n        IDL.Record({\n          'userPositionId' : IDL.Nat,\n          'token0InAmount' : IDL.Nat,\n          'timestamp' : IDL.Nat,\n          'tickLimit' : IDL.Int,\n          'token1InAmount' : IDL.Nat,\n        })\n      ),\n      'err' : Error,\n    });\n    const TransactionType = IDL.Variant({\n      'decreaseLiquidity' : IDL.Null,\n      'limitOrder' : IDL.Record({\n        'token0InAmount' : IDL.Nat,\n        'positionId' : IDL.Nat,\n        'tickLimit' : IDL.Int,\n        'token1InAmount' : IDL.Nat,\n      }),\n      'claim' : IDL.Null,\n      'swap' : IDL.Null,\n      'addLiquidity' : IDL.Null,\n      'transferPosition' : IDL.Nat,\n      'increaseLiquidity' : IDL.Null,\n    });\n    const SwapRecordInfo = IDL.Record({\n      'to' : IDL.Text,\n      'feeAmount' : IDL.Int,\n      'action' : TransactionType,\n      'feeAmountTotal' : IDL.Int,\n      'token0Id' : IDL.Text,\n      'token1Id' : IDL.Text,\n      'token0AmountTotal' : IDL.Nat,\n      'liquidityTotal' : IDL.Nat,\n      'from' : IDL.Text,\n      'tick' : IDL.Int,\n      'feeTire' : IDL.Nat,\n      'recipient' : IDL.Text,\n      'token0ChangeAmount' : IDL.Nat,\n      'token1AmountTotal' : IDL.Nat,\n      'liquidityChange' : IDL.Nat,\n      'token1Standard' : IDL.Text,\n      'TVLToken0' : IDL.Int,\n      'TVLToken1' : IDL.Int,\n      'token0Fee' : IDL.Nat,\n      'token1Fee' : IDL.Nat,\n      'timestamp' : IDL.Int,\n      'token1ChangeAmount' : IDL.Nat,\n      'token0Standard' : IDL.Text,\n      'price' : IDL.Nat,\n      'poolId' : IDL.Text,\n    });\n    const PushError = IDL.Record({ 'time' : IDL.Int, 'message' : IDL.Text });\n    const Result_20 = IDL.Variant({\n      'ok' : IDL.Record({\n        'infoCid' : IDL.Text,\n        'records' : IDL.Vec(SwapRecordInfo),\n        'errors' : IDL.Vec(PushError),\n        'retryCount' : IDL.Nat,\n      }),\n      'err' : Error,\n    });\n    const Result_19 = IDL.Variant({\n      'ok' : IDL.Vec(IDL.Tuple(IDL.Int, IDL.Nat)),\n      'err' : Error,\n    });\n    const TickLiquidityInfo = IDL.Record({\n      'tickIndex' : IDL.Int,\n      'price0Decimal' : IDL.Nat,\n      'liquidityNet' : IDL.Int,\n      'price0' : IDL.Nat,\n      'price1' : IDL.Nat,\n      'liquidityGross' : IDL.Nat,\n      'price1Decimal' : IDL.Nat,\n    });\n    const Page_3 = IDL.Record({\n      'content' : IDL.Vec(TickLiquidityInfo),\n      'offset' : IDL.Nat,\n      'limit' : IDL.Nat,\n      'totalElements' : IDL.Nat,\n    });\n    const Result_18 = IDL.Variant({ 'ok' : Page_3, 'err' : Error });\n    const TickInfoWithId = IDL.Record({\n      'id' : IDL.Text,\n      'initialized' : IDL.Bool,\n      'feeGrowthOutside1X128' : IDL.Nat,\n      'secondsPerLiquidityOutsideX128' : IDL.Nat,\n      'liquidityNet' : IDL.Int,\n      'secondsOutside' : IDL.Nat,\n      'liquidityGross' : IDL.Nat,\n      'feeGrowthOutside0X128' : IDL.Nat,\n      'tickCumulativeOutside' : IDL.Int,\n    });\n    const Page_2 = IDL.Record({\n      'content' : IDL.Vec(TickInfoWithId),\n      'offset' : IDL.Nat,\n      'limit' : IDL.Nat,\n      'totalElements' : IDL.Nat,\n    });\n    const Result_17 = IDL.Variant({ 'ok' : Page_2, 'err' : Error });\n    const Result_16 = IDL.Variant({\n      'ok' : IDL.Record({\n        'swapFee0Repurchase' : IDL.Nat,\n        'token0Amount' : IDL.Nat,\n        'swapFeeReceiver' : IDL.Text,\n        'token1Amount' : IDL.Nat,\n        'swapFee1Repurchase' : IDL.Nat,\n      }),\n      'err' : Error,\n    });\n    const Value = IDL.Variant({\n      'Int' : IDL.Int,\n      'Nat' : IDL.Nat,\n      'Blob' : IDL.Vec(IDL.Nat8),\n      'Text' : IDL.Text,\n    });\n    const TransferLog = IDL.Record({\n      'to' : IDL.Principal,\n      'fee' : IDL.Nat,\n      'result' : IDL.Text,\n      'token' : Token,\n      'action' : IDL.Text,\n      'daysFrom19700101' : IDL.Nat,\n      'owner' : IDL.Principal,\n      'from' : IDL.Principal,\n      'fromSubaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n      'timestamp' : IDL.Nat,\n      'index' : IDL.Nat,\n      'amount' : IDL.Nat,\n      'errorMsg' : IDL.Text,\n      'toSubaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    });\n    const Result_15 = IDL.Variant({ 'ok' : IDL.Vec(TransferLog), 'err' : Error });\n    const Result_1 = IDL.Variant({ 'ok' : IDL.Text, 'err' : Error });\n    const Result_14 = IDL.Variant({\n      'ok' : IDL.Record({\n        'upperLimitOrdersIds' : IDL.Vec(\n          IDL.Record({ 'userPositionId' : IDL.Nat, 'timestamp' : IDL.Nat })\n        ),\n        'lowerLimitOrderIds' : IDL.Vec(\n          IDL.Record({ 'userPositionId' : IDL.Nat, 'timestamp' : IDL.Nat })\n        ),\n      }),\n      'err' : Error,\n    });\n    const UserPositionInfo = IDL.Record({\n      'tickUpper' : IDL.Int,\n      'tokensOwed0' : IDL.Nat,\n      'tokensOwed1' : IDL.Nat,\n      'feeGrowthInside1LastX128' : IDL.Nat,\n      'liquidity' : IDL.Nat,\n      'feeGrowthInside0LastX128' : IDL.Nat,\n      'tickLower' : IDL.Int,\n    });\n    const Result_13 = IDL.Variant({ 'ok' : UserPositionInfo, 'err' : Error });\n    const Result_12 = IDL.Variant({\n      'ok' : IDL.Vec(IDL.Tuple(IDL.Text, IDL.Vec(IDL.Nat))),\n      'err' : Error,\n    });\n    const Result_11 = IDL.Variant({ 'ok' : IDL.Vec(IDL.Nat), 'err' : Error });\n    const UserPositionInfoWithTokenAmount = IDL.Record({\n      'id' : IDL.Nat,\n      'tickUpper' : IDL.Int,\n      'tokensOwed0' : IDL.Nat,\n      'tokensOwed1' : IDL.Nat,\n      'feeGrowthInside1LastX128' : IDL.Nat,\n      'liquidity' : IDL.Nat,\n      'feeGrowthInside0LastX128' : IDL.Nat,\n      'token0Amount' : IDL.Nat,\n      'token1Amount' : IDL.Nat,\n      'tickLower' : IDL.Int,\n    });\n    const Page_1 = IDL.Record({\n      'content' : IDL.Vec(UserPositionInfoWithTokenAmount),\n      'offset' : IDL.Nat,\n      'limit' : IDL.Nat,\n      'totalElements' : IDL.Nat,\n    });\n    const Result_10 = IDL.Variant({ 'ok' : Page_1, 'err' : Error });\n    const UserPositionInfoWithId = IDL.Record({\n      'id' : IDL.Nat,\n      'tickUpper' : IDL.Int,\n      'tokensOwed0' : IDL.Nat,\n      'tokensOwed1' : IDL.Nat,\n      'feeGrowthInside1LastX128' : IDL.Nat,\n      'liquidity' : IDL.Nat,\n      'feeGrowthInside0LastX128' : IDL.Nat,\n      'tickLower' : IDL.Int,\n    });\n    const Page = IDL.Record({\n      'content' : IDL.Vec(UserPositionInfoWithId),\n      'offset' : IDL.Nat,\n      'limit' : IDL.Nat,\n      'totalElements' : IDL.Nat,\n    });\n    const Result_9 = IDL.Variant({ 'ok' : Page, 'err' : Error });\n    const Result_8 = IDL.Variant({\n      'ok' : IDL.Vec(UserPositionInfoWithId),\n      'err' : Error,\n    });\n    const Result_7 = IDL.Variant({\n      'ok' : IDL.Record({ 'balance0' : IDL.Nat, 'balance1' : IDL.Nat }),\n      'err' : Error,\n    });\n    const Icrc21ConsentMessageMetadata = IDL.Record({\n      'utc_offset_minutes' : IDL.Opt(IDL.Int16),\n      'language' : IDL.Text,\n    });\n    const Icrc21ConsentMessageSpec = IDL.Record({\n      'metadata' : Icrc21ConsentMessageMetadata,\n      'device_spec' : IDL.Opt(\n        IDL.Variant({\n          'GenericDisplay' : IDL.Null,\n          'LineDisplay' : IDL.Record({\n            'characters_per_line' : IDL.Nat16,\n            'lines_per_page' : IDL.Nat16,\n          }),\n        })\n      ),\n    });\n    const Icrc21ConsentMessageRequest = IDL.Record({\n      'arg' : IDL.Vec(IDL.Nat8),\n      'method' : IDL.Text,\n      'user_preferences' : Icrc21ConsentMessageSpec,\n    });\n    const Icrc21ConsentMessage = IDL.Variant({\n      'LineDisplayMessage' : IDL.Record({\n        'pages' : IDL.Vec(IDL.Record({ 'lines' : IDL.Vec(IDL.Text) })),\n      }),\n      'GenericDisplayMessage' : IDL.Text,\n    });\n    const Icrc21ConsentInfo = IDL.Record({\n      'metadata' : Icrc21ConsentMessageMetadata,\n      'consent_message' : Icrc21ConsentMessage,\n    });\n    const Icrc21ErrorInfo = IDL.Record({ 'description' : IDL.Text });\n    const Icrc21Error = IDL.Variant({\n      'GenericError' : IDL.Record({\n        'description' : IDL.Text,\n        'error_code' : IDL.Nat,\n      }),\n      'InsufficientPayment' : Icrc21ErrorInfo,\n      'UnsupportedCanisterCall' : Icrc21ErrorInfo,\n      'ConsentMessageUnavailable' : Icrc21ErrorInfo,\n    });\n    const Icrc21ConsentMessageResponse = IDL.Variant({\n      'Ok' : Icrc21ConsentInfo,\n      'Err' : Icrc21Error,\n    });\n    const Icrc28TrustedOriginsResponse = IDL.Record({\n      'trusted_origins' : IDL.Vec(IDL.Text),\n    });\n    const IncreaseLiquidityArgs = IDL.Record({\n      'positionId' : IDL.Nat,\n      'amount0Desired' : IDL.Text,\n      'amount1Desired' : IDL.Text,\n    });\n    const PoolMetadata = IDL.Record({\n      'fee' : IDL.Nat,\n      'key' : IDL.Text,\n      'sqrtPriceX96' : IDL.Nat,\n      'tick' : IDL.Int,\n      'liquidity' : IDL.Nat,\n      'token0' : Token,\n      'token1' : Token,\n      'maxLiquidityPerTick' : IDL.Nat,\n      'nextPositionId' : IDL.Nat,\n    });\n    const Result_6 = IDL.Variant({ 'ok' : PoolMetadata, 'err' : Error });\n    const MintArgs = IDL.Record({\n      'fee' : IDL.Nat,\n      'tickUpper' : IDL.Int,\n      'token0' : IDL.Text,\n      'token1' : IDL.Text,\n      'amount0Desired' : IDL.Text,\n      'amount1Desired' : IDL.Text,\n      'tickLower' : IDL.Int,\n    });\n    const SwapArgs = IDL.Record({\n      'amountIn' : IDL.Text,\n      'zeroForOne' : IDL.Bool,\n      'amountOutMinimum' : IDL.Text,\n    });\n    const Result_5 = IDL.Variant({\n      'ok' : IDL.Record({ 'tokensOwed0' : IDL.Nat, 'tokensOwed1' : IDL.Nat }),\n      'err' : Error,\n    });\n    const Result_4 = IDL.Variant({ 'ok' : IDL.Bool, 'err' : IDL.Null });\n    const Result_3 = IDL.Variant({ 'ok' : IDL.Int, 'err' : Error });\n    const WithdrawArgs = IDL.Record({\n      'fee' : IDL.Nat,\n      'token' : IDL.Text,\n      'amount' : IDL.Nat,\n    });\n    const WithdrawToSubaccountArgs = IDL.Record({\n      'fee' : IDL.Nat,\n      'token' : IDL.Text,\n      'subaccount' : IDL.Vec(IDL.Nat8),\n      'amount' : IDL.Nat,\n    });\n    return IDL.Service({\n      'activeJobs' : IDL.Func([], [], []),\n      'addLimitOrder' : IDL.Func([LimitOrderArgs], [Result_2], []),\n      'allTokenBalance' : IDL.Func([IDL.Nat, IDL.Nat], [Result_31], ['query']),\n      'approvePosition' : IDL.Func([IDL.Principal, IDL.Nat], [Result_2], []),\n      'batchRefreshIncome' : IDL.Func([IDL.Vec(IDL.Nat)], [Result_30], ['query']),\n      'checkOwnerOfUserPosition' : IDL.Func(\n          [IDL.Principal, IDL.Nat],\n          [Result_2],\n          ['query'],\n        ),\n      'claim' : IDL.Func([ClaimArgs], [Result_29], []),\n      'decreaseLiquidity' : IDL.Func([DecreaseLiquidityArgs], [Result_29], []),\n      'deposit' : IDL.Func([DepositArgs], [Result], []),\n      'depositAllAndMint' : IDL.Func([DepositAndMintArgs], [Result], []),\n      'depositFrom' : IDL.Func([DepositArgs], [Result], []),\n      'getAdmins' : IDL.Func([], [IDL.Vec(IDL.Principal)], ['query']),\n      'getAvailabilityState' : IDL.Func(\n          [],\n          [\n            IDL.Record({\n              'whiteList' : IDL.Vec(IDL.Principal),\n              'available' : IDL.Bool,\n            }),\n          ],\n          ['query'],\n        ),\n      'getClaimLog' : IDL.Func([], [IDL.Vec(IDL.Text)], ['query']),\n      'getCycleInfo' : IDL.Func([], [Result_28], []),\n      'getFeeGrowthGlobal' : IDL.Func([], [Result_27], ['query']),\n      'getInitArgs' : IDL.Func([], [Result_26], ['query']),\n      'getJobs' : IDL.Func(\n          [],\n          [IDL.Record({ 'jobs' : IDL.Vec(JobInfo), 'level' : Level })],\n          ['query'],\n        ),\n      'getLimitOrderAvailabilityState' : IDL.Func([], [Result_2], ['query']),\n      'getLimitOrderStack' : IDL.Func([], [Result_25], ['query']),\n      'getLimitOrders' : IDL.Func([], [Result_24], ['query']),\n      'getMistransferBalance' : IDL.Func([Token], [Result], []),\n      'getPosition' : IDL.Func([GetPositionArgs], [Result_23], ['query']),\n      'getPositions' : IDL.Func([IDL.Nat, IDL.Nat], [Result_22], ['query']),\n      'getSortedUserLimitOrders' : IDL.Func(\n          [IDL.Principal],\n          [Result_21],\n          ['query'],\n        ),\n      'getSwapRecordState' : IDL.Func([], [Result_20], ['query']),\n      'getTickBitmaps' : IDL.Func([], [Result_19], ['query']),\n      'getTickInfos' : IDL.Func([IDL.Nat, IDL.Nat], [Result_18], ['query']),\n      'getTicks' : IDL.Func([IDL.Nat, IDL.Nat], [Result_17], ['query']),\n      'getTokenAmountState' : IDL.Func([], [Result_16], ['query']),\n      'getTokenBalance' : IDL.Func(\n          [],\n          [IDL.Record({ 'token0' : IDL.Nat, 'token1' : IDL.Nat })],\n          [],\n        ),\n      'getTokenMeta' : IDL.Func(\n          [],\n          [\n            IDL.Record({\n              'token0' : IDL.Vec(IDL.Tuple(IDL.Text, Value)),\n              'token1' : IDL.Vec(IDL.Tuple(IDL.Text, Value)),\n              'token0Fee' : IDL.Opt(IDL.Nat),\n              'token1Fee' : IDL.Opt(IDL.Nat),\n            }),\n          ],\n          [],\n        ),\n      'getTransferLogs' : IDL.Func([], [Result_15], ['query']),\n      'getUserByPositionId' : IDL.Func([IDL.Nat], [Result_1], ['query']),\n      'getUserLimitOrders' : IDL.Func([IDL.Principal], [Result_14], ['query']),\n      'getUserPosition' : IDL.Func([IDL.Nat], [Result_13], ['query']),\n      'getUserPositionIds' : IDL.Func([], [Result_12], ['query']),\n      'getUserPositionIdsByPrincipal' : IDL.Func(\n          [IDL.Principal],\n          [Result_11],\n          ['query'],\n        ),\n      'getUserPositionWithTokenAmount' : IDL.Func(\n          [IDL.Nat, IDL.Nat],\n          [Result_10],\n          ['query'],\n        ),\n      'getUserPositions' : IDL.Func([IDL.Nat, IDL.Nat], [Result_9], ['query']),\n      'getUserPositionsByPrincipal' : IDL.Func(\n          [IDL.Principal],\n          [Result_8],\n          ['query'],\n        ),\n      'getUserUnusedBalance' : IDL.Func([IDL.Principal], [Result_7], ['query']),\n      'getVersion' : IDL.Func([], [IDL.Text], ['query']),\n      'icrc10_supported_standards' : IDL.Func(\n          [],\n          [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text }))],\n          ['query'],\n        ),\n      'icrc21_canister_call_consent_message' : IDL.Func(\n          [Icrc21ConsentMessageRequest],\n          [Icrc21ConsentMessageResponse],\n          [],\n        ),\n      'icrc28_trusted_origins' : IDL.Func([], [Icrc28TrustedOriginsResponse], []),\n      'increaseLiquidity' : IDL.Func([IncreaseLiquidityArgs], [Result], []),\n      'init' : IDL.Func([IDL.Nat, IDL.Int, IDL.Nat], [], []),\n      'metadata' : IDL.Func([], [Result_6], ['query']),\n      'mint' : IDL.Func([MintArgs], [Result], []),\n      'quote' : IDL.Func([SwapArgs], [Result], ['query']),\n      'quoteForAll' : IDL.Func([SwapArgs], [Result], ['query']),\n      'refreshIncome' : IDL.Func([IDL.Nat], [Result_5], ['query']),\n      'removeErrorTransferLog' : IDL.Func([IDL.Nat, IDL.Bool], [], []),\n      'removeLimitOrder' : IDL.Func([IDL.Nat], [Result_2], []),\n      'restartJobs' : IDL.Func([IDL.Vec(IDL.Text)], [], []),\n      'setAdmins' : IDL.Func([IDL.Vec(IDL.Principal)], [], []),\n      'setAvailable' : IDL.Func([IDL.Bool], [], []),\n      'setIcrc28TrustedOrigins' : IDL.Func([IDL.Vec(IDL.Text)], [Result_4], []),\n      'setLimitOrderAvailable' : IDL.Func([IDL.Bool], [], []),\n      'setWhiteList' : IDL.Func([IDL.Vec(IDL.Principal)], [], []),\n      'stopJobs' : IDL.Func([IDL.Vec(IDL.Text)], [], []),\n      'sumTick' : IDL.Func([], [Result_3], ['query']),\n      'swap' : IDL.Func([SwapArgs], [Result], []),\n      'transferPosition' : IDL.Func(\n          [IDL.Principal, IDL.Principal, IDL.Nat],\n          [Result_2],\n          [],\n        ),\n      'upgradeTokenStandard' : IDL.Func([IDL.Principal], [Result_1], []),\n      'withdraw' : IDL.Func([WithdrawArgs], [Result], []),\n      'withdrawMistransferBalance' : IDL.Func([Token], [Result], []),\n      'withdrawToSubaccount' : IDL.Func([WithdrawToSubaccountArgs], [Result], []),\n    });\n  };\n  export const init = ({ IDL }) => { return []; };\n\n","import {\n    type Action,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n  } from \"@elizaos/core\";\n  \n  import { icpWalletProvider } from \"../providers/wallet\";\n  import { idlFactory as icrcIdlFactory } from \"../canisters/icrc/index.did\";\n  import { Principal } from \"@dfinity/principal\";\n  \n  interface TokenInfo {\n    canisterId: string;\n    name: string;\n    symbol: string;\n    decimals: number;\n  }\n  \n  interface TokenBalance extends TokenInfo {\n    balance: number;\n    raw: bigint;\n    error?: boolean;  // Make error optional\n  }\n  \n  const fetchTop10Tokens = async (): Promise<TokenInfo[]> => {\n    // Hardcoded list of popular ICP tokens\n    return [\n      {\n        canisterId: \"ryjl3-tyaaa-aaaaa-aaaba-cai\",\n        name: \"Internet Computer\",\n        symbol: \"ICP\",\n        decimals: 8\n      },\n      {\n        canisterId: \"mxzaz-hqaaa-aaaar-qaada-cai\",\n        name: \"ckBTC\",\n        symbol: \"ckBTC\",\n        decimals: 8\n      },\n      {\n        canisterId: \"2ouva-viaaa-aaaaq-aaamq-cai\",\n        name: \"OpenChat\",\n        symbol: \"CHAT\",\n        decimals: 8\n      },\n      {\n        canisterId: \"cngnf-vqaaa-aaaar-qag4q-cai\",\n        name: \"ckUSDT\",\n        symbol: \"ckUSDT\",\n        decimals: 8\n      }\n    ];\n  };\n  \n  const getTokenBalance = async (\n    creator: any,\n    canisterId: string,\n    principal: Principal,\n    decimals: number\n  ): Promise<{ balance: number; raw: bigint }> => {\n    const tokenActor: any = await creator(icrcIdlFactory, canisterId);\n    \n    const balance = await tokenActor.icrc1_balance_of({\n      owner: principal,\n      subaccount: []\n    });\n  \n    return {\n      balance: Number(balance) / Math.pow(10, decimals),\n      raw: balance\n    };\n  };\n  \n  export const checkBalancesAction: Action = {\n    name: \"CHECK_BALANCE\",\n    description: \"Check balances of top 10 tokens on KongSwap\",\n    similes: [\"CHECK_BALANCE\", \"BALANCE\", \"BALANCES\", \"CHECK_BALANCES\", \"SHOW_BALANCE\", \"SHOW_BALANCES\"],\n  \n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n      const messageText = (\n        typeof message.content === \"string\"\n          ? message.content\n          : message.content.text || \"\"\n      ).toLowerCase();\n  \n      const balancePatterns = [\n        /check.*balance/i,\n        /show.*balance/i,\n        /my.*balance/i,\n        /balance.*(check|show)/i,\n        /what.*balance/i\n      ];\n  \n      return balancePatterns.some(pattern => pattern.test(messageText));\n    },\n  \n    handler: async (\n      runtime: IAgentRuntime,\n      message: Memory,\n      state: State | undefined,\n      _options: { [key: string]: unknown } | undefined,\n      callback?: HandlerCallback\n    ): Promise<void> => {\n      try {\n        console.log(\"Starting balance check...\");\n        \n        if (!state) {\n          state = await runtime.composeState(message);\n        }\n  \n        // Initial feedback\n        callback?.({\n          text: \"🔍 Checking your ICP balances...\",\n          action: \"CHECK_BALANCE\",\n          type: \"processing\"\n        });\n  \n        const walletResponse = await icpWalletProvider.get(runtime, message, state);\n  \n        if (!walletResponse.wallet || !walletResponse.isAuthenticated) {\n          throw new Error(`Wallet initialization failed: ${walletResponse.error || 'Unknown error'}`);\n        }\n  \n        // Get user's principal\n        const principal = await walletResponse.wallet.getPrincipal();\n  \n        // Fetch top 10 tokens\n        callback?.({\n          text: \"📊 Getting top token list from KongSwap...\",\n          action: \"CHECK_BALANCE\",\n          type: \"processing\"\n        });\n  \n        const tokens = await fetchTop10Tokens();\n  \n        // Get balances for each token\n        callback?.({\n          text: \"💰 Checking balances for each token...\",\n          action: \"CHECK_BALANCE\",\n          type: \"processing\"\n        });\n  \n        const balances = await Promise.all(\n          tokens.map(async (token): Promise<TokenBalance> => {\n            try {\n              const balance = await getTokenBalance(\n                walletResponse.createActor,\n                token.canisterId,\n                principal,\n                token.decimals\n              );\n              return {\n                ...token,\n                ...balance\n              };\n            } catch (error) {\n              console.error(`Error fetching balance for ${token.symbol}:`, error);\n              return {\n                ...token,\n                balance: 0,\n                raw: BigInt(0),\n                error: true\n              };\n            }\n          })\n        );\n  \n        // Format response\n        const balanceText = balances\n          .map(token => {\n            \n            const balanceStr = token.error \n              ? \"Error fetching balance\"\n              : `${token.balance.toFixed(4)} ${token.symbol}`;\n            return `${token.name} (${token.symbol}): ${balanceStr}`;\n          })\n          .join('\\n');\n  \n        callback?.({\n          text:  `Principal address: ${principal.toText()}` +\n          `\\n✅ Your token balances:\\n${balanceText}`,\n          action: \"CHECK_BALANCE\",\n          type: \"success\"\n        });\n  \n      } catch (error) {\n        console.error(\"Balance check error:\", error);\n        callback?.({\n          text: `❌ Failed to check balances: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n          action: \"CHECK_BALANCE\",\n          type: \"error\"\n        });\n      }\n    },\n  \n    examples: [\n      [\n        {\n          user: \"{{user1}}\",\n          content: {\n            text: \"What are my token balances?\",\n            action: \"CHECK_BALANCE\",\n          },\n        },\n        {\n          user: \"{{user2}}\",\n          content: {\n            text: \"🔍 Fetching your token balances...\",\n            action: \"CHECK_BALANCE\",\n          },\n        },\n      ],\n      [\n        {\n          user: \"{{user1}}\",\n          content: {\n            text: \"Show me my balances\",\n            action: \"CHECK_BALANCE\",\n          },\n        },\n        {\n          user: \"{{user2}}\",\n          content: {\n            text: \"🔍 Fetching your token balances...\",\n            action: \"CHECK_BALANCE\",\n          },\n        },\n      ],\n    ],\n  };","import {\n  type Action,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  ModelClass,\n  composeContext,\n  generateObjectDeprecated\n} from \"@elizaos/core\";\nimport { buyTokenTemplate } from \"./prompts/token\";\nimport { getTokenByNameOrSymbol } from \"../utils/ic\";\nimport { icpWalletProvider } from \"../providers/wallet\";\nimport { KONG_SWAP_TOKEN_API_HOST, STRIPE_API_KEY } from \"../constants/apis\";\nimport Stripe from 'stripe';\nimport { v4 as uuidv4 } from 'uuid';\nimport { idlFactory as icrcIdlFactory } from \"../canisters/icrc/index.did\";\nimport { Principal } from \"@dfinity/principal\";\nimport { CANISTER_IDS } from \"../constants/canisters\";\n\nconst stripe = new Stripe(STRIPE_API_KEY, {\n  apiVersion: '2025-03-31.basil'\n});\n\n\nconst stripeClient = new Stripe(STRIPE_API_KEY);\n\ninterface BuyTokenParams {\n  tokenSymbol: string;\n  amount: number;\n  destinationAddress?: string;\n}\n\nconst validateBuyParams = (response: any) => {\n  console.log(\"response---------------\", response);\n\n  if (!response.tokenSymbol) {\n    throw new Error(\"Please specify which token you want to buy\");\n  }\n\n  if (!response.amount || isNaN(Number(response.amount))) {\n    throw new Error(\"Please specify a valid amount to buy\");\n  }\n};\n\nconst createStripePaymentLink = async (params: {\n  tokenSymbol: string,\n  tokenAmount: number,\n  usdAmount: number,\n  destinationAddress: string,\n  destinationCanisterId: string\n}) => {\n  try {\n\n    //first create a stripe product\n    const product = await stripeClient.products.create({\n      name: `Purchase ${params.tokenAmount} ${params.tokenSymbol}`,\n      description: `Purchase ${params.tokenAmount} ${params.tokenSymbol} tokens worth ${params.usdAmount} USD`,\n      metadata: {\n        tokenSymbol: params.tokenSymbol,\n        tokenAmount: params.tokenAmount.toString(),\n        destinationAddress: params.destinationAddress,\n      },\n    });\n\n    console.log(\"product\", product);\n\n    //create a stripe price\n    const price = await stripeClient.prices.create({\n      product: product.id,\n      unit_amount: Math.round(params.usdAmount * 100),\n      currency: 'usd',\n    });\n\n    let paymentLinkId = uuidv4();\n    //create a payment link\n    const paymentLink = await stripeClient.paymentLinks.create({\n      line_items: [{\n        price: price.id,\n        quantity: 1,\n      }],\n      metadata: {\n        tokenSymbol: params.tokenSymbol,\n        tokenAmount: params.tokenAmount.toString(),\n        usdAmount: params.usdAmount,\n        destinationCanisterId: params.destinationCanisterId,\n        destinationAddress: params.destinationAddress,\n        paymentLinkId: paymentLinkId,  \n      },\n    });\n\n    return {\n      paymentLinkUrl: paymentLink.url,\n      paymentLinkId: paymentLinkId,\n    };\n  } catch (error) {\n    console.error('Error creating Stripe session:', error);\n    throw error;\n  }\n};\n\n\n// Add function to check CKUSDT balance\nconst checkCKUSDTBalance = async (createActor: any): Promise<number> => {\n  try {\n    const ckusdtActor: any = await createActor(icrcIdlFactory, CANISTER_IDS.CKUSDT);\n    \n    const [balance, decimals] = await Promise.all([\n      ckusdtActor.icrc1_balance_of({\n        owner: Principal.fromText(CANISTER_IDS.ESCROW_ADDRESS),\n        subaccount: []\n      }),\n      ckusdtActor.icrc1_decimals()\n    ]);\n\n\n\n    console.log(\"balance usdddddd--------\", balance);\n\n    // Convert from e8s to CKUSDT\n    return Number(balance) / Math.pow(10, decimals);\n  } catch (error) {\n    console.error(\"Error checking CKUSDT balance:\", error);\n    throw error;\n  }\n};\n\nexport const buyTokenAction: Action = {\n  name: \"BUY_TOKEN\",\n  description: \"Buy tokens using credit card through Stripe\",\n  similes: [\"BUY\", \"PURCHASE\", \"GET\"],\n\n  validate: async (runtime: IAgentRuntime, message: Memory) => {\n    const messageText = (\n      typeof message.content === \"string\"\n        ? message.content\n        : message.content.text || \"\"\n    ).toLowerCase();\n\n    const buyKeywords = [\"buy\", \"purchase\", \"get\"];\n    return buyKeywords.some(keyword => messageText.includes(keyword));\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State | undefined,\n    _options: { [key: string]: unknown } | undefined,\n    callback?: HandlerCallback\n  ): Promise<void> => {\n    try {\n      if (!state) {\n        state = await runtime.composeState(message);\n      }\n\n      const buyTokenContext = composeContext({\n        state,\n        template: buyTokenTemplate,\n      });\n\n      const response = await generateObjectDeprecated({\n        runtime,\n        context: buyTokenContext,\n        modelClass: ModelClass.LARGE,\n      });\n\n      validateBuyParams(response);\n\n      const walletResponse = await icpWalletProvider.get(runtime, message, state);\n      if (!walletResponse.wallet || !walletResponse.createActor) {\n        throw new Error(\"Failed to initialize wallet\");\n      }\n\n      const destinationAddress = await walletResponse.wallet.getPrincipal();\n\n      // Get token info and calculate USD amount\n      const tokenInfo = await getTokenByNameOrSymbol(response.tokenSymbol);\n      if (!tokenInfo) {\n        throw new Error(`Token ${response.tokenSymbol} not found`);\n      }\n\n      const tokenPrice = await fetch(`${KONG_SWAP_TOKEN_API_HOST}/${tokenInfo.canisterId}`);\n      const priceData = await tokenPrice.json();\n      const price = Number(priceData.metrics?.price) || 0;\n      const amount = Number(response.amount) || 0;\n      const usdAmount = price * amount;\n\n      // Check CKUSDT balance before proceeding\n      const ckusdtBalance = await checkCKUSDTBalance(walletResponse.createActor);\n      \n      console.log(\"ckusdtBalance--------\", ckusdtBalance, usdAmount,response.amount);\n      if (ckusdtBalance < usdAmount) {\n        callback?.({\n          text: `❌ The tokens you are trying to buy are more than the balance in the swap escrow.\\n\\n` +\n                `Requested amount: $${usdAmount.toFixed(2)} USD\\n` +\n                `Available balance: $${ckusdtBalance.toFixed(2)} USD\\n\\n` +\n                `Please try a smaller amount to complete the purchase.`,\n          action: \"BUY_TOKEN\",\n          type: \"error\"\n        });\n        return;\n      }\n\n      console.log(\"tokenInfo--------\", tokenInfo);\n\n      console.log(\"Price calculation:\", { price, amount, usdAmount });\n\n      callback?.({\n        text: `💳 Creating payment link for ${response.amount} ${response.tokenSymbol}...\\n` +\n              `Total: $${usdAmount.toFixed(2)} USD`,\n        action: \"BUY_TOKEN\",\n        type: \"processing\"\n      });\n\n      // Create Stripe payment link\n      const paymentLink = await createStripePaymentLink({\n        tokenSymbol: response.tokenSymbol,\n        tokenAmount: Number(response.amount),\n        usdAmount: usdAmount,\n        destinationAddress: destinationAddress.toString(),\n        destinationCanisterId: tokenInfo.canisterId\n      });\n\n      callback?.({\n        text: `✅ Payment link created!\\n\\n` +\n              `Amount: ${response.amount} ${response.tokenSymbol}\\n` +\n              `Total: $${usdAmount.toFixed(2)} USD\\n` +\n              `Delivery Address: ${destinationAddress.toString()}\\n\\n` +\n              `Payment Link: ${paymentLink.paymentLinkUrl}\\n` +\n              `Payment Link ID: ${paymentLink.paymentLinkId}\\n\\n` +\n              `Once payment is completed, tokens will be automatically sent to your wallet.`,\n        action: \"BUY_TOKEN\",\n        type: \"success\"\n      });\n\n    } catch (error) {\n      console.error(\"Buy token error:\", error);\n      callback?.({\n        text: `❌ Failed to create payment: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n        action: \"BUY_TOKEN\",\n        type: \"error\"\n      });\n    }\n  },\n\n  examples: [\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"I want to buy 100 ICP\",\n          action: \"BUY_TOKEN\",\n        },\n      },\n      {\n        user: \"{{user2}}\",\n        content: {\n          text: \"Creating payment link for 100 ICP...\",\n          action: \"BUY_TOKEN\",\n        },\n      },\n    ],\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"How can I purchase CHAT tokens?\",\n          action: \"BUY_TOKEN\",\n        },\n      },\n      {\n        user: \"{{user2}}\",\n        content: {\n          text: \"Please specify how many CHAT tokens you'd like to buy\",\n        },\n      },\n    ],\n  ],\n}; ","import type { Principal } from '@dfinity/principal';\nimport type { ActorMethod } from '@dfinity/agent';\nimport type { IDL } from '@dfinity/candid';\n\nexport interface Transaction {\n  'fromAmount' : [] | [string],\n  'destinationAddress' : string,\n  'usdAmount' : string,\n  'isPaid' : boolean,\n  'tokenAmount' : string,\n  'error' : [] | [string],\n  'tokenSymbol' : string,\n  'swapTxId' : [] | [string],\n  'destinationCanisterId' : string,\n  'price' : [] | [string],\n  'toAmount' : [] | [string],\n  'paymentLinkId' : string,\n  'slippage' : [] | [string],\n}\nexport interface _SERVICE {\n  'checkPaymentStatus' : ActorMethod<[string], boolean>,\n  'getAllTransactions' : ActorMethod<[], Array<[string, Transaction]>>,\n  'getTransaction' : ActorMethod<[string], [] | [Transaction]>,\n  'storeTransaction' : ActorMethod<[Transaction], boolean>,\n  'updateTransaction' : ActorMethod<[string, Transaction], boolean>,\n}\n\n\nexport const idlFactory = ({ IDL }) => {\n    const Transaction = IDL.Record({\n      'fromAmount' : IDL.Opt(IDL.Text),\n      'destinationAddress' : IDL.Text,\n      'usdAmount' : IDL.Text,\n      'isPaid' : IDL.Bool,\n      'tokenAmount' : IDL.Text,\n      'error' : IDL.Opt(IDL.Text),\n      'tokenSymbol' : IDL.Text,\n      'swapTxId' : IDL.Opt(IDL.Text),\n      'destinationCanisterId' : IDL.Text,\n      'price' : IDL.Opt(IDL.Text),\n      'toAmount' : IDL.Opt(IDL.Text),\n      'paymentLinkId' : IDL.Text,\n      'slippage' : IDL.Opt(IDL.Text),\n    });\n    return IDL.Service({\n      'checkPaymentStatus' : IDL.Func([IDL.Text], [IDL.Bool], []),\n      'getAllTransactions' : IDL.Func(\n          [],\n          [IDL.Vec(IDL.Tuple(IDL.Text, Transaction))],\n          ['query'],\n        ),\n      'getTransaction' : IDL.Func([IDL.Text], [IDL.Opt(Transaction)], ['query']),\n      'storeTransaction' : IDL.Func([Transaction], [IDL.Bool], []),\n      'updateTransaction' : IDL.Func([IDL.Text, Transaction], [IDL.Bool], []),\n    });\n  };\n  export const init = ({ IDL }) => { return []; };\n","import {\n  type Action,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  ModelClass,\n  composeContext,\n  generateObjectDeprecated,\n} from \"@elizaos/core\";\nimport { icpWalletProvider } from \"../providers/wallet\";\nimport { CANISTER_IDS } from \"../constants/canisters\";\nimport {\n  idlFactory as storageIdlFactory,\n  Transaction,\n} from \"../canisters/storage/storage.did\";\n\ninterface PaymentStatus {\n  status: \"pending\" | \"completed\" | \"failed\";\n  paymentId: string;\n  tokenAmount: number;\n  tokenSymbol: string;\n  usdAmount: number;\n  destinationAddress: string;\n  timestamp: number;\n  error?: string;\n}\n\n// Dummy API function - replace with real API call later\nconst checkPaymentStatus = async (\n  paymentId: string,\n  createActor: any\n): Promise<Transaction> => {\n  const storageCanister = await createActor(\n    storageIdlFactory,\n    CANISTER_IDS.STORAGE_CANISTER\n  );\n\n  //get the details of the payment\n  const paymentDetails = await storageCanister.getTransaction(paymentId);\n\n  if (paymentDetails.length === 0) {\n    return {\n      fromAmount: [],\n      destinationAddress: \"\",\n      usdAmount: \"\",\n      isPaid: false,\n      tokenAmount: \"\",\n      error: [],\n      tokenSymbol: \"\",\n      swapTxId: [],\n      destinationCanisterId: \"\",\n      price: [],\n      toAmount: [],\n      paymentLinkId: \"\",\n      slippage: [],\n    };\n  }\n\n  const paymentDetail: Transaction = paymentDetails[0];\n\n  console.log(\"Payment details:\", paymentDetail);\n\n  return paymentDetail;\n};\n\nexport const checkPaymentAction: Action = {\n  name: \"CHECK_PAYMENT\",\n  description: \"Check the status of a crypto purchase payment\",\n  similes: [\"PAYMENT_STATUS\", \"CHECK_PAYMENT\"],\n\n  validate: async (runtime: IAgentRuntime, message: Memory) => {\n    const messageText = (\n      typeof message.content === \"string\"\n        ? message.content\n        : message.content.text || \"\"\n    ).toLowerCase();\n\n    const statusKeywords = [\n      \"payment status\",\n      \"check payment\",\n      \"payment id\",\n      \"check status\",\n    ];\n    return statusKeywords.some((keyword) => messageText.includes(keyword));\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State | undefined,\n    _options: { [key: string]: unknown } | undefined,\n    callback?: HandlerCallback\n  ): Promise<void> => {\n    try {\n      // Extract payment ID from message\n      const messageText =\n        typeof message.content === \"string\"\n          ? message.content\n          : message.content.text || \"\";\n\n      const paymentIdMatch = messageText.match(/[a-zA-Z0-9-]{36}/);\n      if (!paymentIdMatch) {\n        throw new Error(\"Please provide a valid payment ID to check status\");\n      }\n\n      const paymentId = paymentIdMatch[0];\n\n      callback?.({\n        text: `🔍 Checking payment status for ID: ${paymentId}...`,\n        action: \"CHECK_PAYMENT\",\n        type: \"processing\",\n      });\n\n      const walletResponse = await icpWalletProvider.get(\n        runtime,\n        message,\n        state\n      );\n      if (!walletResponse.wallet || !walletResponse.createActor) {\n        throw new Error(\"Failed to initialize wallet\");\n      }\n\n      const status = await checkPaymentStatus(\n        paymentId,\n        walletResponse.createActor\n      );\n      console.log(\"Status:\", status);\n      let statusMessage = \"\";\n      switch (status.isPaid) {\n        case true:\n          statusMessage =\n            `✅ Purchase Completed!\\n\\n` +\n            `Amount: ${status.tokenAmount} ${status.tokenSymbol}\\n` +\n            `Value: $${Number(status.usdAmount).toFixed(2)}\\n` +\n            `Delivered to: ${status.destinationAddress}\\n`;\n          break;\n\n        case false:\n          if (status.error.length >0) {\n            statusMessage =\n              `❌ Payment Failed\\n\\n` +\n              `Amount: ${status.tokenAmount} ${status.tokenSymbol}\\n` +\n              `Value: $${status.usdAmount}\\n` +\n              `Destination: ${status.destinationAddress}\\n` +\n              \"Escrow does not have enough funds to complete the payment\";\n          } else {\n            statusMessage =\n              `⏳ Payment Pending\\n\\n`\n            }\n      }\n\n      callback?.({\n        text: statusMessage,\n        action: \"CHECK_PAYMENT\",\n        type: status.isPaid\n          ? \"success\"\n          : !status.isPaid\n          ? \"error\"\n          : \"processing\",\n      });\n    } catch (error) {\n      console.error(\"Payment status check error:\", error);\n      callback?.({\n        text: `❌ Failed to check payment status: ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`,\n        action: \"CHECK_PAYMENT\",\n        type: \"error\",\n      });\n    }\n  },\n\n  examples: [\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Check payment status for abc123-def456-ghi789\",\n          action: \"CHECK_PAYMENT\",\n        },\n      },\n      {\n        user: \"{{user2}}\",\n        content: {\n          text: \"Checking payment status...\",\n          action: \"CHECK_PAYMENT\",\n        },\n      },\n    ],\n  ],\n};\n","import {\n  type Action,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n} from \"@elizaos/core\";\nimport { icpWalletProvider } from \"../providers/wallet\";\nimport { GovernanceCanister } from \"@dfinity/nns\";\nimport { createAgent } from \"@dfinity/utils\";\nimport { Principal } from \"@dfinity/principal\";\nimport { CANISTER_IDS } from \"../constants/canisters\";\n\nconst HOST = \"https://icp-api.io\"; // You may want to make this configurable\n\nexport const checkNeuronsAction: Action = {\n  name: \"CHECK_NEURONS\",\n  description: \"Check all available NNS neurons for the user\",\n  similes: [\"CHECK_NEURONS\", \"MY_NEURONS\", \"LIST_NEURONS\", \"SHOW_NEURONS\"],\n\n  validate: async (_runtime: IAgentRuntime, message: Memory) => {\n    return typeof message.content === \"string\"\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State | undefined,\n    _options: { [key: string]: unknown } | undefined,\n    callback?: HandlerCallback\n  ): Promise<void> => {\n    try {\n      callback?.({\n        text: \"🔍 Fetching your NNS neurons...\",\n        action: \"CHECK_NEURONS\",\n        type: \"processing\",\n      });\n\n      if (!state) {\n        state = await runtime.composeState(message);\n      }\n\n      // Get wallet/identity\n      const walletResponse = await icpWalletProvider.get(\n        runtime,\n        message,\n        state\n      );\n      if (!walletResponse.wallet || !walletResponse.identity) {\n        throw new Error(\"Failed to initialize wallet/identity\");\n      }\n\n      // Create agent\n      const agent = await createAgent({\n        identity: walletResponse.identity,\n        host: HOST,\n      });\n\n      // Create governance canister instance\n      const { listNeurons } = GovernanceCanister.create({\n        agent,\n        canisterId: Principal.fromText(CANISTER_IDS.GOVERNANCE),\n      });\n\n      // Fetch neurons\n      const myNeurons = await listNeurons({ certified: false });\n\n      if (myNeurons.length === 0) {\n        callback?.({\n          text: \"You have no NNS neurons.\",\n          action: \"CHECK_NEURONS\",\n          type: \"success\",\n        });\n        return;\n      }\n      // console.log(\"myNeurons :\", myNeurons);\n\n      // Format neuron info\n      const neuronList = myNeurons\n        .map((n, i) => {\n          const id = n.neuronId?.toString() || \"Unknown\";\n          const createdDate = new Date(\n            Number(n.createdTimestampSeconds) * 1000\n          ).toLocaleDateString();\n          const icpStake = (\n            Number(n.fullNeuron.cachedNeuronStake) / 100000000\n          ).toFixed(2);\n          const ageInDays = Math.floor(Number(n.ageSeconds) / (24 * 60 * 60));\n          const votingPower = (Number(n.votingPower) / 100000000).toFixed(2);\n          const dissolveDelay = Math.floor(\n            Number(n.dissolveDelaySeconds) / (24 * 60 * 60)\n          );\n          const maturityRewards = (Number(n.fullNeuron.maturityE8sEquivalent) / 100000000).toFixed(5);\n          return `Neuron #${i + 1}:\n              - ID: ${id}\n              - Created: ${createdDate}\n              - Stake: ${icpStake} ICP\n              - Age: ${ageInDays} days\n              - Voting Power: ${votingPower}\n              - Dissolve Delay: ${dissolveDelay} days\n              - Maturity Rewards: ${maturityRewards} ICP\n              `;\n        })\n        .join(\"\\n\\n\");\n\n      callback?.({\n        text: `🧠 Your NNS Neurons:\\n\\n${neuronList}`,\n        action: \"CHECK_NEURONS\",\n        type: \"success\",\n      });\n    } catch (error) {\n      console.error(\"Neuron check error:\", error);\n      callback?.({\n        text: `❌ Failed to fetch neurons: ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`,\n        action: \"CHECK_NEURONS\",\n        type: \"error\",\n      });\n    }\n  },\n\n  examples: [\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Show me my neurons\",\n          action: \"CHECK_NEURONS\",\n        },\n      },\n      {\n        user: \"{{user2}}\",\n        content: {\n          text: \"🔍 Fetching your NNS neurons...\",\n          action: \"CHECK_NEURONS\",\n        },\n      },\n    ],\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"List all my NNS neurons\",\n          action: \"CHECK_NEURONS\",\n        },\n      },\n      {\n        user: \"{{user2}}\",\n        content: {\n          text: \"🧠 Your NNS Neurons:\\n\\nNeuron #1: ...\",\n          action: \"CHECK_NEURONS\",\n        },\n      },\n    ],\n  ],\n};\n","import {\n    composeContext,\n  generateObjectDeprecated,\n  ModelClass,\n  type Action,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n} from \"@elizaos/core\";\nimport { icpWalletProvider } from \"../providers/wallet\";\nimport { GovernanceCanister } from \"@dfinity/nns\";\nimport { createAgent } from \"@dfinity/utils\";\nimport { Principal } from \"@dfinity/principal\";\nimport { AccountIdentifier, LedgerCanister,SubAccount } from \"@dfinity/ledger-icp\";\nimport { CANISTER_IDS } from \"../constants/canisters\";\nimport { idlFactory as icrcIdlFactory } from \"../canisters/icrc/index.did\";\nimport { stakeNeuronTemplate } from \"./prompts/token\"; // Adjust path as needed\n\nimport { createHash } from 'crypto';\n\n\nconst GOVERNANCE_CANISTER_ID = \"rrkah-fqaaa-aaaaa-aaaaq-cai\";\nconst LEDGER_CANISTER_ID = \"ryjl3-tyaaa-aaaaa-aaaba-cai\";\nconst HOST = \"https://icp-api.io\";\nconst DEFAULT_FEE = BigInt(10000); // 0.0001 ICP in e8s\n\nfunction extractAmountFromPrompt(prompt: string): number | null {\n  const match = prompt.match(/with\\s+([\\d.]+)\\s*icp/i);\n  if (!match) return null;\n  const icp = parseFloat(match[1]);\n  if (isNaN(icp) || icp <= 0) return null;\n  return icp;\n}\n\n\n  function subaccountFromPrincipalAndNonce(principal, nonce) {\n    const subaccountPrefix = Buffer.from('\\x0Asubaccount', 'latin1'); // length 10, then string\n    const principalBytes = principal.toUint8Array(); // Buffer or Uint8Array\n    const nonceBuffer = Buffer.alloc(8);\n    nonceBuffer.writeBigUInt64BE(BigInt(nonce));\n    // Compose: [prefix][principal][nonce]\n    const data = Buffer.concat([subaccountPrefix, Buffer.from(principalBytes), nonceBuffer]);\n    // Hash it\n    const hash = createHash('sha256').update(data).digest();\n    // Return as Uint8Array (32 bytes)\n    return new Uint8Array(hash);\n  }\n\nexport const createNeuronAction: Action = {\n  name: \"CREATE_NEURON\",\n  description: \"Create a new NNS neuron with a specified amount of ICP.\",\n  similes: [\n    \"CREATE_NEURON\",\n    \"NEW_NEURON\",\n    \"STAKE_NEURON\",\n    \"CREATE NNS NEURON\",\n    \"CREATE A NEURON\",\n    \"STAKE ICP FOR NEURON\",\n  ],\n\n  validate: async (_runtime: IAgentRuntime, message: Memory) => {\n    const text =\n      typeof message.content === \"string\"\n        ? message.content\n        : message.content.text || \"\";\n    return /create.*neuron.*with.*icp/i.test(text) || /stake.*neuron/i.test(text);\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State | undefined,\n    _options: { [key: string]: unknown } | undefined,\n    callback?: HandlerCallback\n  ): Promise<void> => {\n    try {\n      callback?.({\n        text: \"🧠 Preparing to create a new neuron...\",\n        action: \"CREATE_NEURON\",\n        type: \"processing\",\n      });\n\n      if (!state) {\n        state = await runtime.composeState(message);\n      }\n\n\n      // Get staking details using the template\n      const stakeNeuronContext = composeContext({\n        state,\n        template: stakeNeuronTemplate,\n      });\n\n      const stakeNeuronResponse = await generateObjectDeprecated({\n        runtime,\n        context: stakeNeuronContext,\n        modelClass: ModelClass.LARGE,\n      });\n      const icpAmount = Number(stakeNeuronResponse.amount);\n      const neuronId = stakeNeuronResponse.neuronId;\n\n\n      console.log(\"stakeNeuronResponse\", stakeNeuronResponse);\n\n      if (!icpAmount) {\n        callback?.({\n          text: \"❌ Please specify the amount of ICP to stake, e.g. 'create a new neuron with 1 icp'.\",\n          action: \"CREATE_NEURON\",\n          type: \"error\",\n        });\n        return;\n      }\n\n      const stake = BigInt(Math.floor(icpAmount * 1e8));\n\n      //if the stake is less than 1 icp, throw an error\n      if (stake < BigInt(1 * 1e8)) {\n        throw new Error(\"Stake must be at least 1 ICP\");\n      }\n\n      // Get wallet/identity\n      const walletResponse = await icpWalletProvider.get(runtime, message, state);\n      if (!walletResponse.wallet || !walletResponse.identity) {\n        throw new Error(\"Failed to initialize wallet/identity\");\n      }\n\n      // Create agent\n      const agent = await createAgent({\n        identity: walletResponse.identity,\n        host: HOST,\n      });\n\n      // Prepare canisters\n      const governance = GovernanceCanister.create({\n        agent,\n        canisterId: Principal.fromText(GOVERNANCE_CANISTER_ID),\n      });\n\n      // Use LedgerCanister instead of ICRC actor\n      const ledger = LedgerCanister.create({\n        agent,\n        canisterId: Principal.fromText(LEDGER_CANISTER_ID),\n      });\n     \n      // Get principal and subaccount\n      const principal = walletResponse.identity.getPrincipal();\n      \n      callback?.({\n        text: \"🔑 Transfering ICP to governance canister...\",\n        action: \"CREATE_NEURON\",\n        type: \"processing\",\n      });\n\n      try {\n\n        //call the stakeNeuron function on the governance canister\n        const stakeNeuronResult = await governance.stakeNeuron({\n          stake: stake + BigInt(20000),\n          principal: principal,\n          ledgerCanister: ledger,\n          createdAt: undefined,\n          fee: DEFAULT_FEE,\n        });\n\n\n        console.log(\"stakeNeuronResult\", stakeNeuronResult);\n\n\n        // Modify the success message based on whether it's a new neuron or existing one\n        const successMessage = neuronId \n          ? `✅ Successfully staked ${icpAmount} ICP in neuron ${Number(stakeNeuronResult)}!`\n          : `✅ New neuron created successfully with ${icpAmount} ICP!`;\n\n        callback?.({\n          text: successMessage,\n          action: \"CREATE_NEURON\",\n          type: \"success\",\n        });\n      } catch (error) {\n        console.error(\"Stake neuron error:\", error);\n        throw error; // Re-throw to be caught by outer try-catch\n      }\n    } catch (error) {\n        //destructure the error\n        const { message, stack } = error;\n      console.error(\"Create neuron error:\", error,message,stack);\n      callback?.({\n        text: `❌ Failed to create neuron: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n        action: \"CREATE_NEURON\",\n        type: \"error\",\n      });\n    }\n  },\n\n  examples: [\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Create a new neuron with 1 icp\",\n          action: \"CREATE_NEURON\",\n        },\n      },\n      {\n        user: \"{{user2}}\",\n        content: {\n          text: \"🧠 Preparing to create a new neuron...\",\n          action: \"CREATE_NEURON\",\n        },\n      },\n    ],\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Stake 2.5 ICP to create a neuron\",\n          action: \"CREATE_NEURON\",\n        },\n      },\n      {\n        user: \"{{user2}}\",\n        content: {\n          text: \"⏳ Staking ICP to create neuron...\",\n          action: \"CREATE_NEURON\",\n        },\n      },\n    ],\n  ],\n}; ","import {\n    composeContext,\n  generateObjectDeprecated,\n  ModelClass,\n  type Action,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n} from \"@elizaos/core\";\nimport { icpWalletProvider } from \"../providers/wallet\";\nimport { GovernanceCanister } from \"@dfinity/nns\";\nimport { createAgent } from \"@dfinity/utils\";\nimport { Principal } from \"@dfinity/principal\";\nimport { CANISTER_IDS } from \"../constants/canisters\";\nimport { startDissolveNeuronTemplate } from \"./prompts/token\";\n\nconst HOST = \"https://icp-api.io\"; // You may want to make this configurable\n\n\nexport const startDissolvingNeuronAction: Action = {\n  name: \"START_DISSOLVING_NEURON\",\n  description: \"Start dissolving a specific NNS neuron by ID.\",\n  similes: [\n    \"START_DISSOLVING_NEURON\",\n    \"DISSOLVE_NEURON\",\n    \"BEGIN_DISSOLVE\",\n    \"START DISSOLVING\",\n  ],\n\n  validate: async (_runtime: IAgentRuntime, message: Memory) => {\n    const text =\n      typeof message.content === \"string\"\n        ? message.content\n        : message.content.text || \"\";\n    return typeof message.content === \"string\"\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State | undefined,\n    _options: { [key: string]: unknown } | undefined,\n    callback?: HandlerCallback\n  ): Promise<void> => {\n    try {\n      callback?.({\n        text: \"🔍 Preparing to start dissolving the neuron...\",\n        action: \"START_DISSOLVING_NEURON\",\n        type: \"processing\",\n      });\n\n      if (!state) {\n        state = await runtime.composeState(message);\n      }\n\n      const dissolveNeuronContext = composeContext({\n        state,\n        template: startDissolveNeuronTemplate,\n      });\n\n      const response = await generateObjectDeprecated({\n        runtime,\n        context: dissolveNeuronContext,\n        modelClass: ModelClass.LARGE,\n      });\n\n      console.log(\"response\", response);\n\n\n      // Get wallet/identity\n      const walletResponse = await icpWalletProvider.get(runtime, message, state);\n      if (!walletResponse.wallet || !walletResponse.identity) {\n        throw new Error(\"Failed to initialize wallet/identity\");\n      }\n\n    //   // Parse neuron ID\n    //   const text =\n    //     typeof message.content === \"string\"\n    //       ? message.content\n    //       : message.content.text || \"\";\n    //   const neuronId = extractNeuronIdFromPrompt(text);\n\n      if (!response.neuronId) {\n        callback?.({\n          text: \"❌ Please specify the neuron ID to start dissolving, e.g. 'start dissolving neuron id: 123456'.\",\n          action: \"START_DISSOLVING_NEURON\",\n          type: \"error\",\n        });\n        return;\n      }\n\n\n\n      // Create agent\n      const agent = await createAgent({\n        identity: walletResponse.identity,\n        host: HOST,\n      });\n\n      // Create governance canister instance\n      const governance = GovernanceCanister.create({\n        agent,\n        canisterId: Principal.fromText(CANISTER_IDS.GOVERNANCE),\n      });\n      // Start dissolving the neuron\n      await governance.startDissolving(BigInt(response.neuronId));\n\n      console.log(\"neuron started dissolving\", response.neuronId);\n      callback?.({\n        text: `✅ Neuron ${response.neuronId} is now dissolving.`,\n        action: \"START_DISSOLVING_NEURON\",\n        type: \"success\",\n      });\n    } catch (error) {\n      console.error(\"Start dissolving neuron error:\", error);\n      callback?.({\n        text: `❌ Failed to start dissolving neuron: The neuron id may not be valid. Or the neuron is already dissolving.`,\n        action: \"START_DISSOLVING_NEURON\",\n        type: \"error\",\n      });\n    }\n  },\n\n  examples: [\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Start dissolving neuron id: 123456\",\n          action: \"START_DISSOLVING_NEURON\",\n        },\n      },\n      {\n        user: \"{{user2}}\",\n        content: {\n          text: \"🔍 Preparing to start dissolving the neuron...\",\n          action: \"START_DISSOLVING_NEURON\",\n        },\n      },\n    ],\n  ],\n};\n","import {\n    composeContext,\n  generateObjectDeprecated,\n  ModelClass,\n  type Action,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n} from \"@elizaos/core\";\nimport { icpWalletProvider } from \"../providers/wallet\";\nimport { GovernanceCanister } from \"@dfinity/nns\";\nimport { createAgent } from \"@dfinity/utils\";\nimport { Principal } from \"@dfinity/principal\";\nimport { CANISTER_IDS } from \"../constants/canisters\";\nimport { stopDissolveNeuronTemplate } from \"./prompts/token\";\n\nconst HOST = \"https://icp-api.io\"; // You may want to make this configurable\n\n\nexport const stopDissolvingNeuronAction: Action = {\n  name: \"STOP_DISSOLVING_NEURON\",\n  description: \"Stop dissolving a specific NNS neuron by ID.\",\n  similes: [\n    \"STOP_DISSOLVING_NEURON\",\n    \"STOP_DISSOLVE\",\n    \"STOP_DISSOLVING\",\n    \"STOP DISSOLVING\",\n  ],\n\n  validate: async (_runtime: IAgentRuntime, message: Memory) => {\n    return typeof message.content === \"string\"\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State | undefined,\n    _options: { [key: string]: unknown } | undefined,\n    callback?: HandlerCallback\n  ): Promise<void> => {\n    try {\n      callback?.({\n        text: \"🔍 Preparing to stop dissolving the neuron...\",\n        action: \"STOP_DISSOLVING_NEURON\",\n        type: \"processing\",\n      });\n\n      if (!state) {\n        state = await runtime.composeState(message);\n      }\n\n      const dissolveNeuronContext = composeContext({\n        state,\n        template: stopDissolveNeuronTemplate,\n      });\n\n      const response = await generateObjectDeprecated({\n        runtime,\n        context: dissolveNeuronContext,\n        modelClass: ModelClass.LARGE,\n      });\n\n      console.log(\"response\", response);\n\n\n      // Get wallet/identity\n      const walletResponse = await icpWalletProvider.get(runtime, message, state);\n      if (!walletResponse.wallet || !walletResponse.identity) {\n        throw new Error(\"Failed to initialize wallet/identity\");\n      }\n\n    \n      if (!response.neuronId) {\n        callback?.({\n          text: \"❌ Please specify the neuron ID to stop dissolving, e.g. 'stop dissolving neuron id: 123456'.\",\n          action: \"STOP_DISSOLVING_NEURON\",\n          type: \"error\",\n        });\n        return;\n      }\n      // Create agent\n      const agent = await createAgent({\n        identity: walletResponse.identity,\n        host: HOST,\n      });\n\n      // Create governance canister instance\n      const governance = GovernanceCanister.create({\n        agent,\n        canisterId: Principal.fromText(CANISTER_IDS.GOVERNANCE),\n      });\n      // Start dissolving the neuron\n      await governance.stopDissolving(BigInt(response.neuronId));\n      console.log(\"neuron stopped dissolving\", response.neuronId);\n\n      callback?.({\n        text: `✅ Neuron ${response.neuronId} is now stopped from dissolving.`,\n        action: \"STOP_DISSOLVING_NEURON\",\n        type: \"success\",\n      });\n    } catch (error) {\n      console.error(\"Start dissolving neuron error:\", error);\n      callback?.({\n        text: `❌ Failed to stop dissolving neuron: The neuron id may not be valid. Or the neuron is not dissolving.`,\n        action: \"STOP_DISSOLVING_NEURON\",\n        type: \"error\",\n      });\n    }\n  },\n\n  examples: [\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Stop dissolving neuron id: 123456\",\n          action: \"STOP_DISSOLVING_NEURON\",\n        },\n      },\n      {\n        user: \"{{user2}}\",\n        content: {\n          text: \"🔍 Preparing to stop dissolving the neuron...\",\n          action: \"STOP_DISSOLVING_NEURON\",\n        },\n      },\n    ],\n  ],\n};\n","import {\n  type Action,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n} from \"@elizaos/core\";\nimport { icpWalletProvider } from \"../providers/wallet\";\nimport { GovernanceCanister } from \"@dfinity/nns\";\nimport { createAgent } from \"@dfinity/utils\";\nimport { Principal } from \"@dfinity/principal\";\nimport { CANISTER_IDS } from \"../constants/canisters\";\nimport { increaseDissolveDelayTemplate } from \"./prompts/token\";\nimport { composeContext } from \"@elizaos/core\";\nimport { generateObjectDeprecated } from \"@elizaos/core\";\nimport { ModelClass } from \"@elizaos/core\";\n\nconst HOST = \"https://icp-api.io\"; // You may want to make this configurable\n\nfunction extractNeuronIdAndDelayFromPrompt(prompt: string): { neuronId: bigint; delayDays: number } | null {\n  const match = prompt.match(/neuron\\s*id\\s*:\\s*(\\d+).*delay\\s*:\\s*(\\d+)/i);\n  if (!match) return null;\n  return { neuronId: BigInt(match[1]), delayDays: parseInt(match[2], 10) };\n}\n\nexport const increaseDissolveDelayAction: Action = {\n  name: \"INCREASE_DISSOLVE_DELAY\",\n  description: \"Increase the dissolve delay of a specific NNS neuron by ID.\",\n  similes: [\n    \"INCREASE_DISSOLVE_DELAY\",\n    \"EXTEND_DISSOLVE_DELAY\",\n    \"INCREASE DELAY\",\n    \"EXTEND DELAY\",\n  ],\n\n  validate: async (_runtime: IAgentRuntime, message: Memory) => {\n    return typeof message.content === \"string\"\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State | undefined,\n    _options: { [key: string]: unknown } | undefined,\n    callback?: HandlerCallback\n  ): Promise<void> => {\n    try {\n      callback?.({\n        text: \"🔍 Preparing to increase the dissolve delay of the neuron...\",\n        action: \"INCREASE_DISSOLVE_DELAY\",\n        type: \"processing\",\n      });\n\n      if (!state) {\n        state = await runtime.composeState(message);\n      }\n\n      //create a new updated state\n      state = await runtime.composeState(message);\n\n      // Get wallet/identity\n      const walletResponse = await icpWalletProvider.get(runtime, message, state);\n      if (!walletResponse.wallet || !walletResponse.identity) {\n        throw new Error(\"Failed to initialize wallet/identity\");\n      }\n\n\n      let increaseDissolveDelayContext = composeContext({\n        state,\n        template: increaseDissolveDelayTemplate,\n      });\n\n      const response = await generateObjectDeprecated({\n        runtime,\n        context: increaseDissolveDelayContext,\n        modelClass: ModelClass.LARGE,\n      });\n\n\n      console.log(\"increase dissolve delay response\", response);\n     \n\n\n      if (!response.neuronId || !response.delayDays) {\n        callback?.({\n          text: \"❌ Please specify the neuron ID and delay in days, e.g. 'increase dissolve delay for neuron id: 123456 by 30 days'.\",\n          action: \"INCREASE_DISSOLVE_DELAY\",\n          type: \"error\",\n        });\n        return;\n      }\n\n      const { neuronId, delayDays } = response;\n      const additionalDissolveDelaySeconds = delayDays * 24 * 60 * 60;\n\n      // Create agent\n      const agent = await createAgent({\n        identity: walletResponse.identity,\n        host: HOST,\n      });\n\n      // Create governance canister instance\n      const governance = GovernanceCanister.create({\n        agent,\n        canisterId: Principal.fromText(CANISTER_IDS.GOVERNANCE),\n      });\n\n      // Increase dissolve delay\n      await governance.increaseDissolveDelay({\n        neuronId: BigInt(neuronId),\n        additionalDissolveDelaySeconds: Number(additionalDissolveDelaySeconds),\n      });\n\n      callback?.({\n        text: `✅ Neuron ${neuronId} dissolve delay increased by ${delayDays} days.`,\n        action: \"INCREASE_DISSOLVE_DELAY\",\n        type: \"success\",\n      });\n    } catch (error) {\n      console.error(\"Increase dissolve delay error:\", error);\n      callback?.({\n        text: `❌ Failed to increase dissolve delay: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n        action: \"INCREASE_DISSOLVE_DELAY\",\n        type: \"error\",\n      });\n    }\n  },\n\n  examples: [\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Increase dissolve delay for neuron id: 123456 by 30 days\",\n          action: \"INCREASE_DISSOLVE_DELAY\",\n        },\n      },\n      {\n        user: \"{{user2}}\",\n        content: {\n          text: \"🔍 Preparing to increase the dissolve delay of the neuron...\",\n          action: \"INCREASE_DISSOLVE_DELAY\",\n        },\n      },\n    ],\n  ],\n};","import {\n    composeContext,\n  type Action,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n} from \"@elizaos/core\";\nimport { icpWalletProvider } from \"../providers/wallet\";\nimport { GovernanceCanister } from \"@dfinity/nns\";\nimport { createAgent } from \"@dfinity/utils\";\nimport { generateObjectDeprecated, ModelClass } from \"@elizaos/core\";\nimport { Principal } from \"@dfinity/principal\";\nimport { CANISTER_IDS } from \"../constants/canisters\";\nimport { disburseNeuronTemplate } from \"./prompts/token\";\n\nconst HOST = \"https://icp-api.io\"; // You may want to make this configurable\n\nfunction extractDisburseDetailsFromPrompt(prompt: string): { neuronId: bigint; toAccountId?: string; amount?: bigint } | null {\n  const neuronIdMatch = prompt.match(/neuron\\s*id\\s*:\\s*(\\d+)/i);\n  const accountIdMatch = prompt.match(/account\\s*id\\s*:\\s*([a-zA-Z0-9-]+)/i);\n  const amountMatch = prompt.match(/amount\\s*:\\s*(\\d+)/i);\n\n  if (!neuronIdMatch) return null;\n\n  return {\n    neuronId: BigInt(neuronIdMatch[1]),\n    toAccountId: accountIdMatch ? accountIdMatch[1] : undefined,\n    amount: amountMatch ? BigInt(amountMatch[1]) : undefined,\n  };\n}\n\nexport const disburseNeuronAction: Action = {\n  name: \"DISBURSE_NEURON\",\n  description: \"Disburse a specific NNS neuron by ID.\",\n  similes: [\n    \"DISBURSE_NEURON\",\n    \"WITHDRAW_NEURON\",\n    \"DISBURSE\",\n    \"WITHDRAW\",\n  ],\n\n  validate: async (_runtime: IAgentRuntime, message: Memory) => {\n    const text =\n      typeof message.content === \"string\"\n        ? message.content\n        : message.content.text || \"\";\n    console.log(\"text :\", text);\n\n    // More flexible pattern matching for various disburse/withdraw formats\n    const patterns = [\n      /disburse.*neuron.*id/i,\n      /withdraw.*neuron.*id/i,\n      /disburse.*from.*neuron/i,\n      /withdraw.*from.*neuron/i,\n      /disburse.*icp.*(?:from\\s+)?neuron/i,\n      /withdraw.*icp.*(?:from\\s+)?neuron/i\n    ];\n\n    return patterns.some(pattern => pattern.test(text));\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State | undefined,\n    _options: { [key: string]: unknown } | undefined,\n    callback?: HandlerCallback\n  ): Promise<void> => {\n    try {\n      callback?.({\n        text: \"🔍 Preparing to disburse the neuron...\",\n        action: \"DISBURSE_NEURON\",\n        type: \"processing\",\n      });\n\n\n      let disburseNeuronContext = composeContext({\n        state,\n        template: disburseNeuronTemplate,\n      });\n\n      let response = await generateObjectDeprecated({\n        runtime,\n        context: disburseNeuronContext,\n        modelClass: ModelClass.LARGE,\n      });\n\n\n\n\n      // Get wallet/identity\n      const walletResponse = await icpWalletProvider.get(runtime, message, state);\n      if (!walletResponse.wallet || !walletResponse.identity) {\n        throw new Error(\"Failed to initialize wallet/identity\");\n      }\n\n      const { neuronId, amount, toAccountId } = response;\n    \n\n\n      if (!neuronId || !amount || !toAccountId) {\n        callback?.({\n          text: \"❌ Please specify the neuron ID to disburse, e.g. 'disburse neuron id: 123456'.\",\n          action: \"DISBURSE_NEURON\",\n          type: \"error\",\n        });\n        return;\n      }\n\n\n\n      console.log(\"disburse details :\",neuronId,amount,toAccountId)\n\n\n\n      // Create agent\n      const agent = await createAgent({\n        identity: walletResponse.identity,\n        host: HOST,\n      });\n\n      // Create governance canister instance\n      const governance = GovernanceCanister.create({\n        agent,\n        canisterId: Principal.fromText(CANISTER_IDS.GOVERNANCE),\n      });\n\n      const formattedAmount = Number(amount) * 10 ** 18;\n\n      // Disburse the neuron\n      const result =   await governance.disburse({\n        neuronId: BigInt(neuronId),\n        toAccountId,\n        amount: BigInt(formattedAmount),\n      });\n\n      console.log(\"result :\",result)\n\n      callback?.({\n        text: `✅ Neuron ${neuronId} has been disbursed.`,\n        action: \"DISBURSE_NEURON\",\n        type: \"success\",\n      });\n    } catch (error) {\n      console.error(\"Disburse neuron error:\", error);\n      callback?.({\n        text: `❌ Failed to disburse neuron. The neuron might not exist or there is not enough maturity in the neuron to disburse.`,\n        action: \"DISBURSE_NEURON\",\n        type: \"error\",\n      });\n    }\n  },\n\n  examples: [\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Disburse neuron id: 123456 to account id: abcdef-ghi\",\n          action: \"DISBURSE_NEURON\",\n        },\n      },\n      {\n        user: \"{{user2}}\",\n        content: {\n          text: \"🔍 Preparing to disburse the neuron...\",\n          action: \"DISBURSE_NEURON\",\n        },\n      },\n    ],\n  ],\n};\n\n","import { icpWalletProvider } from \"./providers/wallet\";\nimport {\n    executeCreateToken,\n    checkBalancesAction,\n    getTokenPriceAction,\n    transferTokenAction,\n    swapAction,\n    buyTokenAction,\n    checkPaymentAction,\n    checkNeuronsAction,\n    createNeuronAction,\n    startDissolvingNeuronAction,\n    stopDissolvingNeuronAction,\n    increaseDissolveDelayAction,\n    disburseNeuronAction\n} from \"./actions\";\n\nexport const icpPlugin = {\n    name: \"icp\",\n    description: \"Internet Computer Protocol Plugin for Eliza\",\n    providers: [icpWalletProvider],\n    actions: [\n        swapAction,\n        executeCreateToken,\n        checkBalancesAction,\n        getTokenPriceAction,\n        checkNeuronsAction,\n        createNeuronAction,\n        transferTokenAction,\n        buyTokenAction,\n        checkPaymentAction,\n        startDissolvingNeuronAction,\n        stopDissolvingNeuronAction,\n        increaseDissolveDelayAction,\n        disburseNeuronAction,\n    ],\n    evaluators: [],\n};\n\nexport default icpPlugin;"],"mappings":"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","names":["idlFactory","util","objectUtil","errorUtil","errorMap","ctx","result","issues","elements","processed","r","_a","_b","ZodFirstPartyTypeKind","ApproveArgs","ApproveResult","Principal","Principal","Principal","composeContext","generateObjectDeprecated","ModelClass","idlFactory","Result","Transaction","idlFactory","composeContext","generateObjectDeprecated","ModelClass","ModelClass","composeContext","generateObjectDeprecated","idlFactory","Principal","idlFactory","Error","Result","idlFactory","Error","Result","Principal","idlFactory","composeContext","generateObjectDeprecated","ModelClass","ModelClass","composeContext","generateObjectDeprecated","Principal","Principal","composeContext","generateObjectDeprecated","ModelClass","idlFactory","Transaction","idlFactory","Principal","Principal","composeContext","generateObjectDeprecated","ModelClass","GovernanceCanister","createAgent","Principal","HOST","composeContext","generateObjectDeprecated","ModelClass","createAgent","HOST","GovernanceCanister","Principal","message","composeContext","generateObjectDeprecated","ModelClass","GovernanceCanister","createAgent","Principal","HOST","composeContext","generateObjectDeprecated","ModelClass","createAgent","GovernanceCanister","Principal","composeContext","generateObjectDeprecated","ModelClass","GovernanceCanister","createAgent","Principal","HOST","composeContext","generateObjectDeprecated","ModelClass","createAgent","GovernanceCanister","Principal","GovernanceCanister","createAgent","Principal","composeContext","generateObjectDeprecated","ModelClass","HOST","composeContext","generateObjectDeprecated","ModelClass","createAgent","HOST","GovernanceCanister","Principal","composeContext","GovernanceCanister","createAgent","generateObjectDeprecated","ModelClass","Principal","HOST","composeContext","generateObjectDeprecated","ModelClass","createAgent","HOST","GovernanceCanister","Principal"]}